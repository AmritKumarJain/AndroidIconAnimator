(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var EXTRA_PADDING = 12;
var GRID_INTERVALS_PX = [1, 2, 4, 8, 16, 24, 48, 100, 100, 250];
var LABEL_OFFSET = 12;
var TICK_SIZE = 6;

angular.module('AVDStudio').directive('canvasRuler', function () {
  return {
    restrict: 'E',
    scope: {},
    template: '<canvas></canvas>',
    replace: true,
    require: '^studioCanvas',
    link: function link(scope, element, attrs, studioCanvasCtrl) {
      var $canvas = element;
      var canvas = $canvas.get(0);
      var isHorizontal = attrs.orientation == 'horizontal';
      var artworkWidth = void 0,
          artworkHeight = void 0;
      var mouseX = void 0,
          mouseY = void 0;

      $canvas.addClass('canvas-ruler').addClass('orientation-' + attrs.orientation);

      // most scope methods called by canvas

      scope.hideMouse = function () {
        mouseX = -1;
        mouseY = -1;
        scope.redraw();
      };

      scope.showMousePosition = function (x, y) {
        mouseX = x;
        mouseY = y;
        scope.redraw();
      };

      scope.setArtworkSize = function (size) {
        artworkWidth = size.width;
        artworkHeight = size.height;
        scope.redraw();
      };

      scope.redraw = function () {
        var width = $canvas.width();
        var height = $canvas.height();
        $canvas.attr('width', width * window.devicePixelRatio);
        $canvas.attr('height', height * window.devicePixelRatio);

        var ctx = canvas.getContext('2d');
        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        ctx.translate(isHorizontal ? EXTRA_PADDING : 0, isHorizontal ? 0 : EXTRA_PADDING);

        var zoom = Math.max(1, isHorizontal ? (width - EXTRA_PADDING * 2) / artworkWidth : (height - EXTRA_PADDING * 2) / artworkHeight);

        // compute grid spacing (40 = minimum grid spacing in pixels)
        var interval = 0;
        var spacingArtPx = GRID_INTERVALS_PX[interval];
        while (spacingArtPx * zoom < 40 || interval >= GRID_INTERVALS_PX.length) {
          ++interval;
          spacingArtPx = GRID_INTERVALS_PX[interval];
        }

        var spacingRulerPx = spacingArtPx * zoom;

        // text labels
        ctx.fillStyle = 'rgba(255,255,255,.3)';
        ctx.font = '10px Roboto';
        if (isHorizontal) {
          ctx.textBaseline = 'alphabetic';
          ctx.textAlign = 'center';
          for (var x = 0, t = 0; x <= width - EXTRA_PADDING * 2; x += spacingRulerPx, t += spacingArtPx) {
            ctx.fillText(t, x, height - LABEL_OFFSET);
            ctx.fillRect(x - 0.5, height - TICK_SIZE, 1, TICK_SIZE);
          }
        } else {
          ctx.textBaseline = 'middle';
          ctx.textAlign = 'right';
          for (var y = 0, _t = 0; y <= height - EXTRA_PADDING * 2; y += spacingRulerPx, _t += spacingArtPx) {
            ctx.fillText(_t, width - LABEL_OFFSET, y);
            ctx.fillRect(width - TICK_SIZE, y - 0.5, TICK_SIZE, 1);
          }
        }

        ctx.fillStyle = 'rgba(255,255,255,.7)';
        if (isHorizontal && mouseX >= 0) {
          ctx.fillText(mouseX, mouseX * zoom, height - LABEL_OFFSET);
        } else if (!isHorizontal && mouseY >= 0) {
          ctx.fillText(mouseY, width - LABEL_OFFSET, mouseY * zoom);
        }
      };

      studioCanvasCtrl.registerRuler(scope);
      scope.$on('$destroy', function () {
        return studioCanvasCtrl.unregisterRuler(scope);
      });
    }
  };
});

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _model = require('model');

var _ColorUtil = require('ColorUtil');

var _RenderUtil = require('RenderUtil');

var _ElementResizeWatcher = require('ElementResizeWatcher');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CANVAS_MARGIN = 72; // pixels


var CanvasController = function () {
  function CanvasController($scope, $element, $attrs, StudioStateService, $timeout) {
    var _this = this;

    _classCallCheck(this, CanvasController);

    this.scope_ = $scope;
    this.element_ = $element;
    this.attrs_ = $attrs;
    this.canvas_ = $element.find('canvas');
    this.offscreenCanvas_ = $(document.createElement('canvas'));
    this.studioState_ = StudioStateService;
    this.registeredRulers_ = [];

    this.isPreviewMode = 'previewMode' in $attrs;
    if (this.isPreviewMode) {
      this.element_.addClass('preview-mode');
    }

    this.setupMouseEventHandlers_();

    var changeHandler_ = function changeHandler_(event, changes) {
      if (changes.playing) {
        if (_this.studioState_.playing) {
          _this.animStart = Number(new Date()) - _this.studioState_.activeTime / _this.studioState_.playbackSpeed;
        }

        _this.drawCanvas_();
      }

      if (changes.activeTime) {
        _this.animTime = _this.studioState_.activeTime;
        _this.drawCanvas_();
      }

      if (changes.selection) {
        _this.drawCanvas_();
      }

      if (changes.artwork || changes.animations || changes.activeAnimation) {
        _this.resizeAndDrawCanvas_();
      }
    };

    changeHandler_(null, { playing: true, activeTime: true, artwork: true });

    this.studioState_.onChange(changeHandler_, $scope);

    if (!this.isPreviewMode) {
      var resizeWatcher = new _ElementResizeWatcher.ElementResizeWatcher(this.element_, function () {
        return _this.resizeAndDrawCanvas_();
      });
      $scope.$on('$destroy', function () {
        return resizeWatcher.destroy();
      });
    }

    $timeout(function () {
      return _this.resizeAndDrawCanvas_();
    }, 0);
  }

  _createClass(CanvasController, [{
    key: 'hitTest_',
    value: function hitTest_(point) {
      var rootLayer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      rootLayer = rootLayer || this.artwork;

      var matrices = [];

      // TODO(alockwood): select clips and/or groups in addition to paths?
      var hitTestLayer_ = function hitTestLayer_(layer) {
        if (layer instanceof _model.LayerGroup) {
          matrices.unshift(_RenderUtil.RenderUtil.transformMatrixForLayer(layer));
          // hitTestLayer || h and not the other way around because of reverse z-order
          var result = layer.layers.reduce(function (h, layer) {
            return hitTestLayer_(layer) || h;
          }, null);
          matrices.shift();
          return result;
        } else if (layer instanceof _model.PathLayer && layer.pathData) {
          var pointTransformerFn = function pointTransformerFn(p) {
            return _RenderUtil.RenderUtil.transformPoint(matrices, p);
          };
          if (layer.fillColor && layer.pathData.hitTestFill(point, pointTransformerFn) || layer.strokeColor && layer.pathData.hitTestStroke(point, pointTransformerFn, layer.strokeWidth)) {
            return layer;
          }

          return null;
        }

        return null;
      };

      return hitTestLayer_(rootLayer);
    }
  }, {
    key: 'setupMouseEventHandlers_',
    value: function setupMouseEventHandlers_() {
      var _this2 = this;

      this.canvas_.on('mousedown', function (event) {
        var canvasOffset = _this2.canvas_.offset();
        var x = (event.pageX - canvasOffset.left) / _this2.scale_;
        var y = (event.pageY - canvasOffset.top) / _this2.scale_;

        var currentArtwork = void 0;
        if (_this2.studioState_.animationRenderer) {
          _this2.studioState_.animationRenderer.setAnimationTime(_this2.animTime || 0);
          currentArtwork = _this2.studioState_.animationRenderer.renderedArtwork;
        } else {
          currentArtwork = _this2.artwork;
        }

        var targetLayer = _this2.hitTest_({ x: x, y: y }, currentArtwork);
        _this2.scope_.$apply(function () {
          if (targetLayer) {
            targetLayer = _this2.artwork.findLayerById(targetLayer.id);
            if (event.metaKey || event.shiftKey) {
              _this2.studioState_.toggleSelected(targetLayer);
            } else {
              _this2.studioState_.selection = [targetLayer];
            }
          } else if (!event.metaKey && !event.shiftKey) {
            _this2.studioState_.selection = [];
          }
        });
      }).on('mousemove', function (event) {
        var canvasOffset = _this2.canvas_.offset();
        var x = Math.round((event.pageX - canvasOffset.left) / _this2.scale_);
        var y = Math.round((event.pageY - canvasOffset.top) / _this2.scale_);
        _this2.registeredRulers_.forEach(function (r) {
          return r.showMousePosition(x, y);
        });
      }).on('mouseleave', function () {
        _this2.registeredRulers_.forEach(function (r) {
          return r.hideMouse();
        });
      });
    }
  }, {
    key: 'registerRuler',
    value: function registerRuler(rulerScope) {
      this.registeredRulers_.push(rulerScope);
      this.redrawRulers_();
    }
  }, {
    key: 'unregisterRuler',
    value: function unregisterRuler(rulerScope) {
      var idx = this.registeredRulers_.indexOf(rulerScope);
      if (idx >= 0) {
        this.registeredRulers_.splice(idx, 1);
      }
    }
  }, {
    key: 'redrawRulers_',
    value: function redrawRulers_() {
      var _this3 = this;

      this.registeredRulers_.forEach(function (r) {
        r.setArtworkSize({
          width: _this3.artwork.width,
          height: _this3.artwork.height
        });
        r.redraw();
      });
    }
  }, {
    key: 'resizeAndDrawCanvas_',
    value: function resizeAndDrawCanvas_() {
      var _this4 = this;

      if (this.isPreviewMode) {
        this.scale_ = 1;
      } else {
        var containerWidth = Math.max(1, this.element_.width() - CANVAS_MARGIN * 2);
        var containerHeight = Math.max(1, this.element_.height() - CANVAS_MARGIN * 2);
        var containerAspectRatio = containerWidth / containerHeight;
        var artworkAspectRatio = this.artwork.width / (this.artwork.height || 1);

        if (artworkAspectRatio > containerAspectRatio) {
          this.scale_ = containerWidth / this.artwork.width;
        } else {
          this.scale_ = containerHeight / this.artwork.height;
        }
      }

      this.scale_ = this.scale_ > 1 ? Math.floor(this.scale_) : Math.max(.1, this.scale_);
      this.backingStoreScale_ = this.scale_ * (window.devicePixelRatio || 1);
      [this.canvas_, this.offscreenCanvas_].forEach(function (canvas) {
        canvas.attr({
          width: _this4.artwork.width * _this4.backingStoreScale_,
          height: _this4.artwork.height * _this4.backingStoreScale_
        }).css({
          width: _this4.artwork.width * _this4.scale_,
          height: _this4.artwork.height * _this4.scale_
        });
      });

      this.drawCanvas_();
      this.redrawRulers_();
    }
  }, {
    key: 'drawCanvas_',
    value: function drawCanvas_() {
      var _this5 = this;

      if (this.animationFrameRequest_) {
        window.cancelAnimationFrame(this.animationFrameRequest_);
        this.animationFrameRequest_ = null;
      }

      if (!this.artwork) {
        return;
      }

      var ctx = this.canvas_.get(0).getContext('2d');
      ctx.save();
      ctx.scale(this.backingStoreScale_, this.backingStoreScale_);
      ctx.clearRect(0, 0, this.artwork.width, this.artwork.height);
      if (this.artwork.canvasColor) {
        ctx.fillStyle = _ColorUtil.ColorUtil.androidToCssColor(this.artwork.canvasColor);
        ctx.fillRect(0, 0, this.artwork.width, this.artwork.height);
      }

      var selectionStroke_ = function selectionStroke_(extraSetupFn) {
        ctx.save();
        // ctx.globalCompositeOperation = 'exclusion';
        extraSetupFn && extraSetupFn();
        ctx.lineWidth = 6 / _this5.scale_; // 2px
        ctx.strokeStyle = '#fff';
        ctx.lineCap = 'round';
        ctx.stroke();
        ctx.strokeStyle = '#2196f3';
        ctx.lineWidth = 3 / _this5.scale_; // 2px
        ctx.stroke();
        ctx.restore();
      };

      var transforms = [];

      var drawLayer_ = function drawLayer_(ctx, layer, selectionMode) {
        if (layer instanceof _model.LayerGroup) {
          if (!selectionMode && !layer.visible) {
            return;
          }

          transforms.unshift(_RenderUtil.RenderUtil.transformMatrixForLayer(layer));

          ctx.save();
          layer.layers.forEach(function (layer) {
            return drawLayer_(ctx, layer, selectionMode);
          });
          ctx.restore();

          if (selectionMode && layer.selected) {
            var bounds = layer.computeBounds();
            if (bounds) {
              ctx.save();
              ctx.transform.apply(ctx, _toConsumableArray(_RenderUtil.RenderUtil.flattenTransforms(transforms)));
              ctx.beginPath();
              ctx.rect(bounds.l, bounds.t, bounds.r - bounds.l, bounds.b - bounds.t);
              ctx.restore();
              selectionStroke_();
            }
          }

          transforms.shift();
        } else if (layer instanceof _model.MaskLayer) {
          ctx.save();
          ctx.transform.apply(ctx, _toConsumableArray(_RenderUtil.RenderUtil.flattenTransforms(transforms)));
          layer.pathData && layer.pathData.execute(ctx);
          ctx.restore();

          if (!selectionMode) {
            // clip further layers
            ctx.clip();
          } else if (selectionMode && layer.selected) {
            // this layer is selected, draw the layer selection stuff
            selectionStroke_(function () {
              return ctx.setLineDash([5 / _this5.scale_, 5 / _this5.scale_]);
            });
          }
        } else {
          if (!selectionMode && !layer.visible) {
            return;
          }

          var flattenedTransforms = _RenderUtil.RenderUtil.flattenTransforms(transforms);

          ctx.save();
          ctx.transform.apply(ctx, _toConsumableArray(flattenedTransforms));
          if (selectionMode) {
            layer.pathData && layer.pathData.execute(ctx);
          } else {
            layer.pathData && layer.pathData.executeTrimmed(ctx, layer.trimPathStart, layer.trimPathEnd, layer.trimPathOffset);
          }
          ctx.restore();

          if (!selectionMode) {
            var strokeWidthMultiplier = _RenderUtil.RenderUtil.computeStrokeWidthMultiplier(flattenedTransforms);

            // draw the actual layer
            ctx.strokeStyle = _ColorUtil.ColorUtil.androidToCssColor(layer.strokeColor, layer.strokeAlpha);
            ctx.lineWidth = layer.strokeWidth * strokeWidthMultiplier;
            ctx.fillStyle = _ColorUtil.ColorUtil.androidToCssColor(layer.fillColor, layer.fillAlpha);
            ctx.lineCap = layer.strokeLinecap || _model.DefaultValues.LINECAP;
            ctx.lineJoin = layer.strokeLinejoin || _model.DefaultValues.LINEJOIN;
            ctx.miterLimit = layer.miterLimit || _model.DefaultValues.MITER_LIMIT;

            if (layer.strokeColor && layer.strokeWidth && layer.trimPathStart != layer.trimPathEnd) {
              ctx.stroke();
            }
            if (layer.fillColor) {
              ctx.fill();
            }
          } else if (selectionMode && layer.selected) {
            // this layer is selected, draw the layer selection stuff
            selectionStroke_();
          }
        }
      };

      // draw artwork
      var offscreenCtx = this.offscreenCanvas_.get(0).getContext('2d');
      var currentArtwork = void 0;
      if (this.studioState_.animationRenderer) {
        this.studioState_.animationRenderer.setAnimationTime(this.animTime || 0);
        currentArtwork = this.studioState_.animationRenderer.renderedArtwork;
      } else {
        currentArtwork = this.artwork;
      }
      var currentAlpha = currentArtwork.alpha;
      if (currentAlpha != 1) {
        offscreenCtx.save();
        offscreenCtx.scale(this.backingStoreScale_, this.backingStoreScale_);
        offscreenCtx.clearRect(0, 0, currentArtwork.width, currentArtwork.height);
      }
      var artworkCtx = currentAlpha == 1 ? ctx : offscreenCtx;
      drawLayer_(artworkCtx, currentArtwork);

      if (currentArtwork.alpha != 1) {
        var oldGlobalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = currentAlpha;
        ctx.scale(1 / this.backingStoreScale_, 1 / this.backingStoreScale_);
        ctx.drawImage(offscreenCtx.canvas, 0, 0);
        ctx.scale(this.backingStoreScale_, this.backingStoreScale_);
        ctx.globalAlpha = oldGlobalAlpha;
        offscreenCtx.restore();
      }
      if (!this.isPreviewMode) {
        drawLayer_(ctx, currentArtwork, true);
      }

      ctx.restore();

      // draw pixel grid
      if (!this.isPreviewMode && this.scale_ > 4) {
        ctx.fillStyle = 'rgba(128, 128, 128, .25)';

        for (var x = 1; x < this.artwork.width; ++x) {
          ctx.fillRect(x * this.backingStoreScale_ - 0.5 * (window.devicePixelRatio || 1), 0, 1 * (window.devicePixelRatio || 1), this.artwork.height * this.backingStoreScale_);
        }

        for (var y = 1; y < this.artwork.height; ++y) {
          ctx.fillRect(0, y * this.backingStoreScale_ - 0.5 * (window.devicePixelRatio || 1), this.artwork.width * this.backingStoreScale_, 1 * (window.devicePixelRatio || 1));
        }
      }

      if (this.studioState_.playing) {
        this.animationFrameRequest_ = window.requestAnimationFrame(function () {
          _this5.animTime = (Number(new Date()) - _this5.animStart) * _this5.studioState_.playbackSpeed % _this5.animation.duration;
          _this5.scope_.$apply(function () {
            return _this5.studioState_.activeTime = _this5.animTime;
          });
          _this5.drawCanvas_();
        });
      }
    }
  }, {
    key: 'artwork',
    get: function get() {
      return this.studioState_.artwork;
    }
  }, {
    key: 'animation',
    get: function get() {
      return this.studioState_.activeAnimation;
    }
  }]);

  return CanvasController;
}();

angular.module('AVDStudio').directive('studioCanvas', function () {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'components/canvas/canvas.html',
    replace: true,
    bindToController: true,
    controller: CanvasController,
    controllerAs: 'ctrl'
  };
});

},{"ColorUtil":15,"ElementResizeWatcher":17,"RenderUtil":20,"model":35}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var State = {
  NONE: 0,
  DRAGGING: 1,
  LOADING: 2
};

var FileDropTargetController = function () {
  function FileDropTargetController($scope, $element, $attrs) {
    var _this = this;

    _classCallCheck(this, FileDropTargetController);

    this.scope_ = $scope;
    this.element_ = $element;
    this.element_.addClass('file-drop-target');

    this.onDropFile_ = $attrs.fileDropTarget ? function (fileInfo) {
      return $scope.$eval($attrs.fileDropTarget, { fileInfo: fileInfo });
    } : function () {};

    this.state_ = State.NONE;

    // set up drag event listeners, with debouncing because dragging over/out of each child
    // triggers these events on the element

    var notDraggingTimeout_ = void 0;

    var setDragging_ = function setDragging_(dragging) {
      if (dragging) {
        // when moving from child to child, dragenter is sent before dragleave
        // on previous child
        window.setTimeout(function () {
          if (notDraggingTimeout_) {
            window.clearTimeout(notDraggingTimeout_);
            notDraggingTimeout_ = null;
          }
          _this.setState_(State.DRAGGING);
        }, 0);
      } else {
        if (notDraggingTimeout_) {
          window.clearTimeout(notDraggingTimeout_);
        }
        notDraggingTimeout_ = window.setTimeout(function () {
          return _this.setState_(State.NONE);
        }, 100);
      }
    };

    this.element_.on('dragenter', function (event) {
      event.preventDefault();
      setDragging_(true);
      return false;
    }).on('dragover', function (event) {
      event.preventDefault();
      event.originalEvent.dataTransfer.dropEffect = 'copy';
      return false;
    }).on('dragleave', function (event) {
      event.preventDefault();
      setDragging_(false);
      return false;
    }).on('drop', function (event) {
      event.preventDefault();
      _this.setState_(State.NONE);
      _this.handleDropFiles_(event.originalEvent.dataTransfer.files);
      return false;
    });
  }

  _createClass(FileDropTargetController, [{
    key: 'setState_',
    value: function setState_(state) {
      this.state_ = state;
      this.element_.toggleClass('is-dragging-over', this.state_ === State.DRAGGING);
      this.element_.toggleClass('is-loading', this.state_ === State.LOADING);
    }
  }, {
    key: 'handleDropFiles_',
    value: function handleDropFiles_(fileList) {
      var _this2 = this;

      fileList = Array.from(fileList || []);
      fileList = fileList.filter(function (file) {
        return file.type === 'image/svg+xml' || file.type === 'application/json' || file.type === 'application/xml' || file.type === 'text/xml' || file.name.match(/\.iconanim$/);
      });
      if (!fileList.length) {
        return;
      }

      var file = fileList[0];

      var fileReader = new FileReader();

      fileReader.onload = function (event) {
        _this2.setState_(State.NONE);
        _this2.scope_.$apply(function () {
          return _this2.onDropFile_({
            textContent: event.target.result,
            name: file.name,
            type: file.type
          });
        });
      };

      fileReader.onerror = function (event) {
        _this2.setState_(State.NONE);
        switch (event.target.error.code) {
          case event.target.error.NOT_FOUND_ERR:
            alert('File not found!');
            break;
          case event.target.error.NOT_READABLE_ERR:
            alert('File is not readable');
            break;
          case event.target.error.ABORT_ERR:
            break; // noop
          default:
            alert('An error occurred reading this file.');
        }
      };

      fileReader.onabort = function (e) {
        this.setState_(State.NONE);
        alert('File read cancelled');
      };

      this.setState_(State.LOADING);
      fileReader.readAsText(file);
    }
  }]);

  return FileDropTargetController;
}();

angular.module('AVDStudio').directive('fileDropTarget', function () {
  return {
    restrict: 'A',
    controller: FileDropTargetController
  };
});

},{}],4:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FileOpenHandlerController = function () {
  function FileOpenHandlerController($scope, $element, $attrs) {
    _classCallCheck(this, FileOpenHandlerController);

    this.scope_ = $scope;
    this.element_ = $element;
    this.element_.addClass('file-open-proxy');

    this.onOpenFile_ = $attrs.fileOpenHandler ? function (fileInfo) {
      return $scope.$eval($attrs.fileOpenHandler, { fileInfo: fileInfo });
    } : function () {};
  }

  _createClass(FileOpenHandlerController, [{
    key: 'onLink',
    value: function onLink() {
      var _this = this;

      this.inputElement_ = this.element_.find('input');
      this.inputElement_.on('change', function () {
        var files = _this.inputElement_.get(0).files;
        if (files.length) {
          _this.handleDropFiles_(files);
        }
      });
    }
  }, {
    key: 'handleDropFiles_',
    value: function handleDropFiles_(fileList) {
      var _this2 = this;

      fileList = Array.from(fileList || []);
      fileList = fileList.filter(function (file) {
        return file.type === 'image/svg+xml' || file.type === 'application/json' || file.type === 'application/xml' || file.type === 'text/xml' || file.name.match(/\.iconanim$/);
      });
      if (!fileList.length) {
        return;
      }

      var file = fileList[0];

      var fileReader = new FileReader();

      fileReader.onload = function (event) {
        _this2.scope_.$apply(function () {
          return _this2.onOpenFile_({
            textContent: event.target.result,
            name: file.name,
            type: file.type
          });
        });
      };

      fileReader.onerror = function (event) {
        switch (event.target.error.code) {
          case event.target.error.NOT_FOUND_ERR:
            alert('File not found!');
            break;
          case event.target.error.NOT_READABLE_ERR:
            alert('File is not readable');
            break;
          case event.target.error.ABORT_ERR:
            break; // noop
          default:
            alert('An error occurred reading this file.');
        }
      };

      fileReader.onabort = function (e) {
        alert('File read cancelled');
      };

      fileReader.readAsText(file);
    }
  }]);

  return FileOpenHandlerController;
}();

angular.module('AVDStudio').directive('fileOpenHandler', function () {
  return {
    restrict: 'A',
    controller: FileOpenHandlerController,
    require: '^fileOpenHandler',
    link: function link($element, $scope, $attrs, ctrl) {
      ctrl.onLink($element);
    }
  };
});

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TimelineConsts = exports.TimelineConsts = {
  TIMELINE_ANIMATION_PADDING: 20 // 20px
};

},{}],6:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _model = require('model');

var _ModelUtil = require('ModelUtil');

var _MathUtil = require('MathUtil');

var _UiUtil = require('UiUtil');

var _DragHelper = require('DragHelper');

var _SvgLoader = require('SvgLoader');

var _VectorDrawableLoader = require('VectorDrawableLoader');

var _consts = require('./consts');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LAYER_INDENT = 20; // pixels

var SNAP_PIXELS = 10; // distance in pixels from a snap point before snapping to the point

var MIN_BLOCK_DURATION = 10; // 10ms

var MAX_ZOOM = 10;
var MIN_ZOOM = 0.01;

var MouseActions = {
  MOVING: 0,
  SCALING_UNIFORM_START: 1,
  SCALING_UNIFORM_END: 2,
  SCALING_TOGETHER_START: 3,
  SCALING_TOGETHER_END: 4
};

var LayerTimelineController = function () {
  function LayerTimelineController($scope, $element, $timeout, StudioStateService) {
    var _this = this;

    _classCallCheck(this, LayerTimelineController);

    this.scope_ = $scope;
    this.element_ = $element;
    this.timeout_ = $timeout;
    this.studioState_ = StudioStateService;
    this.studioState_.onChange(function (event, changes) {
      if (changes.artwork || changes.animations) {
        _this.rebuildModel_();
        _this.rebuildSnapTimes_();
      }
      if (changes.isReset) {
        _this.autoZoomToAnimation();
      }
    }, $scope);

    this.horizZoom = 2; // 1ms = 2px

    this.setupMouseWheelZoom_();

    this.rebuildModel_();
    this.rebuildSnapTimes_();
    this.autoZoomToAnimation();
  }

  _createClass(LayerTimelineController, [{
    key: 'setupMouseWheelZoom_',


    /**
     * Handles alt+mousewheel for zooming into and out of the timeline.
     */
    value: function setupMouseWheelZoom_() {
      var _this2 = this;

      var $timeline = this.element_.find('.slt-timeline');
      var $zoomStartActiveAnimation = void 0;
      var targetHorizZoom = void 0;
      var performZoomRAF = null;
      var endZoomTimeout = null;
      var zoomStartTimeCursorPos = void 0;

      $timeline.on('wheel', function (event) {
        if (event.altKey || event.ctrlKey) {
          // chrome+mac trackpad pinch-zoom = ctrlKey
          if (!targetHorizZoom) {
            // multiple changes can happen to targetHorizZoom before the
            // actual zoom level is updated (see performZoom_)
            targetHorizZoom = _this2.horizZoom;
          }

          event.preventDefault();
          targetHorizZoom *= Math.pow(1.01, -event.originalEvent.deltaY);
          targetHorizZoom = _MathUtil.MathUtil.constrain(targetHorizZoom, MIN_ZOOM, MAX_ZOOM);
          if (targetHorizZoom != _this2.horizZoom) {
            // zoom has changed
            if (performZoomRAF) {
              window.cancelAnimationFrame(performZoomRAF);
            }
            performZoomRAF = window.requestAnimationFrame(function () {
              return performZoom_();
            });

            if (endZoomTimeout) {
              window.clearTimeout(endZoomTimeout);
            } else {
              startZoom_();
            }

            endZoomTimeout = window.setTimeout(function () {
              return endZoom_();
            }, 100);
          }
          return false;
        }
      });

      var startZoom_ = function startZoom_() {
        $zoomStartActiveAnimation = $('.slt-timeline-animation.is-active');
        zoomStartTimeCursorPos = $zoomStartActiveAnimation.position().left + _this2.activeTime * _this2.horizZoom + _consts.TimelineConsts.TIMELINE_ANIMATION_PADDING;
      };

      var performZoom_ = function performZoom_() {
        _this2.horizZoom = targetHorizZoom;
        _this2.scope_.$apply();

        // set the scroll offset such that the time cursor remains at
        // zoomStartTimeCursorPos
        if ($zoomStartActiveAnimation) {
          var newScrollLeft = $zoomStartActiveAnimation.position().left + $timeline.scrollLeft() + _this2.activeTime * _this2.horizZoom + _consts.TimelineConsts.TIMELINE_ANIMATION_PADDING - zoomStartTimeCursorPos;
          $timeline.scrollLeft(newScrollLeft);
        }
      };

      var endZoom_ = function endZoom_() {
        zoomStartTimeCursorPos = 0;
        $zoomStartActiveAnimation = null;
        endZoomTimeout = null;
        targetHorizZoom = 0;
      };
    }

    /**
     * Rebuilds internal layer/timeline related data structures (_slt) about the current
     * artwork and animations.
     */

  }, {
    key: 'rebuildModel_',
    value: function rebuildModel_() {
      var _this3 = this;

      if (!this.artwork || !this.animations) {
        return;
      }

      var isEmptyObj_ = function isEmptyObj_(obj) {
        for (var k in obj) {
          return false;
        }
        return true;
      };

      this.artwork.walk(function (layer) {
        var _slt = {};
        _slt.layerType = layer instanceof _model.LayerGroup ? 'group' : layer instanceof _model.MaskLayer ? 'mask' : 'layer';
        _slt.blocksByProperty = {};
        _slt.availableProperties = layer.animatableProperties;
        _slt.hasAvailableProperties = !isEmptyObj_(_slt.availableProperties);
        layer._slt = _slt;
      });

      this.animations.forEach(function (animation) {
        var blocksByLayerId = _ModelUtil.ModelUtil.getOrderedAnimationBlocksByLayerIdAndProperty(animation);
        Object.keys(blocksByLayerId).forEach(function (layerId) {
          var layer = _this3.artwork.findLayerById(layerId);
          if (!layer) {
            return;
          }

          Object.keys(blocksByLayerId[layerId]).forEach(function (propertyName) {
            layer._slt.blocksByProperty[propertyName] = layer._slt.blocksByProperty[propertyName] || {};
            layer._slt.blocksByProperty[propertyName][animation.id] = blocksByLayerId[layerId][propertyName];
            delete layer._slt.availableProperties[propertyName];
            layer._slt.hasAvailableProperties = !isEmptyObj_(layer._slt.availableProperties);
          });
        });
      });
    }

    /**
     * Zooms the timeline to fit the first animation.
     */

  }, {
    key: 'autoZoomToAnimation',
    value: function autoZoomToAnimation() {
      var _this4 = this;

      if (this.animations.length) {
        _UiUtil.UiUtil.waitForElementWidth_(this.element_.find('.slt-timeline')).then(function (width) {
          width -= 100; // shave off a hundred pixels for safety
          var zoom = width / _this4.animations[0].duration;
          _this4.horizZoom = zoom;
        });
      }
    }

    /**
     * Handles scrubbing (dragging) over the timeline header area, which should
     * change the time cursor.
     */

  }, {
    key: 'onTimelineHeaderScrub',
    value: function onTimelineHeaderScrub(animation, time, options) {
      options = options || {};
      if (!options.disableSnap) {
        time = this.snapTime_(animation, time, false);
      }

      this.studioState_.deselectItem(this.studioState_.activeAnimation);
      this.studioState_.activeAnimation = animation;
      this.studioState_.activeTime = time;
      this.studioState_.playing = false;
    }

    /**
     * Builds a cache of snap times for all available animations.
     */

  }, {
    key: 'rebuildSnapTimes_',
    value: function rebuildSnapTimes_() {
      var _this5 = this;

      if (this.suppressRebuildSnapTimes_) {
        return;
      }

      this.snapTimes_ = {};
      if (this.animations) {
        this.animations.forEach(function (animation) {
          var snapTimes = new Set([]);
          snapTimes.add(0);
          snapTimes.add(animation.duration);
          animation.blocks.forEach(function (block) {
            snapTimes.add(block.startTime);
            snapTimes.add(block.endTime);
          });
          _this5.snapTimes_[animation.id] = Array.from(snapTimes);
        });
      }
    }

    /**
     * Returns a new time, possibly snapped to animation boundaries
     */

  }, {
    key: 'snapTime_',
    value: function snapTime_(animation, time) {
      var includeActiveTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var snapTimes = this.snapTimes_[animation.id];
      var snapDelta = SNAP_PIXELS / this.horizZoom;
      var reducer_ = function reducer_(bestSnapTime, snapTime) {
        var dist = Math.abs(time - snapTime);
        return dist < snapDelta && dist < Math.abs(time - bestSnapTime) ? snapTime : bestSnapTime;
      };
      var bestSnapTime = snapTimes.reduce(reducer_, Infinity);
      if (includeActiveTime) {
        bestSnapTime = reducer_(bestSnapTime, this.activeTime);
      }
      return isFinite(bestSnapTime) ? bestSnapTime : time;
    }

    /**
     * Called when adding a new timeline block to a property that's already animated
     */

  }, {
    key: 'onAddTimelineBlock',
    value: function onAddTimelineBlock($event, layer, propertyName) {
      var _this6 = this;

      var animation = this.studioState_.activeAnimation;

      var newBlockDuration = 100; // min duration of 100ms

      // find the right start time for the block, which should be a gap between
      // neighboring blocks closest to the time cursor (activeTime), of a minimum size
      var blocksByLayerId = _ModelUtil.ModelUtil.getOrderedAnimationBlocksByLayerIdAndProperty(animation);
      var blockNeighbors = (blocksByLayerId[layer.id] || {})[propertyName] || [];
      var gaps = [];
      for (var i = 0; i < blockNeighbors.length; i++) {
        gaps.push({
          start: i == 0 ? 0 : blockNeighbors[i - 1].endTime,
          end: blockNeighbors[i].startTime
        });
      }
      gaps.push({
        start: blockNeighbors.length ? blockNeighbors[blockNeighbors.length - 1].endTime : 0,
        end: animation.duration
      });
      gaps = gaps.filter(function (gap) {
        return gap.end - gap.start > newBlockDuration;
      }).map(function (gap) {
        return Object.assign(gap, {
          dist: Math.min(Math.abs(gap.end - _this6.studioState_.activeTime), Math.abs(gap.start - _this6.studioState_.activeTime))
        });
      }).sort(function (a, b) {
        return a.dist - b.dist;
      });

      if (!gaps.length) {
        // no available gaps, cancel
        return;
      }

      var startTime = Math.max(this.studioState_.activeTime, gaps[0].start);
      var endTime = Math.min(startTime + newBlockDuration, gaps[0].end);
      if (endTime - startTime < newBlockDuration) {
        startTime = endTime - newBlockDuration;
      }

      // generate the new block, cloning the current rendered property value
      var propertyObj = layer.animatableProperties[propertyName];
      var valueAtCurrentTime = this.studioState_.animationRenderer.getLayerPropertyValue(layer.id, propertyName);
      var newBlock = new _model.AnimationBlock({
        layerId: layer.id,
        propertyName: propertyName,
        startTime: startTime,
        endTime: endTime,
        fromValue: propertyObj.cloneValue(valueAtCurrentTime),
        toValue: propertyObj.cloneValue(valueAtCurrentTime)
      });

      // add the block
      newBlock.parent = animation;
      animation.blocks.push(newBlock);
      this.studioState_.selection = [newBlock];
      this.studioState_.animChanged();
    }

    /**
     * Handles clicks on an animation in the list of current animations.
     */

  }, {
    key: 'onAnimationMouseDown',
    value: function onAnimationMouseDown($event, animation) {
      if (this.studioState_.activeAnimation !== animation) {
        this.studioState_.deselectItem(this.studioState_.activeAnimation);
      }
      this.studioState_.activeAnimation = animation;
    }

    /**
     * Called in response to adding a layer of a given type to the artwork.
     */

  }, {
    key: 'onAddLayer',
    value: function onAddLayer($event, type) {
      var cls = type == 'group' ? _model.LayerGroup : type == 'mask' ? _model.MaskLayer : _model.PathLayer;
      var newLayer = new cls();
      newLayer.id = this.studioState_.getUniqueLayerId(null, newLayer);

      // TODO: add just below the selected layer
      newLayer.parent = this.studioState_.artwork; // TODO: this should be automatic
      this.studioState_.artwork.layers.push(newLayer);
      this.studioState_.artworkChanged();
    }

    /**
     * Handles clicks on a layer, either selecting or deselecting it.
     */

  }, {
    key: 'onLayerClick',
    value: function onLayerClick($event, layer) {
      if (this.suppressClick_) {
        return;
      }

      if ($event.metaKey || $event.shiftKey) {
        this.studioState_.toggleSelected(layer);
      } else {
        this.studioState_.selection = [layer];
      }
    }

    /**
     * Handle toggling expanded/collapsed visual state for a layer.
     */

  }, {
    key: 'onLayerToggleExpanded',
    value: function onLayerToggleExpanded($event, layer) {
      if (!(layer instanceof _model.LayerGroup)) {
        return;
      }

      var expand = !layer.expanded;
      if ($event.altKey) {
        // recursive expand/collapse
        layer.walk(function (layer) {
          if (layer instanceof _model.LayerGroup) {
            layer.expanded = expand;
          }
        });
      } else {
        // expand/collapse just this layer
        layer.expanded = expand;
      }

      $event.stopPropagation();
    }

    /**
     * Handle toggling of visible/invisible state.
     */

  }, {
    key: 'onLayerToggleVisibility',
    value: function onLayerToggleVisibility($event, layer) {
      layer.visible = !layer.visible;
      this.studioState_.artworkChanged();
      $event.stopPropagation();
    }

    /**
     * Converts the given path layer to a clip path.
     */

  }, {
    key: 'onConvertLayerToClipPath',
    value: function onConvertLayerToClipPath($event, layer) {
      var clipPathLayer = new _model.MaskLayer(layer);
      this.studioState_.swapLayer(layer, clipPathLayer);
    }

    /**
     * Converts the given layer (clip path) to a path layer.
     */

  }, {
    key: 'onConvertLayerToPath',
    value: function onConvertLayerToPath($event, layer) {
      var newLayer = new _model.PathLayer(layer);
      this.studioState_.swapLayer(layer, newLayer);
    }

    /**
     * Creates a new empty animation to the list of animations.
     */

  }, {
    key: 'onAddNewAnimation',
    value: function onAddNewAnimation($event) {
      var newAnim = new _model.Animation({
        id: this.studioState_.getUniqueAnimationId(),
        blocks: [],
        duration: 300
      });
      this.studioState_.deselectItem(this.studioState_.activeAnimation);
      this.studioState_.animations.push(newAnim);
      this.studioState_.activeAnimation = newAnim;
      this.studioState_.animChanged();
    }

    /**
     * Selects the given animation, for inspection w/ the property inspector.
     */

  }, {
    key: 'onAnimationHeaderClick',
    value: function onAnimationHeaderClick($event, anim) {
      this.studioState_.selection = [anim];
    }

    /**
     * Handles clicks on a timeline block (either selecting or deselecting it).
     */

  }, {
    key: 'onTimelineBlockClick',
    value: function onTimelineBlockClick($event, block, layer) {
      if (this.suppressClick_) {
        return;
      }

      if ($event.metaKey || $event.shiftKey) {
        this.studioState_.toggleSelected(block);
      } else {
        this.studioState_.selection = [block];
      }
    }
  }, {
    key: 'dirtyCheck_',
    value: function dirtyCheck_() {
      if (this.studioState_.dirty && !window.confirm('You\'ve made changes but haven\'t saved. Are you sure you want to continue?')) {
        return true;
      }

      return false;
    }

    /**
     * Handles creating a new file
     */

  }, {
    key: 'onNewFile',
    value: function onNewFile() {
      if (this.dirtyCheck_()) {
        return;
      }

      ga('send', 'event', 'file', 'newFile');
      this.studioState_.new();
    }

    /**
     * Handles opening a file using a file open dialog
     */

  }, {
    key: 'onOpenFile',
    value: function onOpenFile(fileInfo) {
      if (this.dirtyCheck_()) {
        return;
      }

      ga('send', 'event', 'file', 'openFile');
      var jsonObj = JSON.parse(fileInfo.textContent);
      this.studioState_.load({
        artwork: new _model.Artwork(jsonObj.artwork),
        animations: jsonObj.animations.map(function (anim) {
          return new _model.Animation(anim);
        })
      });
    }

    /**
     * Handles export to JSON format.
     */

  }, {
    key: 'onSaveFile',
    value: function onSaveFile() {
      ga('send', 'event', 'file', 'saveFile');
      this.studioState_.saveToFile();
    }

    /**
     * Handles importing an SVG as layers.
     */

  }, {
    key: 'onAddLayersFromSVG',
    value: function onAddLayersFromSVG(fileInfo) {
      ga('send', 'event', 'file', 'importSVG.addLayers');
      var artwork = _SvgLoader.SvgLoader.loadArtworkFromSvgString(fileInfo.textContent);
      this.studioState_.addLayers(artwork.layers);
    }

    /**
     * Handles importing an SVG as layers.
     */

  }, {
    key: 'onNewFromSVG',
    value: function onNewFromSVG(fileInfo) {
      if (this.dirtyCheck_()) {
        return;
      }

      ga('send', 'event', 'file', 'importSVG.new');
      var artwork = _SvgLoader.SvgLoader.loadArtworkFromSvgString(fileInfo.textContent);
      this.studioState_.load({ artwork: artwork });
    }

    /**
     * Handles importing a vector drawable from XML.
     */

  }, {
    key: 'onNewFromVD',
    value: function onNewFromVD(fileInfo) {
      if (this.dirtyCheck_()) {
        return;
      }

      ga('send', 'event', 'file', 'importVD.new');
      var artwork = _VectorDrawableLoader.VectorDrawableLoader.loadArtworkFromXmlString(fileInfo.textContent);
      this.studioState_.load({ artwork: artwork });
    }

    /**
     * Handles export to animated vector drawable format.
     */

  }, {
    key: 'onExportAVDs',
    value: function onExportAVDs() {
      ga('send', 'event', 'export', 'exportVectorAnimated');
      this.studioState_.exportAVDs();
    }

    /**
     * Handles export to vector drawable format.
     */

  }, {
    key: 'onExportVectorDrawable',
    value: function onExportVectorDrawable() {
      ga('send', 'event', 'export', 'exportVectorStatic');
      this.studioState_.exportVectorDrawable();
    }

    /**
     * Handles a variety of drag behaviors for timeline blocks, including movement
     * and scaling.
     */

  }, {
    key: 'onTimelineBlockMouseDown',
    value: function onTimelineBlockMouseDown(event, dragBlock, animation, layer) {
      var _this7 = this;

      event.preventDefault(); // prevent html5 dragging
      var $target = $(event.target);

      // some geometry and hit-testing basics
      var animRect = $(event.target).parents('.slt-property').get(0).getBoundingClientRect();
      var xToTime_ = function xToTime_(x) {
        return (x - animRect.left) / animRect.width * animation.duration;
      };
      var downTime = xToTime_(event.clientX);

      // determine the action based on where the user clicked and the modifier keys
      var action = MouseActions.MOVING;
      if ($target.hasClass('slt-timeline-block-edge-end')) {
        action = event.altKey ? MouseActions.SCALING_TOGETHER_END : MouseActions.SCALING_UNIFORM_END;
      } else if ($target.hasClass('slt-timeline-block-edge-start')) {
        action = event.altKey ? MouseActions.SCALING_TOGETHER_START : MouseActions.SCALING_UNIFORM_START;
      }

      // start up a cache of info for each selected block, calculating the left- and right-
      // bounds for each selected block, based on adjacent non-dragging blocks
      var activeAnimBlocksByLayerId = _ModelUtil.ModelUtil.getOrderedAnimationBlocksByLayerIdAndProperty(this.studioState_.activeAnimation);
      var draggingBlocks = dragBlock.selected_ ? this.studioState_.selectedAnimationBlocks : [dragBlock]; // either drag all selected blocks or just the mousedown'd block
      var blockInfos = draggingBlocks.filter(function (block) {
        return block.parent == _this7.studioState_.activeAnimation;
      }).map(function (block) {
        // by default the block is only bound by the animation duration
        var startBound = 0;
        var endBound = block.parent.duration;

        var blockNeighbors = activeAnimBlocksByLayerId[block.layerId][block.propertyName];
        var indexIntoNeighbors = blockNeighbors.indexOf(block);

        // find start time bound
        if (indexIntoNeighbors > 0) {
          for (var i = indexIntoNeighbors - 1; i >= 0; i--) {
            var neighbor = blockNeighbors[i];
            if (!draggingBlocks.includes(neighbor) || action == MouseActions.SCALING_UNIFORM_START) {
              startBound = neighbor.endTime; // only be bound by neighbors not being dragged
              // except when uniformly changing just start time
              break;
            }
          }
        }

        // find end time bound
        if (indexIntoNeighbors < blockNeighbors.length - 1) {
          for (var _i = indexIntoNeighbors + 1; _i < blockNeighbors.length; _i++) {
            var _neighbor = blockNeighbors[_i];
            if (!draggingBlocks.includes(_neighbor) || action == MouseActions.SCALING_UNIFORM_END) {
              endBound = _neighbor.startTime; // only be bound by neighbors not being dragged
              // except when uniformly changing just end time
              break;
            }
          }
        }

        return { block: block, startBound: startBound, endBound: endBound,
          downStartTime: block.startTime,
          downEndTime: block.endTime };
      });

      var dragBlockDownStartTime = dragBlock.startTime;
      var dragBlockDownEndTime = dragBlock.endTime;

      var minStartTime = void 0,
          maxEndTime = void 0;
      if (action == MouseActions.SCALING_TOGETHER_END || action == MouseActions.SCALING_TOGETHER_START) {
        minStartTime = blockInfos.reduce(function (t, info) {
          return Math.min(t, info.block.startTime);
        }, Infinity);
        maxEndTime = blockInfos.reduce(function (t, info) {
          return Math.max(t, info.block.endTime);
        }, 0);
        maxEndTime = Math.max(maxEndTime, minStartTime + 10); // avoid divide by zero
      }

      // set up drag handlers
      var dragHelper = new _DragHelper.DragHelper({
        downEvent: event,
        direction: 'horizontal',
        draggingCursor: action == MouseActions.MOVING ? 'grabbing' : 'ew-resize',

        onBeginDrag: function onBeginDrag(event) {
          return _this7.scope_.$apply(function () {
            _this7.suppressClick_ = true;
            _this7.suppressRebuildSnapTimes_ = true;
          });
        },
        onDrop: function onDrop(event) {
          return _this7.timeout_(function () {
            _this7.suppressClick_ = false;
            _this7.suppressRebuildSnapTimes_ = false;
            _this7.rebuildSnapTimes_();
          }, 0);
        },

        onDrag: function onDrag(event) {
          return _this7.scope_.$apply(function () {
            var timeDelta = Math.round(xToTime_(event.clientX) - downTime);
            var allowSnap = !event.altKey;

            switch (action) {
              case MouseActions.MOVING:
                {
                  blockInfos.forEach(function (info) {
                    // snap timedelta
                    if (allowSnap && info.block == dragBlock) {
                      var newStartTime = info.downStartTime + timeDelta;
                      var newStartTimeSnapDelta = _this7.snapTime_(animation, newStartTime) - newStartTime;
                      var newEndTime = info.downEndTime + timeDelta;
                      var newEndTimeSnapDelta = _this7.snapTime_(animation, newEndTime) - newEndTime;
                      if (newStartTimeSnapDelta) {
                        if (newEndTimeSnapDelta) {
                          timeDelta += Math.min(newStartTimeSnapDelta, newEndTimeSnapDelta);
                        } else {
                          timeDelta += newStartTimeSnapDelta;
                        }
                      } else if (newEndTimeSnapDelta) {
                        timeDelta += newEndTimeSnapDelta;
                      }
                    }
                    // constrain timeDelta
                    timeDelta = Math.min(timeDelta, info.endBound - info.downEndTime);
                    timeDelta = Math.max(timeDelta, info.startBound - info.downStartTime);
                  });
                  blockInfos.forEach(function (info) {
                    var blockDuration = info.block.endTime - info.block.startTime;
                    info.block.startTime = info.downStartTime + timeDelta;
                    info.block.endTime = info.block.startTime + blockDuration;
                  });
                  break;
                }

              case MouseActions.SCALING_UNIFORM_START:
                {
                  blockInfos.forEach(function (info) {
                    // snap timedelta
                    if (allowSnap && info.block == dragBlock) {
                      var newStartTime = info.downStartTime + timeDelta;
                      var newStartTimeSnapDelta = _this7.snapTime_(animation, newStartTime) - newStartTime;
                      if (newStartTimeSnapDelta) {
                        timeDelta += newStartTimeSnapDelta;
                      }
                    }
                    // constrain timeDelta
                    timeDelta = Math.min(timeDelta, info.block.endTime - MIN_BLOCK_DURATION - info.downStartTime);
                    timeDelta = Math.max(timeDelta, info.startBound - info.downStartTime);
                  });
                  blockInfos.forEach(function (info) {
                    return info.block.startTime = info.downStartTime + timeDelta;
                  });
                  break;
                }

              case MouseActions.SCALING_UNIFORM_END:
                {
                  blockInfos.forEach(function (info) {
                    // snap timedelta
                    if (allowSnap && info.block == dragBlock) {
                      var newEndTime = info.downEndTime + timeDelta;
                      var newEndTimeSnapDelta = _this7.snapTime_(animation, newEndTime) - newEndTime;
                      if (newEndTimeSnapDelta) {
                        timeDelta += newEndTimeSnapDelta;
                      }
                    }
                    // constrain timeDelta
                    timeDelta = Math.min(timeDelta, info.endBound - info.downEndTime);
                    timeDelta = Math.max(timeDelta, info.block.startTime + MIN_BLOCK_DURATION - info.downEndTime);
                  });
                  blockInfos.forEach(function (info) {
                    return info.block.endTime = info.downEndTime + timeDelta;
                  });
                  break;
                }

              case MouseActions.SCALING_TOGETHER_START:
                {
                  var scale = (dragBlockDownStartTime + timeDelta - maxEndTime) / (dragBlockDownStartTime - maxEndTime);
                  scale = Math.min(scale, maxEndTime / (maxEndTime - minStartTime));
                  var cancel = false;
                  blockInfos.forEach(function (info) {
                    info.newStartTime = maxEndTime - (maxEndTime - info.downStartTime) * scale;
                    info.newEndTime = Math.max(maxEndTime - (maxEndTime - info.downEndTime) * scale, info.newStartTime + MIN_BLOCK_DURATION);
                    if (info.newStartTime < info.startBound || info.newEndTime > info.endBound) {
                      cancel = true;
                    }
                  });
                  if (!cancel) {
                    blockInfos.forEach(function (info) {
                      info.block.startTime = info.newStartTime;
                      info.block.endTime = info.newEndTime;
                    });
                  }
                  break;
                }

              case MouseActions.SCALING_TOGETHER_END:
                {
                  var _scale = (dragBlockDownEndTime + timeDelta - minStartTime) / (dragBlockDownEndTime - minStartTime);
                  _scale = Math.min(_scale, (animation.duration - minStartTime) / (maxEndTime - minStartTime));
                  var _cancel = false;
                  blockInfos.forEach(function (info) {
                    info.newStartTime = minStartTime + (info.downStartTime - minStartTime) * _scale;
                    info.newEndTime = Math.max(minStartTime + (info.downEndTime - minStartTime) * _scale, info.newStartTime + MIN_BLOCK_DURATION);
                    if (info.newStartTime < info.startBound || info.newEndTime > info.endBound) {
                      _cancel = true;
                    }
                  });
                  if (!_cancel) {
                    blockInfos.forEach(function (info) {
                      info.block.startTime = info.newStartTime;
                      info.block.endTime = info.newEndTime;
                    });
                  }
                  break;
                }
            }

            _this7.studioState_.animChanged();
          });
        }
      });
    }

    /**
     * Handles drag and drop for layers, allowing re-ordering and re-parenting layers in
     * the artwork.
     */

  }, {
    key: 'onLayerMouseDown',
    value: function onLayerMouseDown(event, dragLayer) {
      var _this8 = this;

      var $layersList = $(event.target).parents('.slt-layers-list');
      var $scroller = $(event.target).parents('.slt-layers-list-scroller');

      var orderedLayerInfos = [];
      var $dragIndicator = void 0;
      var scrollerRect = void 0;

      var targetLayerInfo = null;
      var targetEdge = void 0;

      var EDGES = { top: true, bottom: true };

      var dragHelper = new _DragHelper.DragHelper({
        downEvent: event,
        direction: 'both',

        onBeginDrag: function onBeginDrag() {
          _this8.suppressClick_ = true;

          // build up a list of all layers ordered by Y position
          orderedLayerInfos = [];
          scrollerRect = $scroller.get(0).getBoundingClientRect();
          var scrollTop = $scroller.scrollTop();
          $layersList.find('.slt-layer-container').each(function (i, element) {
            if (!$(element).data('layer-id')) {
              // the artwork root layer doesn't have an ID set
              return;
            }

            var rect = element.getBoundingClientRect();
            rect = {
              left: rect.left,
              top: rect.top + scrollTop - scrollerRect.top,
              bottom: rect.bottom + scrollTop - scrollerRect.top
            };

            var layer = _this8.studioState_.artwork.findLayerById($(element).data('layer-id'));
            orderedLayerInfos.push({
              layer: layer,
              element: element,
              localRect: rect
            });

            // add a fake target for empty groups
            if (layer instanceof _model.LayerGroup && !layer.layers.length) {
              rect = Object.assign({}, rect, { left: rect.left + LAYER_INDENT, top: rect.bottom });
              orderedLayerInfos.push({
                layer: layer,
                element: element,
                localRect: rect,
                moveIntoEmptyLayerGroup: true
              });
            }
          });

          orderedLayerInfos.sort(function (a, b) {
            return a.localRect.top - b.localRect.top;
          });

          $dragIndicator = $('<div>').addClass('slt-layers-list-drag-indicator').appendTo($scroller);
        },

        onDrag: function onDrag(event) {
          var localEventY = event.clientY - scrollerRect.top + $scroller.scrollTop();

          // find the target layer and edge (top or bottom)
          targetLayerInfo = null;
          var minDistance = Infinity;
          var minDistanceIndent = Infinity; // tie break to most indented layer
          for (var i = 0; i < orderedLayerInfos.length; i++) {
            var layerInfo = orderedLayerInfos[i];

            // skip if mouse to the left of this layer
            if (event.clientX < layerInfo.localRect.left) {
              continue;
            }

            for (var edge in EDGES) {
              // test distance to top edge
              var distance = Math.abs(localEventY - layerInfo.localRect[edge]);
              var indent = layerInfo.localRect.left;
              if (distance <= minDistance) {
                if (distance != minDistance || indent > minDistanceIndent) {
                  minDistance = distance;
                  minDistanceIndent = indent;
                  targetLayerInfo = layerInfo;
                  targetEdge = edge;
                }
              }
            }
          }

          // disallow dragging a layer into itself or its children
          if (targetLayerInfo) {
            var layer = targetLayerInfo.layer;
            while (layer) {
              if (layer == dragLayer) {
                targetLayerInfo = null;
                break;
              }

              layer = layer.parent;
            }
          }

          if (targetLayerInfo && targetEdge == 'bottom' && targetLayerInfo.layer.nextSibling == dragLayer) {
            targetLayerInfo = null;
          }

          if (targetLayerInfo) {
            $dragIndicator.css('left', targetLayerInfo.localRect.left);
            $dragIndicator.css('top', targetLayerInfo.localRect[targetEdge]);
          }

          $dragIndicator.toggle(!!targetLayerInfo);
        },

        onDrop: function onDrop(event) {
          if ($dragIndicator) {
            $dragIndicator.remove();
          }

          if (targetLayerInfo) {
            _this8.scope_.$apply(function () {
              if (targetLayerInfo.moveIntoEmptyLayerGroup) {
                // moving into an empty layer group
                var newParent = targetLayerInfo.layer;
                dragLayer.remove();
                newParent.layers.push(dragLayer);
                dragLayer.parent = newParent;
              } else {
                // moving next to another layer
                var _newParent = targetLayerInfo.layer.parent;
                if (_newParent) {
                  dragLayer.remove();
                  var index = _newParent.layers.indexOf(targetLayerInfo.layer);
                  if (index >= 0) {
                    index += targetEdge == 'top' ? 0 : 1;
                    _newParent.layers.splice(index, 0, dragLayer);
                    dragLayer.parent = _newParent;
                  }
                }
              }

              _this8.studioState_.artworkChanged();
            });
          }

          _this8.timeout_(function () {
            return _this8.suppressClick_ = false;
          }, 0);
        }
      });
    }
  }, {
    key: 'horizZoom',
    get: function get() {
      return this.horizZoom_;
    },
    set: function set(val) {
      this.horizZoom_ = _MathUtil.MathUtil.constrain(val, MIN_ZOOM, MAX_ZOOM);
    }
  }, {
    key: 'artwork',
    get: function get() {
      return this.studioState_.artwork;
    }
  }, {
    key: 'activeTime',
    get: function get() {
      return this.studioState_.activeTime;
    }
  }, {
    key: 'animations',
    get: function get() {
      return this.studioState_.animations;
    }
  }, {
    key: 'activeAnimation',
    get: function get() {
      return this.studioState_.activeAnimation;
    }
  }]);

  return LayerTimelineController;
}();

angular.module('AVDStudio').directive('studioLayerTimeline', function () {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'components/layertimeline/layertimeline.html',
    replace: true,
    bindToController: true,
    controller: LayerTimelineController,
    controllerAs: 'ctrl'
  };
});

// timeline grid

},{"./consts":5,"DragHelper":16,"MathUtil":18,"ModelUtil":19,"SvgLoader":21,"UiUtil":23,"VectorDrawableLoader":24,"model":35}],7:[function(require,module,exports){
'use strict';

var _MathUtil = require('MathUtil');

var _DragHelper = require('DragHelper');

var _consts = require('./consts');

var GRID_INTERVALS_MS = [10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000, 30000, 60000]; /*
                                                                                             * Copyright 2016 Google Inc.
                                                                                             *
                                                                                             * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                             * you may not use this file except in compliance with the License.
                                                                                             * You may obtain a copy of the License at
                                                                                             *
                                                                                             *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                             *
                                                                                             * Unless required by applicable law or agreed to in writing, software
                                                                                             * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                             * See the License for the specific language governing permissions and
                                                                                             * limitations under the License.
                                                                                             */

angular.module('AVDStudio').directive('studioTimelineGrid', function () {
  return {
    restrict: 'E',
    scope: {
      isActive: '=',
      activeTime: '=',
      animation: '=',
      onScrub: '&'
    },
    template: '<canvas></canvas>',
    replace: true,
    require: '^studioLayerTimeline',
    link: function link(scope, element, attrs, layerTimelineCtrl) {
      var $canvas = element;
      var canvas = $canvas.get(0);

      var isHeader = 'isHeader' in attrs;

      scope.$watch(function () {
        return scope.redraw_();
      });

      if ('onScrub' in attrs) {
        var handleScrubEvent_ = function handleScrubEvent_(event) {
          var x = event.clientX;
          x -= $canvas.offset().left;
          var time = (x - _consts.TimelineConsts.TIMELINE_ANIMATION_PADDING) / ($canvas.width() - _consts.TimelineConsts.TIMELINE_ANIMATION_PADDING * 2) * scope.animation.duration;
          time = _MathUtil.MathUtil.constrain(time, 0, scope.animation.duration);
          scope.onScrub({
            animation: scope.animation,
            time: time,
            options: { disableSnap: !!event.altKey }
          });
        };

        $canvas.on('mousedown', function (event) {
          return scope.$apply(function () {
            handleScrubEvent_(event);
            new _DragHelper.DragHelper({
              downEvent: event,
              direction: 'horizontal',
              skipSlopCheck: true,
              onDrag: function onDrag(event) {
                return scope.$apply(function () {
                  return handleScrubEvent_(event);
                });
              }
            });
            event.preventDefault();
            return false;
          });
        });
      }

      scope.redraw_ = function () {
        if (!$canvas.is(':visible')) {
          return;
        }

        var width = $canvas.width();
        var height = $canvas.height();
        var horizZoom = layerTimelineCtrl.horizZoom;
        $canvas.attr('width', width * window.devicePixelRatio);
        $canvas.attr('height', isHeader ? height * window.devicePixelRatio : 1);

        var ctx = canvas.getContext('2d');
        ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        ctx.translate(_consts.TimelineConsts.TIMELINE_ANIMATION_PADDING, 0);

        // compute grid spacing (40 = minimum grid spacing in pixels)
        var interval = 0;
        var spacingMs = GRID_INTERVALS_MS[interval];
        while (spacingMs * horizZoom < 40 || interval >= GRID_INTERVALS_MS.length) {
          ++interval;
          spacingMs = GRID_INTERVALS_MS[interval];
        }

        var spacingPx = spacingMs * horizZoom;

        if (isHeader) {
          // text labels
          ctx.fillStyle = 'rgba(0,0,0,0.4)';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.font = '10px Roboto';
          for (var x = 0, t = 0; x <= width; x += spacingPx, t += spacingMs) {
            //ctx.fillRect(x - 0.5, 0, 1, height);
            ctx.fillText(t / 1000 + 's', x, height / 2);
          }

          if (scope.isActive) {
            ctx.fillStyle = 'rgba(244, 67, 54, .7)';
            ctx.beginPath();
            ctx.arc(scope.activeTime * horizZoom, height / 2, 4, 0, 2 * Math.PI, false);
            ctx.fill();
            ctx.closePath();
            ctx.fillRect(scope.activeTime * horizZoom - 1, height / 2 + 4, 2, height);
          }
        } else {
          // grid lines
          ctx.fillStyle = 'rgba(0,0,0,0.1)';
          for (var _x = spacingPx; _x < width - _consts.TimelineConsts.TIMELINE_ANIMATION_PADDING * 2; _x += spacingPx) {
            ctx.fillRect(_x - 0.5, 0, 1, 1);
          }

          if (scope.isActive) {
            ctx.fillStyle = 'rgba(244, 67, 54, .7)';
            ctx.fillRect(scope.activeTime * horizZoom - 1, 0, 2, 1);
          }
        }
      };

      scope.redraw_();
    }
  };
});

},{"./consts":5,"DragHelper":16,"MathUtil":18}],8:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

var _model = require('model');

var _properties = require('model/properties');

var _ColorUtil = require('ColorUtil');

var _ModelUtil = require('ModelUtil');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PropertyInspectorController = function () {
  function PropertyInspectorController($scope, $element, StudioStateService) {
    var _this = this;

    _classCallCheck(this, PropertyInspectorController);

    this.scope_ = $scope;
    this.element_ = $element;

    this.studioState_ = StudioStateService;
    this.studioState_.onChange(function (event, changes) {
      if (changes.selection) {
        _this.rebuildSelection_();
      }
    }, $scope);

    this.rebuildSelection_();
  }

  _createClass(PropertyInspectorController, [{
    key: 'rebuildSelection_',
    value: function rebuildSelection_() {
      this.selectionInfo = null;
      if (this.studioState_.selectedLayers.length) {
        this.rebuildLayersSelection_();
      } else if (this.studioState_.selectedAnimationBlocks.length) {
        this.rebuildAnimationBlocksSelection_();
      } else if (this.studioState_.firstSelectedItem instanceof _model.Animation) {
        this.rebuildAnimationsSelection_();
      }
    }
  }, {
    key: 'androidToCssColor',
    value: function androidToCssColor(val) {
      return _ColorUtil.ColorUtil.androidToCssColor(val);
    }
  }, {
    key: 'computeSharedPropertyNames_',
    value: function computeSharedPropertyNames_(items) {
      if (!items || !items.length) {
        return [];
      }

      var shared = void 0;
      items.forEach(function (item) {
        var names = Object.keys(item.inspectableProperties);
        if (!shared) {
          shared = names;
        } else {
          var namesSet = new Set(names);
          shared = shared.filter(function (n) {
            return namesSet.has(n);
          });
        }
      });

      return shared;
    }
  }, {
    key: 'rebuildLayersSelection_',
    value: function rebuildLayersSelection_() {
      var _this2 = this;

      this.selectionInfo = {
        type: 'layers',
        inspectedProperties: []
      };

      if (this.studioState_.selection.length > 1) {
        // batch layer editing
        var count = this.studioState_.selection.length;
        this.selectionInfo.multiple = true;
        this.selectionInfo.icon = 'collection';
        this.selectionInfo.description = count + ' layers';

        var layers = this.studioState_.selection;
        var sharedPropertyNames = this.computeSharedPropertyNames_(layers);
        sharedPropertyNames.forEach(function (propertyName) {
          var property = layers[0].inspectableProperties[propertyName];
          if (property instanceof _properties.IdProperty) {
            return;
          }

          _this2.selectionInfo.inspectedProperties.push(new InspectedProperty({
            get value() {
              return layers.reduce(function (v, layer) {
                return v == layer[propertyName] ? v : null;
              }, layers[0][propertyName]);
            },
            set value(val) {
              layers.forEach(function (layer) {
                return layer[propertyName] = val;
              });
            },
            propertyName: propertyName,
            property: property,
            onChange: function onChange() {
              _this2.studioState_.animChanged();
              _this2.studioState_.artworkChanged();
            }
          }));
        });
      } else {
        // edit a single layer
        var layer = this.studioState_.firstSelectedItem;
        this.selectionInfo.icon = layer.typeIcon;
        Object.defineProperty(this.selectionInfo, 'description', {
          get: function get() {
            return layer.id;
          }
        });
        Object.keys(layer.inspectableProperties).forEach(function (propertyName) {
          var self = _this2;
          var property = layer.inspectableProperties[propertyName];
          _this2.selectionInfo.inspectedProperties.push(new InspectedProperty({
            object: layer,
            propertyName: propertyName,
            property: property,
            get value() {
              if (!self.studioState_.animationRenderer || layer === self.studioState_.artwork) {
                return layer[propertyName];
              }

              var renderedLayer = self.studioState_.animationRenderer.renderedArtwork.findLayerById(layer.id);
              return renderedLayer ? renderedLayer[propertyName] : null;
            },
            set value(value) {
              if (property instanceof _properties.IdProperty) {
                self.studioState_.updateLayerId(layer, value);
              } else {
                layer[propertyName] = value;
                self.studioState_.artworkChanged();
              }
            },
            transformEditedValue: property instanceof _properties.IdProperty ? function (enteredValue) {
              return _this2.studioState_.getUniqueLayerId(_properties.IdProperty.sanitize(enteredValue), layer);
            } : null,
            get editable() {
              return self.studioState_.animationRenderer ? !self.studioState_.animationRenderer.getLayerPropertyState(layer.id, propertyName).activeBlock : true;
            }
          }));
        });
      }
    }
  }, {
    key: 'rebuildAnimationBlocksSelection_',
    value: function rebuildAnimationBlocksSelection_() {
      var _this3 = this;

      this.selectionInfo = {
        type: 'animationBlocks',
        inspectedProperties: []
      };

      if (this.studioState_.selection.length > 1) {
        // batch animation block editing
        var count = this.studioState_.selection.length;
        this.selectionInfo.multiple = true;
        this.selectionInfo.icon = 'collection';
        this.selectionInfo.description = count + ' property animations';

        var blocks = this.studioState_.selection;
        var sharedPropertyNames = this.computeSharedPropertyNames_(blocks);
        sharedPropertyNames.forEach(function (propertyName) {
          var property = blocks[0].inspectableProperties[propertyName];
          if (property instanceof _properties.StubProperty) {
            // fromValue and toValue only work when they're animating compatible property types
            var properties = blocks.map(function (block) {
              return _this3.studioState_.artwork.findLayerById(block.layerId).inspectableProperties[block.propertyName];
            });
            var propertiesCompatible = properties.reduce(function (c, prop) {
              return c && prop.constructor === properties[0].constructor;
            }, true);
            if (!propertiesCompatible) {
              return;
            }
            property = properties[0];
          }
          _this3.selectionInfo.inspectedProperties.push(new InspectedProperty({
            get value() {
              return blocks.reduce(function (v, block) {
                return v == block[propertyName] ? v : null;
              }, blocks[0][propertyName]);
            },
            set value(val) {
              blocks.forEach(function (block) {
                return block[propertyName] = val;
              });
            },
            propertyName: propertyName,
            property: property,
            onChange: function onChange() {
              return _this3.studioState_.animChanged();
            }
          }));
        });
      } else {
        // edit a single animation block
        var block = this.studioState_.firstSelectedItem;
        this.selectionInfo.icon = 'animation_block';
        this.selectionInfo.description = '' + block.propertyName;
        this.selectionInfo.subDescription = 'for \'' + block.layerId + '\'';
        Object.keys(block.inspectableProperties).forEach(function (propertyName) {
          var property = block.inspectableProperties[propertyName];
          if (property instanceof _properties.StubProperty) {
            property = _this3.studioState_.artwork.findLayerById(block.layerId).inspectableProperties[block.propertyName];
          }
          _this3.selectionInfo.inspectedProperties.push(new InspectedProperty({
            object: block,
            propertyName: propertyName,
            property: property,
            onChange: function onChange() {
              return _this3.studioState_.animChanged();
            }
          }));
        });
      }
    }
  }, {
    key: 'rebuildAnimationsSelection_',
    value: function rebuildAnimationsSelection_() {
      var _this4 = this;

      this.selectionInfo = {
        type: 'animations',
        inspectedProperties: []
      };

      if (this.studioState_.selection.length > 1) {
        // batch animation editing
        var count = this.studioState_.selection.length;
        this.selectionInfo.multiple = true;
        this.selectionInfo.icon = 'collection';
        this.selectionInfo.description = count + ' animations';
        // TODO
      } else {
        // edit a single animation
        var animation = this.studioState_.firstSelectedItem;
        this.selectionInfo.icon = 'animation';
        Object.defineProperty(this.selectionInfo, 'description', {
          get: function get() {
            return animation.id;
          }
        });
        Object.keys(animation.inspectableProperties).forEach(function (propertyName) {
          var property = animation.inspectableProperties[propertyName];
          _this4.selectionInfo.inspectedProperties.push(new InspectedProperty({
            object: animation,
            propertyName: propertyName,
            transformEditedValue: property instanceof _properties.IdProperty ? function (enteredValue) {
              return _this4.studioState_.getUniqueAnimationId(_properties.IdProperty.sanitize(enteredValue), animation);
            } : null,
            property: property,
            onChange: function onChange() {
              return _this4.studioState_.animChanged();
            }
          }));
        });
      }
    }
  }, {
    key: 'onValueEditorKeyDown',
    value: function onValueEditorKeyDown(event, inspectedProperty) {
      switch (event.keyCode) {
        // up/down buttons
        case 38:
        case 40:
          inspectedProperty.resolveEnteredValue();
          var $target = $(event.target);
          var numberValue = Number($target.val());
          if (!isNaN(numberValue)) {
            var delta = event.keyCode == 38 ? 1 : -1;

            if (inspectedProperty.property instanceof _properties.FractionProperty) {
              delta *= .1;
            }

            if (event.shiftKey) {
              delta *= 10;
            } else if (event.altKey) {
              delta /= 10;
            }

            numberValue += delta;
            inspectedProperty.property.trySetEditedValue(inspectedProperty, 'value', Number(numberValue.toFixed(6)));
            setTimeout(function () {
              return $target.get(0).select();
            }, 0);
            return true;
          }
          break;
      }
    }
  }, {
    key: 'selectionDescription',
    get: function get() {
      return this.selectionInfo && this.selectionInfo.description;
    }
  }]);

  return PropertyInspectorController;
}();

var InspectedProperty = function () {
  function InspectedProperty(delegate) {
    _classCallCheck(this, InspectedProperty);

    this.delegate = delegate;
    this.object = delegate.object;
    this.propertyName = delegate.propertyName;
    this.property = delegate.property;
    this.enteredValue_ = null;
  }

  _createClass(InspectedProperty, [{
    key: 'resolveEnteredValue',
    value: function resolveEnteredValue() {
      this.enteredValue_ = null;
    }
  }, {
    key: 'value',
    get: function get() {
      return 'value' in this.delegate ? this.delegate.value : this.object[this.propertyName];
    },
    set: function set(value) {
      'value' in this.delegate ? this.delegate.value = value : this.object[this.propertyName] = value;
      if (this.delegate.onChange) {
        this.delegate.onChange();
      }
    }
  }, {
    key: 'typeName',
    get: function get() {
      return this.property.constructor.name;
    }
  }, {
    key: 'editable',
    get: function get() {
      return 'editable' in this.delegate ? this.delegate.editable : true;
    }
  }, {
    key: 'displayValue',
    get: function get() {
      return this.property.displayValueForValue(this.value);
    }
  }, {
    key: 'editableValue',
    get: function get() {
      return this.enteredValue_ !== null ? this.enteredValue_ : this.property.getEditableValue(this, 'value');
    },
    set: function set(enteredValue) {
      this.enteredValue_ = enteredValue;
      if (this.delegate.transformEditedValue) {
        enteredValue = this.delegate.transformEditedValue(enteredValue);
      }
      this.property.trySetEditedValue(this, 'value', enteredValue);
    }
  }]);

  return InspectedProperty;
}();

angular.module('AVDStudio').directive('studioPropertyInspector', function () {
  return {
    restrict: 'E',
    scope: {},
    templateUrl: 'components/propertyinspector/propertyinspector.html',
    replace: true,
    bindToController: true,
    controller: PropertyInspectorController,
    controllerAs: 'ctrl'
  };
});

// timeline grid

},{"ColorUtil":15,"ModelUtil":19,"model":35,"model/properties":44}],9:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var groups = {};

var ScrollGroupController = function ScrollGroupController($scope, $element, $attrs) {
  _classCallCheck(this, ScrollGroupController);

  var scrollGroup = $attrs.scrollGroup || '';
  groups[scrollGroup] = groups[scrollGroup] || [];
  groups[scrollGroup].push($element);

  $element.on('scroll', function () {
    var scrollTop = $element.scrollTop();
    groups[scrollGroup].forEach(function (el) {
      return el !== $element ? el.scrollTop(scrollTop) : null;
    });
  });

  $scope.$on('$destroy', function () {
    groups[scrollGroup].splice(groups[scrollGroup].indexOf($element), 1);
  });
};

angular.module('AVDStudio').directive('scrollGroup', function () {
  return {
    restrict: 'A',
    controller: ScrollGroupController
  };
});

},{}],10:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _DragHelper = require('DragHelper');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SplitterController = function () {
  function SplitterController($scope, $element, $attrs) {
    var _this = this;

    _classCallCheck(this, SplitterController);

    this.edge_ = $attrs.edge;
    this.min_ = Number($attrs.min) || 100;
    this.persistKey_ = $attrs.persistId ? '$$splitter::' + $attrs.persistId : null;
    this.orientation_ = this.edge_ == 'left' || this.edge_ == 'right' ? 'vertical' : 'horizontal';
    this.element_ = $element;
    this.parent_ = $element.parent();
    this.dragging_ = false;

    if (this.orientation_ == 'vertical') {
      this.sizeGetter_ = function () {
        return _this.parent_.width();
      };
      this.sizeSetter_ = function (size) {
        return _this.parent_.width(size);
      };
      this.clientXY_ = 'clientX';
    } else {
      this.sizeGetter_ = function () {
        return _this.parent_.height();
      };
      this.sizeSetter_ = function (size) {
        return _this.parent_.height(size);
      };
      this.clientXY_ = 'clientY';
    }

    this.addClasses_();
    this.setupEventListeners_();
    this.deserializeState_();
  }

  _createClass(SplitterController, [{
    key: 'deserializeState_',
    value: function deserializeState_() {
      if (this.persistKey_ in localStorage) {
        this.setSize_(Number(localStorage[this.persistKey_]));
      }
    }
  }, {
    key: 'addClasses_',
    value: function addClasses_() {
      this.element_.addClass('splt-' + this.orientation_).addClass('splt-edge-' + this.edge_);
    }
  }, {
    key: 'setupEventListeners_',
    value: function setupEventListeners_() {
      var _this2 = this;

      this.element_.on('mousedown', function (event) {
        _this2.downXY_ = event[_this2.clientXY_];
        _this2.downSize_ = _this2.sizeGetter_();
        event.preventDefault();

        new _DragHelper.DragHelper({
          downEvent: event,
          direction: _this2.orientation_ == 'vertical' ? 'horizontal' : 'vertical',
          draggingCursor: _this2.orientation_ == 'vertical' ? 'col-resize' : 'row-resize',

          onBeginDrag: function onBeginDrag(event) {
            return _this2.element_.addClass('is-dragging');
          },
          onDrop: function onDrop(event) {
            return _this2.element_.removeClass('is-dragging');
          },
          onDrag: function onDrag(event, delta) {
            var sign = _this2.edge_ == 'left' || _this2.edge_ == 'top' ? -1 : 1;
            _this2.setSize_(Math.max(_this2.min_, _this2.downSize_ + sign * delta[_this2.orientation_ == 'vertical' ? 'x' : 'y']));
          }
        });
      });
    }
  }, {
    key: 'setSize_',
    value: function setSize_(size) {
      if (this.persistKey_) {
        localStorage[this.persistKey_] = size;
      }
      this.sizeSetter_(size);
    }
  }]);

  return SplitterController;
}();

angular.module('AVDStudio').directive('studioSplitter', function () {
  return {
    restrict: 'E',
    scope: {},
    template: '<div class="studio-splitter"></div>',
    replace: true,
    bindToController: true,
    controller: SplitterController,
    controllerAs: 'ctrl'
  };
});

},{"DragHelper":16}],11:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _model = require('model');

var _MathUtil = require('MathUtil');

var _ColorUtil = require('ColorUtil');

var _SvgLoader = require('SvgLoader');

var _VectorDrawableLoader = require('VectorDrawableLoader');

var _AvdSerializer = require('AvdSerializer');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//import TEST_DATA from '../../../_sandbox/debug.iconanim.json';


var PLAYBACK_SPEEDS = [.1, .25, .5, 1, 2, 3, 4, 8, 10];

var DEBUG = !!window.location.search.match(/debug/);

var StudioCtrl = function () {
  function StudioCtrl($scope, $http, $mdToast, $mdDialog, $timeout, StudioStateService) {
    _classCallCheck(this, StudioCtrl);

    this.versionInfo = window.APP_VERSION_INFO;

    this.scope_ = $scope;
    this.http_ = $http;
    this.mdToast_ = $mdToast;
    this.mdDialog_ = $mdDialog;
    this.timeout_ = $timeout;
    this.studioState_ = StudioStateService;

    this.previewMode = false;
    this.isLoaded = false;

    this.setupKeyboardAndUnloadEvents_();
    this.setupClipboardEvents_();

    this.loadInitialArtwork_();
  }

  _createClass(StudioCtrl, [{
    key: 'showError_',
    value: function showError_(message, error) {
      this.mdToast_.show(this.mdToast_.simple().textContent(message).hideDelay(3000));
      console.error(error);
    }
  }, {
    key: 'loadInitialArtwork_',
    value: function loadInitialArtwork_() {
      var _this = this;

      var exampleMatch = window.location.search.match(/(?:example|fileUrl)=(.+)/);
      if (exampleMatch) {
        // Load example
        this.http_({
          url: decodeURIComponent(exampleMatch[1])
        }).then(function (response) {
          try {
            _this.studioState_.load({
              artwork: new _model.Artwork(response.data.artwork),
              animations: response.data.animations.map(function (anim) {
                return new _model.Animation(anim);
              })
            });
          } catch (e) {
            _this.showError_('Error parsing example artwork', e);
            _this.studioState_.new();
          }
          _this.isLoaded = true;
        }, function (error) {
          _this.showError_('Error loading example artwork', error);
          _this.studioState_.new();
          _this.isLoaded = true;
        });
      } else {
        // load empty artwork
        this.studioState_.new();
        this.isLoaded = true;
      }
    }
  }, {
    key: 'setupClipboardEvents_',
    value: function setupClipboardEvents_() {
      var _this2 = this;

      var cutCopyHandler_ = function cutCopyHandler_(event, shouldCut) {
        if (document.activeElement.matches('input')) {
          return true;
        }

        var selectedLayers = _this2.studioState_.selectedLayers;
        if (!selectedLayers) {
          return false;
        }

        var clipboardData = event.originalEvent.clipboardData;
        clipboardData.setData('text/plain', JSON.stringify({
          clipboardType: 'layers',
          layers: selectedLayers.filter(function (l) {
            return !(l instanceof _model.Artwork);
          }).map(function (l) {
            return l.toJSON();
          })
        }, null, 2));

        if (shouldCut) {
          _this2.deleteSelectedLayers_();
        }

        return false;
      };

      var cutHandler_ = function cutHandler_(event) {
        return cutCopyHandler_(event, true);
      };
      var copyHandler_ = function copyHandler_(event) {
        return cutCopyHandler_(event, false);
      };

      var pasteHandler_ = function pasteHandler_(event) {
        if (document.activeElement.matches('input')) {
          return true;
        }

        var targetParent = _this2.studioState_.artwork;
        var firstSelectedItem = _this2.studioState_.firstSelectedItem;
        if (firstSelectedItem && firstSelectedItem instanceof _model.LayerGroup) {
          targetParent = firstSelectedItem;
        }

        var clipboardData = event.originalEvent.clipboardData;
        var str = clipboardData.getData('text');

        var pasteLayers = null;

        if (str.match(/<\/svg>\s*$/)) {
          // paste SVG
          ga('send', 'event', 'paste', 'svg');
          var artwork = _SvgLoader.SvgLoader.loadArtworkFromSvgString(str);
          pasteLayers = artwork.layers;
        } else if (str.match(/<\/vector>\s*$/)) {
          // paste VD
          ga('send', 'event', 'paste', 'vd');
          var _artwork = _VectorDrawableLoader.VectorDrawableLoader.loadArtworkFromXmlString(str);
          pasteLayers = _artwork.layers;
        } else if (str.match(/\}\s*$/)) {
          // paste JSON
          var parsed = void 0;
          try {
            parsed = JSON.parse(str);
          } catch (e) {
            console.error('Couldn\'t parse JSON: ' + str);
            return false;
          }

          if (parsed.clipboardType == 'layers') {
            ga('send', 'event', 'paste', 'json.layers');
            pasteLayers = parsed.layers.map(function (l) {
              return _model.BaseLayer.load(l);
            });
          } else {
            ga('send', 'event', 'paste', 'json.unknown');
          }
        }

        if (pasteLayers && pasteLayers.length) {
          var newSelection = [];
          pasteLayers.forEach(function (layer) {
            layer.parent = targetParent;
            layer.walk(function (layer) {
              layer.id = _this2.studioState_.getUniqueLayerId(layer.id, layer);
            });
            targetParent.layers.push(layer);
            newSelection.push(layer);
          });

          _this2.studioState_.selection = newSelection;
          _this2.studioState_.artworkChanged();
          return false;
        }
      };

      var digestedCutHandler_ = function digestedCutHandler_(event) {
        return _this2.scope_.$apply(function () {
          return cutHandler_(event);
        });
      };
      var digestedCopyHandler_ = function digestedCopyHandler_(event) {
        return _this2.scope_.$apply(function () {
          return copyHandler_(event);
        });
      };
      var digestedPasteHandler_ = function digestedPasteHandler_(event) {
        return _this2.scope_.$apply(function () {
          return pasteHandler_(event);
        });
      };

      $(window).on('cut', digestedCutHandler_).on('copy', digestedCopyHandler_).on('paste', digestedPasteHandler_);

      this.scope_.$on('$destroy', function () {
        $(window).off('cut', digestedCutHandler_).off('copy', digestedCopyHandler_).off('paste', digestedPasteHandler_);
      });
    }
  }, {
    key: 'setupKeyboardAndUnloadEvents_',
    value: function setupKeyboardAndUnloadEvents_() {
      var _this3 = this;

      var keydownHandler_ = function keydownHandler_(event) {
        // delete/backspace
        if (document.activeElement.matches('input')) {
          return true;
        }

        if (event.keyCode == 32) {
          // spacebar
          _this3.allowPlayAnimate = true;
          _this3.studioState_.playing = !_this3.studioState_.playing;
          return false;
        } else if (event.keyCode == 8) {
          // delete key
          event.preventDefault(); // in case there's a JS error, never navigate away
          _this3.deleteSelectedLayers_();
          _this3.deleteSelectedAnimationBlocks_();
          _this3.deleteSelectedAnimations_();
          return false;
        } else if (event.keyCode == 27) {
          // escape key
          if (_this3.previewMode) {
            _this3.previewMode = false;
          }
          return false;
        } else if (event.keyCode == "P".charCodeAt(0)) {
          // preview mode (P key)
          _this3.previewMode = !_this3.previewMode;
          return false;
        } else if (event.keyCode == "R".charCodeAt(0)) {
          // rewind (R key)
          _this3.rewind();
          return false;
        } else if (event.metaKey && event.keyCode == "Z".charCodeAt(0)) {
          // undo/redo (Z key)
          event.shiftKey ? _this3.studioState_.tryRedo() : _this3.studioState_.tryUndo();
          return false;
        } else if (event.metaKey && event.keyCode == "G".charCodeAt(0)) {
          // group/ungroup (G key)
          event.shiftKey ? _this3.ungroupSelectedLayers_() : _this3.groupSelectedLayers_();
          return false;
        } else if (event.keyCode == 187 || event.keyCode == 189 || event.keyCode == "0".charCodeAt(0)) {
          // -/+/0 keys to change playback speed
          if (_this3.studioState_.playing) {
            _this3.studioState_.playing = false;
            if (event.keyCode == "0".charCodeAt(0)) {
              _this3.studioState_.playbackSpeed = 1;
            } else {
              var speedUp = !!(event.keyCode == 187);
              var currentIndex = PLAYBACK_SPEEDS.indexOf(_this3.studioState_.playbackSpeed);
              if (currentIndex < 0) {
                _this3.studioState_.playbackSpeed = 1;
              } else {
                _this3.studioState_.playbackSpeed = PLAYBACK_SPEEDS[_MathUtil.MathUtil.constrain(currentIndex + (speedUp ? 1 : -1), 0, PLAYBACK_SPEEDS.length - 1)];
              }
            }
            _this3.studioState_.playing = true;
          }
          return false;
        }
      };

      var digestedKeydownHandler_ = function digestedKeydownHandler_(event) {
        return _this3.scope_.$apply(function () {
          return keydownHandler_(event);
        });
      };

      var beforeUnloadHandler_ = function beforeUnloadHandler_(event) {
        if (_this3.studioState_.dirty && !DEBUG) {
          return 'You\'ve made changes but haven\'t saved. ' + 'Are you sure you want to navigate away?';
        }
      };

      $(window).on('keydown', digestedKeydownHandler_).on('beforeunload', beforeUnloadHandler_);

      this.scope_.$on('$destroy', function () {
        $(window).off('keydown', digestedKeydownHandler_).off('beforeunload', beforeUnloadHandler_);
      });
    }
  }, {
    key: 'isPlaying',
    value: function isPlaying() {
      return this.studioState_.playing;
    }
  }, {
    key: 'togglePlaying',
    value: function togglePlaying() {
      this.allowPlayAnimate = true;
      this.studioState_.playing = !this.studioState_.playing;
    }
  }, {
    key: 'rewind',
    value: function rewind() {
      var _this4 = this;

      this.studioState_.playing = false;
      this.timeout_(function () {
        return _this4.studioState_.activeTime = 0;
      }, 0);
    }
  }, {
    key: 'restartPlayback',
    value: function restartPlayback() {
      this.studioState_.activeTime = 0;
      this.studioState_.playing = true;
    }
  }, {
    key: 'onDropFile',
    value: function onDropFile(fileInfo) {
      var _this5 = this;

      var confirm_ = function confirm_() {
        if (_this5.studioState_.dirty && !DEBUG) {
          if (!window.confirm('You\'ve made changes but haven\'t saved. ' + 'Really load the dropped file?')) {
            return false;
          }
        }

        return true;
      };

      if (fileInfo.type == 'application/json' || fileInfo.name.match(/\.iconanim$/)) {
        ga('send', 'event', 'file', 'openFile.dragDrop');
        if (!confirm_()) {
          return;
        }

        var jsonObj = JSON.parse(fileInfo.textContent);
        this.studioState_.load({
          artwork: new _model.Artwork(jsonObj.artwork),
          animations: jsonObj.animations.map(function (anim) {
            return new _model.Animation(anim);
          })
        });
      } else if (fileInfo.type == 'image/svg+xml') {
        var artwork = _SvgLoader.SvgLoader.loadArtworkFromSvgString(fileInfo.textContent);

        var startFromScratch_ = function startFromScratch_() {
          if (!confirm_()) {
            return;
          }

          ga('send', 'event', 'file', 'importSVG.startFromScratch.dragDrop');
          _this5.studioState_.load({ artwork: artwork });
        };

        if (!this.studioState_.artwork.layers.length) {
          startFromScratch_();
          return;
        }

        this.mdDialog_.show({
          title: 'Attention',
          templateUrl: 'pages/studio/dialog-svg-drop.html',
          clickOutsideToClose: true,
          controller: function controller($scope, $mdDialog) {
            $scope.closeDialog = function () {
              return $mdDialog.hide();
            };

            $scope.startFromScratch = function () {
              startFromScratch_();
              $mdDialog.hide();
            };

            $scope.addLayers = function () {
              ga('send', 'event', 'file', 'importSVG.addLayers.dragDrop');
              _this5.studioState_.addLayers(artwork.layers);
              $mdDialog.hide();
            };
          }
        });
      } else if (fileInfo.type === 'application/xml' || fileInfo.type === 'text/xml') {
        ga('send', 'event', 'file', 'importVD.dragDrop');
        if (!confirm_()) {
          return;
        }
        var _artwork2 = _VectorDrawableLoader.VectorDrawableLoader.loadArtworkFromXmlString(fileInfo.textContent);
        this.studioState_.load({ artwork: _artwork2 });
      }
    }
  }, {
    key: 'deleteSelectedLayers_',
    value: function deleteSelectedLayers_() {
      if (this.studioState_.firstSelectedItem instanceof _model.BaseLayer) {
        // delete layers
        this.studioState_.deleteLayers(this.studioState_.selectedLayers);
        this.studioState_.selection = null;
        this.studioState_.artworkChanged();
        this.studioState_.animChanged();
      }
    }
  }, {
    key: 'deleteSelectedAnimationBlocks_',
    value: function deleteSelectedAnimationBlocks_() {
      if (this.studioState_.firstSelectedItem instanceof _model.AnimationBlock) {
        // delete animations
        var selectedAnimationBlocks = this.studioState_.selectedAnimationBlocks;
        this.studioState_.animations.forEach(function (animation) {
          for (var i = animation.blocks.length - 1; i >= 0; --i) {
            var block = animation.blocks[i];
            if (selectedAnimationBlocks.indexOf(block) >= 0) {
              animation.blocks.splice(i, 1);
            }
          }
        });

        this.studioState_.selection = null;
        this.studioState_.animChanged();
        return false;
      }
    }
  }, {
    key: 'deleteSelectedAnimations_',
    value: function deleteSelectedAnimations_() {
      var _this6 = this;

      if (this.studioState_.firstSelectedItem instanceof _model.Animation) {
        // delete animations
        this.studioState_.activeAnimation = null;
        this.studioState_.animations = this.studioState_.animations.filter(function (animation) {
          return animation !== _this6.studioState_.firstSelectedItem;
        });
        this.studioState_.selection = null;
        this.studioState_.animChanged();
        return false;
      }
    }
  }, {
    key: 'groupOrUngroupSelectedLayers_',
    value: function groupOrUngroupSelectedLayers_(shouldGroup) {
      var _this7 = this;

      if (this.studioState_.selectedLayers.length) {
        // sort selected layers by order they appear in tree
        var tempSelLayers = this.studioState_.selectedLayers.slice();
        var selLayerOrders = {};
        var n = 0;
        this.studioState_.artwork.walk(function (layer) {
          if (tempSelLayers.indexOf(layer) >= 0) {
            selLayerOrders[layer.id] = n;
            ++n;
          }
        });
        tempSelLayers.sort(function (a, b) {
          return selLayerOrders[a.id] - selLayerOrders[b.id];
        });

        // either group or ungroup selection
        if (shouldGroup) {
          // group selected layers

          // remove any layers that are descendants of other selected layers,
          // and remove the artwork itself if selected
          tempSelLayers = tempSelLayers.filter(function (layer) {
            if (layer instanceof _model.Artwork) {
              return false;
            }

            var p = layer.parent;
            while (p) {
              if (tempSelLayers.indexOf(p) >= 0) {
                return false;
              }
              p = p.parent;
            }
            return true;
          });

          if (!tempSelLayers.length) {
            return;
          }

          // find destination parent and insertion point
          var firstSelectedLayerParent = tempSelLayers[0].parent;
          var firstSelectedLayerIndexInParent = firstSelectedLayerParent.layers.indexOf(tempSelLayers[0]);

          // remove all selected items from their parents and
          // move them into a new parent
          var newGroup = new _model.LayerGroup({
            id: this.studioState_.getUniqueLayerId('group'),
            layers: tempSelLayers
          });
          tempSelLayers.forEach(function (layer) {
            return layer.parent.layers.splice(layer.parent.layers.indexOf(layer), 1);
          });
          newGroup.parent = firstSelectedLayerParent;
          firstSelectedLayerParent.layers.splice(firstSelectedLayerIndexInParent, 0, newGroup);

          this.studioState_.artworkChanged();
          this.studioState_.animChanged();
          this.studioState_.selection = [newGroup];
        } else {
          // ungroup selected layer groups
          var newSelectedLayers = [];
          tempSelLayers.filter(function (layer) {
            return layer instanceof _model.LayerGroup && !(layer instanceof _model.Artwork);
          }).forEach(function (layerGroup) {
            var _parent$layers;

            // move children into parent
            var parent = layerGroup.parent;
            var indexInParent = Math.max(0, parent.layers.indexOf(layerGroup));
            (_parent$layers = parent.layers).splice.apply(_parent$layers, [indexInParent, 0].concat(_toConsumableArray(layerGroup.layers)));
            newSelectedLayers.splice.apply(newSelectedLayers, [0, 0].concat(_toConsumableArray(layerGroup.layers)));
            layerGroup.layers.forEach(function (layer) {
              return layer.parent = parent;
            });
            layerGroup.layers = [];

            // delete the parent
            _this7.studioState_.deleteLayers(layerGroup);

            _this7.studioState_.artworkChanged();
            _this7.studioState_.animChanged();
          });
          this.studioState_.selection = newSelectedLayers;
        }
      }
    }
  }, {
    key: 'groupSelectedLayers_',
    value: function groupSelectedLayers_() {
      this.groupOrUngroupSelectedLayers_(true);
    }
  }, {
    key: 'ungroupSelectedLayers_',
    value: function ungroupSelectedLayers_() {
      this.groupOrUngroupSelectedLayers_(false);
    }
  }, {
    key: 'previewCanvasCloseButtonTheme',
    get: function get() {
      return _ColorUtil.ColorUtil.isAndroidColorDark(this.studioState_.artwork.canvasColor) ? 'dark' : 'default';
    }
  }, {
    key: 'previewCanvasColor',
    get: function get() {
      return _ColorUtil.ColorUtil.androidToCssColor(this.studioState_.artwork.canvasColor);
    }
  }]);

  return StudioCtrl;
}();

angular.module('AVDStudio').controller('StudioCtrl', StudioCtrl);

},{"AvdSerializer":14,"ColorUtil":15,"MathUtil":18,"SvgLoader":21,"VectorDrawableLoader":24,"model":35}],12:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _zipjsBrowserify = require('zipjs-browserify');

var _zipjsBrowserify2 = _interopRequireDefault(_zipjsBrowserify);

var _model = require('model');

var _AnimationRenderer = require('AnimationRenderer');

var _AvdSerializer = require('AvdSerializer');

var _ModelUtil = require('ModelUtil');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CHANGES_TAG = '$$studioState::CHANGES';

var MAX_UNDO_SLOTS = 10;
var UNDO_DEBOUNCE_MS = 1000;

var BLANK_ARTWORK = {
  id: new _model.Artwork().typeIdPrefix,
  width: 24,
  height: 24,
  layers: []
};

var BLANK_ANIMATION = {
  id: new _model.Animation().typeIdPrefix,
  duration: 300
};

var StudioStateService = function () {
  function StudioStateService($rootScope, $timeout) {
    _classCallCheck(this, StudioStateService);

    this.rootScope_ = $rootScope;
    this.timeout_ = $timeout;
    this.rebuildRenderer_();
  }

  _createClass(StudioStateService, [{
    key: 'load',
    value: function load(obj) {
      this.artwork_ = obj.artwork;
      this.animations_ = obj.animations || [new _model.Animation(BLANK_ANIMATION)];

      this.undoStates_ = [];
      this.currentUndoState_ = -1;
      this.debouncedSaveUndoPromise_ = null;

      this.activeTime_ = 0;
      this.playing_ = false;
      this.selection_ = null;

      this.activeAnimation_ = this.animations_.length ? this.animations_[0] : null;

      this.rebuildRenderer_();

      this.broadcastChanges_({
        artwork: true,
        animations: true,
        selection: true,
        activeTime: true,
        playing: true,
        isReset: true
      });

      this.dirty_ = false;
      this.saveUndoState_();
    }
  }, {
    key: 'animChanged',
    value: function animChanged() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.dirty_ = true;
      this.rebuildRenderer_();
      this.broadcastChanges_({ animations: true });
      if (!options.noUndo) {
        this.saveUndoState_({ debounce: true });
      }
    }
  }, {
    key: 'artworkChanged',
    value: function artworkChanged() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.dirty_ = true;
      this.rebuildRenderer_();
      this.broadcastChanges_({ artwork: true });
      if (!options.noUndo) {
        this.saveUndoState_({ debounce: true });
      }
    }
  }, {
    key: 'saveUndoState_',
    value: function saveUndoState_() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // if there's a pending debounce, defer it
      if (this.debouncedSaveUndoPromise_) {
        this.timeout_.cancel(this.debouncedSaveUndoPromise_);
        this.undoStates_.shift();
      }

      // step 1: stage a new slot for the undo state
      if (this.currentUndoState_ > 0) {
        // currently in an undo state, blow away all undo states after this one
        this.undoStates_.splice(0, this.currentUndoState_);
      }

      this.undoStates_.unshift(null);
      this.currentUndoState_ = 0;

      // cap the max number of undo states
      this.undoStates_.splice(MAX_UNDO_SLOTS, this.undoStates_.length - MAX_UNDO_SLOTS);

      // step 2: either commit the current state right away, or debounce
      // (commit the current state after N millisec of inactivity)
      if (options.debounce) {
        this.debouncedSaveUndoPromise_ = this.timeout_(function () {
          return _this.commitUndoStateToTopSlot_();
        }, UNDO_DEBOUNCE_MS);
      } else {
        this.commitUndoStateToTopSlot_();
      }
    }
  }, {
    key: 'commitUndoStateToTopSlot_',
    value: function commitUndoStateToTopSlot_() {
      this.undoStates_[0] = {
        artwork: new _model.Artwork(this.artwork_),
        animations: (this.animations_ || []).map(function (anim) {
          return new _model.Animation(anim);
        }),
        activeAnimationIndex: (this.animations_ || []).indexOf(this.activeAnimation_)
      };
      this.debouncedSaveUndoPromise_ = null;
    }
  }, {
    key: 'realizeUndoState_',
    value: function realizeUndoState_() {
      var state = this.undoStates_[this.currentUndoState_];
      this.artwork_ = new _model.Artwork(state.artwork);
      this.animations_ = state.animations.map(function (anim) {
        return new _model.Animation(anim);
      });
      this.activeAnimation_ = this.animations_.length > 0 && state.activeAnimationIndex >= 0 ? this.animations_[state.activeAnimationIndex] : null;
      this.selection = [];
      this.artworkChanged({ noUndo: true });
      this.animChanged({ noUndo: true });
    }
  }, {
    key: 'tryUndo',
    value: function tryUndo() {
      // if there's a debounced commit of undo state, commit it now
      if (this.debouncedSaveUndoPromise_) {
        this.timeout_.cancel(this.debouncedSaveUndoPromise_);
        this.commitUndoStateToTopSlot_();
      }

      if (this.currentUndoState_ < this.undoStates_.length - 1) {
        ++this.currentUndoState_;
        this.realizeUndoState_();
      }
    }
  }, {
    key: 'tryRedo',
    value: function tryRedo() {
      if (this.currentUndoState_ > 0) {
        --this.currentUndoState_;
        this.realizeUndoState_();
      }
    }
  }, {
    key: 'rebuildRenderer_',
    value: function rebuildRenderer_() {
      this.animationRenderer_ = null;
      if (this.activeAnimation) {
        this.animationRenderer_ = new _AnimationRenderer.AnimationRenderer(this.artwork, this.activeAnimation);
        this.animationRenderer_.setAnimationTime(this.activeTime_);
      }
    }
  }, {
    key: 'getSelectionByType_',
    value: function getSelectionByType_(type) {
      return this.selection_ && this.selection_.length && this.selection_[0] instanceof type ? this.selection_ : [];
    }
  }, {
    key: 'areItemsMultiselectCompatible_',
    value: function areItemsMultiselectCompatible_(item1, item2) {
      return !!(!item1 || !item2 || item1.constructor === item2.constructor || item1 instanceof _model.BaseLayer && item2 instanceof _model.BaseLayer);
    }
  }, {
    key: 'selectItem',
    value: function selectItem(item) {
      this.toggleSelected(item, true);
    }
  }, {
    key: 'deselectItem',
    value: function deselectItem(item) {
      this.toggleSelected(item, false);
    }
  }, {
    key: 'toggleSelected',
    value: function toggleSelected(item, select) {
      if (!item) {
        return;
      }

      if (select === undefined) {
        select = !item.selected_;
      }

      if (!!item.selected_ == select) {
        return;
      }

      this.selection_ = this.selection_ || [];

      if (select) {
        // ensure only one type of thing is selected
        if (this.areItemsMultiselectCompatible_(this.firstSelectedItem, item)) {
          // add this item to the existing selection
          this.selection_.push(item);
          item.selected_ = true;
        } else {
          // reset the selection
          this.selection = [item];
        }
      } else {
        // simply toggle this item being selected
        var index = this.selection_.indexOf(item);
        if (index >= 0) {
          this.selection_.splice(index, 1);
          delete item.selected_;
        }
      }

      this.broadcastChanges_({ selection: true });
    }
  }, {
    key: 'deleteLayers',
    value: function deleteLayers(layersToDelete) {
      var _this2 = this;

      if (!Array.isArray(layersToDelete)) {
        layersToDelete = [layersToDelete];
      }

      var deleteAnimationsForLayer_ = function deleteAnimationsForLayer_(layer) {
        layer.walk(function (layer) {
          _this2.animations.forEach(function (animation) {
            animation.blocks = animation.blocks.filter(function (block) {
              return block.layerId != layer.id;
            });
          });
        });
      };

      var visit_ = function visit_(layerGroup) {
        for (var i = layerGroup.layers.length - 1; i >= 0; --i) {
          var layer = layerGroup.layers[i];
          if (layersToDelete.indexOf(layer) >= 0) {
            deleteAnimationsForLayer_(layer);
            layerGroup.layers.splice(i, 1);
          } else if (layer.layers) {
            visit_(layer);
          }
        }
      };

      visit_(this.artwork);
      this.artworkChanged();
      this.animChanged();
    }
  }, {
    key: 'updateLayerId',
    value: function updateLayerId(layer, newId) {
      var oldId = layer.id;
      if (oldId == newId) {
        return;
      }

      this.animations.forEach(function (animation) {
        return animation.blocks.forEach(function (block) {
          if (block.layerId == oldId) {
            block.layerId = newId;
          }
        });
      });
      layer.id = newId;

      this.artworkChanged();
      this.animChanged();
    }
  }, {
    key: 'getUniqueAnimationId',
    value: function getUniqueAnimationId(prefix) {
      var _this3 = this;

      var targetAnimation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return _ModelUtil.ModelUtil.getUniqueId({
        prefix: prefix || 'anim',
        objectById: function objectById(id) {
          return _this3.animations.reduce(function (a, b) {
            return a || b.id == id;
          }, false);
        },
        skipObject: targetAnimation
      });
    }
  }, {
    key: 'getUniqueLayerId',
    value: function getUniqueLayerId(prefix) {
      var _this4 = this;

      var targetLayer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return _ModelUtil.ModelUtil.getUniqueId({
        prefix: prefix || (targetLayer ? targetLayer.typeIdPrefix : 'layer'),
        objectById: function objectById(id) {
          return _this4.artwork.findLayerById(id);
        },
        skipObject: targetLayer
      });
    }
  }, {
    key: 'broadcastChanges_',
    value: function broadcastChanges_(changes) {
      // todo: debounce
      this.rootScope_.$emit(CHANGES_TAG, changes);
    }
  }, {
    key: 'onChange',
    value: function onChange(fn, $scope) {
      var watcher = this.rootScope_.$on(CHANGES_TAG, function () {
        // window.setTimeout(() => $scope.$apply(() => fn.apply(this, arguments)), 0);
        fn.apply(this, arguments);
      });
      $scope.$on('$destroy', function () {
        return watcher();
      });
      return watcher;
    }
  }, {
    key: 'downloadFile_',
    value: function downloadFile_(content, filename) {
      var anchor = $('<a>').hide().appendTo(document.body);
      var blob = content;
      if (!(content instanceof Blob)) {
        blob = new Blob([content], { type: 'octet/stream' });
      }
      var url = window.URL.createObjectURL(blob);
      anchor.attr({
        href: url,
        download: filename
      });
      anchor.get(0).click();
      window.URL.revokeObjectURL(url);
    }
  }, {
    key: 'addLayers',
    value: function addLayers(layers) {
      var _this5 = this;

      (layers || []).forEach(function (layer) {
        layer.parent = _this5.artwork;
        layer.walk(function (layer) {
          layer.id = _this5.getUniqueLayerId(layer.id, layer);
        });
        _this5.artwork.layers.push(layer);
      });
      this.artworkChanged();
    }
  }, {
    key: 'swapLayer',
    value: function swapLayer(layer, withLayer) {
      var parent = layer.parent;
      var indexInParent = parent.layers.indexOf(layer);
      withLayer.parent = layer.parent;
      parent.layers.splice(indexInParent, 1, withLayer);
      var indexInSelection = this.selection.indexOf(layer);
      if (indexInSelection >= 0) {
        this.selection.splice(indexInSelection, 1, withLayer);
      }
      // TODO: preserve still-valid animations
      this.animations.forEach(function (animation) {
        animation.blocks = animation.blocks.filter(function (block) {
          return block.layerId != layer.id;
        });
      });
      this.artworkChanged();
    }
  }, {
    key: 'new',
    value: function _new() {
      this.load({
        artwork: new _model.Artwork(BLANK_ARTWORK),
        animations: [new _model.Animation(BLANK_ANIMATION)]
      });
    }
  }, {
    key: 'saveToFile',
    value: function saveToFile() {
      var jsonStr = JSON.stringify({
        artwork: this.artwork.toJSON(),
        animations: this.animations.map(function (anim) {
          return anim.toJSON();
        })
      }, null, 2);
      this.downloadFile_(jsonStr, this.artwork.id + '.iconanim');
      this.dirty_ = false;
    }
  }, {
    key: 'exportVectorDrawable',
    value: function exportVectorDrawable() {
      var xmlStr = _AvdSerializer.AvdSerializer.artworkToVectorDrawableXmlString(this.artwork);
      this.downloadFile_(xmlStr, this.artwork.id + '.xml');
    }
  }, {
    key: 'exportAVDs',
    value: function exportAVDs() {
      var _this6 = this;

      if (this.animations.length) {
        var exportedAnimations = this.animations.map(function (animation) {
          return {
            animation: animation,
            filename: 'avd_' + _this6.artwork.id + '_' + animation.id + '.xml',
            xmlStr: _AvdSerializer.AvdSerializer.artworkAnimationToAvdXmlString(_this6.artwork, animation)
          };
        });

        if (exportedAnimations.length == 1) {
          // download a single XML
          this.downloadFile_(exportedAnimations[0].xmlStr, exportedAnimations[0].filename);
        } else {
          // download a ZIP
          _zipjsBrowserify2.default.createWriter(new _zipjsBrowserify2.default.BlobWriter(), function (writer) {
            var i = -1;
            var next_ = function next_() {
              ++i;
              if (i >= exportedAnimations.length) {
                // close
                writer.close(function (blob) {
                  return _this6.downloadFile_(blob, 'avd_' + _this6.artwork.id + '.zip');
                });
              } else {
                // add next file
                var exportedAnimation = exportedAnimations[i];
                writer.add(exportedAnimation.filename, new _zipjsBrowserify2.default.TextReader(exportedAnimation.xmlStr), next_);
              }
            };
            next_();
          }, function (error) {
            return console.error(error);
          });
        }
      }
    }
  }, {
    key: 'playbackSpeed',
    get: function get() {
      return this.playbackSpeed_ || 1;
    },
    set: function set(speed) {
      this.playbackSpeed_ = speed;
    }
  }, {
    key: 'playing',
    get: function get() {
      return this.playing_;
    },
    set: function set(playing) {
      this.playing_ = playing;
      this.broadcastChanges_({ playing: true });
    }
  }, {
    key: 'artwork',
    get: function get() {
      // if (this.currentUndoState_ >= 0) {
      //   return this.undoStates_[this.currentUndoState_].artwork;
      // }

      return this.artwork_;
    },
    set: function set(artwork) {
      this.artwork_ = artwork;
      this.artworkChanged({ noUndo: true });
    }
  }, {
    key: 'animations',
    get: function get() {
      // if (this.currentUndoState_ >= 0) {
      //   return this.undoStates_[this.currentUndoState_].animations;
      // }

      return this.animations_ = this.animations_ || [];
    },
    set: function set(animations) {
      this.animations_ = animations;
      if (animations.indexOf(this.activeAnimation) < 0) {
        this.activeAnimation = animations[0];
      }
      this.animChanged();
    }
  }, {
    key: 'dirty',
    get: function get() {
      return !!this.dirty_;
    },
    set: function set(dirty) {
      this.dirty_ = dirty;
    }
  }, {
    key: 'animationRenderer',
    get: function get() {
      return this.animationRenderer_;
    }
  }, {
    key: 'activeAnimation',
    get: function get() {
      // if (this.currentUndoState_ >= 0) {
      //   let currentUndoState = this.undoStates_[this.currentUndoState_];
      //   return currentUndoState.animations[currentUndoState.activeAnimationIndex];
      // }

      return this.activeAnimation_ || this.animations.length && this.animations[0];
    },
    set: function set(activeAnimation) {
      if (this.activeAnimation_ === activeAnimation) {
        return;
      }

      this.activeAnimation_ = activeAnimation;
      this.rebuildRenderer_();
      this.broadcastChanges_({ activeAnimation: true });
    }
  }, {
    key: 'activeTime',
    get: function get() {
      return this.activeTime_ || 0;
    },
    set: function set(activeTime) {
      this.activeTime_ = activeTime;
      if (this.animationRenderer_) {
        this.animationRenderer_.setAnimationTime(activeTime);
      }
      this.broadcastChanges_({ activeTime: true });
    }
  }, {
    key: 'selectedLayers',
    get: function get() {
      return this.getSelectionByType_(_model.BaseLayer);
    }
  }, {
    key: 'selectedAnimationBlocks',
    get: function get() {
      return this.getSelectionByType_(_model.AnimationBlock);
    }
  }, {
    key: 'selectedAnimations',
    get: function get() {
      return this.getSelectionByType_(_model.Animation);
    }
  }, {
    key: 'firstSelectedItem',
    get: function get() {
      return (this.selection_ || []).length > 0 ? this.selection_[0] : null;
    }
  }, {
    key: 'isMultipleSelection',
    get: function get() {
      return this.selection_ ? !!(this.selection_.length > 1) : false;
    }
  }, {
    key: 'selection',
    get: function get() {
      return this.selection_ || [];
    },
    set: function set(selection) {
      this.selection_ = this.selection_ || [];
      this.selection_.forEach(function (item) {
        return delete item.selected_;
      });
      this.selection_ = selection ? selection.slice() : [];
      this.selection_.forEach(function (item) {
        return item.selected_ = true;
      });
      this.broadcastChanges_({ selection: true });
    }
  }]);

  return StudioStateService;
}();

angular.module('AVDStudio').service('StudioStateService', StudioStateService);

},{"AnimationRenderer":13,"AvdSerializer":14,"ModelUtil":19,"model":35,"zipjs-browserify":53}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimationRenderer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Copyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _model = require('model');

var _ModelUtil = require('ModelUtil');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_LAYER_PROPERTY_STATE = {
  activeBlock: null,
  interpolatedValue: false
};

var AnimationRenderer = exports.AnimationRenderer = function () {
  function AnimationRenderer(artwork, animation) {
    var _this = this;

    _classCallCheck(this, AnimationRenderer);

    this.originalArtwork = artwork;
    this.animation = animation;
    this.renderedArtwork = new _model.Artwork(artwork, { linkSelectedState: true });
    this.animDataByLayer = _ModelUtil.ModelUtil.getOrderedAnimationBlocksByLayerIdAndProperty(animation);

    Object.keys(this.animDataByLayer).forEach(function (layerId) {
      _this.animDataByLayer[layerId] = {
        originalLayer: _this.originalArtwork.findLayerById(layerId),
        renderedLayer: _this.renderedArtwork.findLayerById(layerId),
        orderedBlocks: _this.animDataByLayer[layerId]
      };
    });

    this.setAnimationTime(0);
  }

  _createClass(AnimationRenderer, [{
    key: 'setAnimationTime',
    value: function setAnimationTime(time) {
      for (var layerId in this.animDataByLayer) {
        var animData = this.animDataByLayer[layerId];
        animData.renderedLayer._ar = animData.renderedLayer._ar || {};

        for (var propertyName in animData.orderedBlocks) {
          var blocks = animData.orderedBlocks[propertyName];
          var _ar = Object.assign({}, DEFAULT_LAYER_PROPERTY_STATE);

          // compute rendered value at given time
          var property = animData.originalLayer.animatableProperties[propertyName];
          var value = animData.originalLayer[propertyName];
          for (var i = 0; i < blocks.length; ++i) {
            var block = blocks[i];
            if (time < block.startTime) {
              break;
            } else if (time < block.endTime) {
              var fromValue = 'fromValue' in block ? block.fromValue : value;
              var f = (time - block.startTime) / (block.endTime - block.startTime);
              f = block.interpolator.interpolate(f);
              value = property.interpolateValue(fromValue, block.toValue, f);
              _ar.activeBlock = block;
              _ar.interpolatedValue = true;
              break;
            }

            value = block.toValue;
            _ar.activeBlock = block;
          }

          animData.renderedLayer[propertyName] = value;

          // cached data
          animData.renderedLayer._ar[propertyName] = animData.renderedLayer._ar[propertyName] || {};
          animData.renderedLayer._ar[propertyName] = _ar;
        }
      }

      this.animTime = time;
    }
  }, {
    key: 'getLayerPropertyValue',
    value: function getLayerPropertyValue(layerId, propertyName) {
      return this.renderedArtwork.findLayerById(layerId)[propertyName];
    }
  }, {
    key: 'getLayerPropertyState',
    value: function getLayerPropertyState(layerId, propertyName) {
      var layerAnimData = this.animDataByLayer[layerId];
      return layerAnimData ? layerAnimData.renderedLayer._ar[propertyName] || {} : Object.assign({}, DEFAULT_LAYER_PROPERTY_STATE);
    }
  }]);

  return AnimationRenderer;
}();

},{"ModelUtil":19,"model":35}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AvdSerializer = undefined;

var _xmlserializer = require('xmlserializer');

var _xmlserializer2 = _interopRequireDefault(_xmlserializer);

var _model = require('./model');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var XMLNS_NS = 'http://www.w3.org/2000/xmlns/';
var ANDROID_NS = 'http://schemas.android.com/apk/res/android';
var AAPT_NS = 'http://schemas.android.com/aapt';

var conditionalAttr_ = function conditionalAttr_(node, attr, value, skipValue) {
  if (value !== undefined && value !== null && (skipValue === undefined || value !== skipValue)) {
    node.setAttributeNS(ANDROID_NS, attr, value);
  }
};

var serializeXmlNode_ = function serializeXmlNode_(xmlNode) {
  var xmlStr = _xmlserializer2.default.serializeToString(xmlNode, { indent: 4, multiAttributeIndent: 4 });
  return xmlStr; //new XMLSerializer().serializeToString(xmlNode);
  // return vkbeautify.xml(xmlStr, 4);
};

var AvdSerializer = exports.AvdSerializer = {

  /**
   * Serializes an Artwork to a vector drawable XML file.
   */
  artworkToVectorDrawableXmlString: function artworkToVectorDrawableXmlString(artwork) {
    var xmlDoc = document.implementation.createDocument(null, 'vector');
    var rootNode = xmlDoc.documentElement;
    AvdSerializer.artworkToXmlNode_(artwork, rootNode, xmlDoc);
    return serializeXmlNode_(rootNode);
  },


  /**
   * Serializes a given Artwork and Animation to an animatedvector drawable XML file.
   */
  artworkAnimationToAvdXmlString: function artworkAnimationToAvdXmlString(artwork, animation) {
    var xmlDoc = document.implementation.createDocument(null, 'animated-vector');
    var rootNode = xmlDoc.documentElement;
    rootNode.setAttributeNS(XMLNS_NS, 'xmlns:android', ANDROID_NS);
    rootNode.setAttributeNS(XMLNS_NS, 'xmlns:aapt', AAPT_NS);

    // create drawable node containing the artwork
    var artworkContainerNode = xmlDoc.createElementNS(AAPT_NS, 'aapt:attr');
    artworkContainerNode.setAttribute('name', 'android:drawable');
    rootNode.appendChild(artworkContainerNode);

    var artworkNode = xmlDoc.createElement('vector');
    AvdSerializer.artworkToXmlNode_(artwork, artworkNode, xmlDoc);
    artworkContainerNode.appendChild(artworkNode);

    // create animation nodes (one per layer)
    var animBlocksByLayer = {};
    animation.blocks.forEach(function (block) {
      animBlocksByLayer[block.layerId] = animBlocksByLayer[block.layerId] || [];
      animBlocksByLayer[block.layerId].push(block);
    });

    var _loop = function _loop(layerId) {
      var targetNode = xmlDoc.createElement('target');
      targetNode.setAttributeNS(ANDROID_NS, 'android:name', layerId);
      rootNode.appendChild(targetNode);

      var animationNode = xmlDoc.createElementNS(AAPT_NS, 'aapt:attr');
      animationNode.setAttribute('name', 'android:animation');
      targetNode.appendChild(animationNode);

      var blocksForLayer = animBlocksByLayer[layerId];
      var blockContainerNode = animationNode;
      var multiBlock = false;
      if (blocksForLayer.length > 1) {
        multiBlock = true;

        // <set> for multiple property animations on a single layer
        blockContainerNode = xmlDoc.createElement('set');
        blockContainerNode.setAttributeNS(XMLNS_NS, 'xmlns:android', ANDROID_NS);
        animationNode.appendChild(blockContainerNode);
      }

      var layer = artwork.findLayerById(layerId);
      var animatableProperties = layer.animatableProperties;

      blocksForLayer.forEach(function (block) {
        var blockNode = xmlDoc.createElement('objectAnimator');
        if (!multiBlock) {
          blockNode.setAttributeNS(XMLNS_NS, 'xmlns:android', ANDROID_NS);
        }
        blockNode.setAttributeNS(ANDROID_NS, 'android:propertyName', block.propertyName);
        conditionalAttr_(blockNode, 'android:startOffset', block.startTime, 0);
        conditionalAttr_(blockNode, 'android:duration', block.endTime - block.startTime);
        conditionalAttr_(blockNode, 'android:valueFrom', block.fromValue);
        conditionalAttr_(blockNode, 'android:valueTo', block.toValue);
        conditionalAttr_(blockNode, 'android:valueType', animatableProperties[block.propertyName].animatorValueType);
        conditionalAttr_(blockNode, 'android:interpolator', block.interpolator.androidRef);
        blockContainerNode.appendChild(blockNode);
      });
    };

    for (var layerId in animBlocksByLayer) {
      _loop(layerId);
    }

    return serializeXmlNode_(rootNode);
  },


  /**
   * Helper method that serializes an Artwork to a destinationNode in an xmlDoc.
   * The destinationNode should be a <vector> node.
   */
  artworkToXmlNode_: function artworkToXmlNode_(artwork, destinationNode, xmlDoc) {
    destinationNode.setAttributeNS(XMLNS_NS, 'xmlns:android', ANDROID_NS);
    destinationNode.setAttributeNS(ANDROID_NS, 'android:width', artwork.width + 'dp');
    destinationNode.setAttributeNS(ANDROID_NS, 'android:height', artwork.height + 'dp');
    destinationNode.setAttributeNS(ANDROID_NS, 'android:viewportWidth', '' + artwork.width);
    destinationNode.setAttributeNS(ANDROID_NS, 'android:viewportHeight', '' + artwork.height);
    conditionalAttr_(destinationNode, 'android:alpha', artwork.alpha, 1);

    artwork.walk(function (layer, parentNode) {
      if (layer instanceof _model.Artwork) {
        return parentNode;
      } else if (layer instanceof _model.PathLayer) {
        var node = xmlDoc.createElement('path');
        conditionalAttr_(node, 'android:name', layer.id);
        conditionalAttr_(node, 'android:pathData', layer.pathData.pathString);
        conditionalAttr_(node, 'android:fillColor', layer.fillColor, '');
        conditionalAttr_(node, 'android:fillAlpha', layer.fillAlpha, 1);
        conditionalAttr_(node, 'android:strokeColor', layer.strokeColor, '');
        conditionalAttr_(node, 'android:strokeAlpha', layer.strokeAlpha, 1);
        conditionalAttr_(node, 'android:strokeWidth', layer.strokeWidth, 0);
        conditionalAttr_(node, 'android:trimPathStart', layer.trimPathStart, 0);
        conditionalAttr_(node, 'android:trimPathEnd', layer.trimPathEnd, 1);
        conditionalAttr_(node, 'android:trimPathOffset', layer.trimPathOffset, 0);
        conditionalAttr_(node, 'android:strokeLineCap', layer.strokeLinecap, _model.DefaultValues.LINECAP);
        conditionalAttr_(node, 'android:strokeLineJoin', layer.strokeLinejoin, _model.DefaultValues.LINEJOIN);
        conditionalAttr_(node, 'android:strokeMiterLimit', layer.strokeMiterLimit, _model.DefaultValues.MITER_LIMIT);
        parentNode.appendChild(node);
        return parentNode;
      } else if (layer instanceof _model.MaskLayer) {
        var _node = xmlDoc.createElement('clip-path');
        conditionalAttr_(_node, 'android:name', layer.id);
        conditionalAttr_(_node, 'android:pathData', layer.pathData.pathString);
        parentNode.appendChild(_node);
        return parentNode;
      } else if (layer instanceof _model.LayerGroup) {
        var _node2 = xmlDoc.createElement('group');
        conditionalAttr_(_node2, 'android:name', layer.id);
        conditionalAttr_(_node2, 'android:pivotX', layer.pivotX, 0);
        conditionalAttr_(_node2, 'android:pivotY', layer.pivotY, 0);
        conditionalAttr_(_node2, 'android:translateX', layer.translateX, 0);
        conditionalAttr_(_node2, 'android:translateY', layer.translateY, 0);
        conditionalAttr_(_node2, 'android:scaleX', layer.scaleX, 1);
        conditionalAttr_(_node2, 'android:scaleY', layer.scaleY, 1);
        conditionalAttr_(_node2, 'android:rotation', layer.rotation, 0);
        parentNode.appendChild(_node2);
        return _node2;
      }
    }, destinationNode);
  }
};

},{"./model":35,"xmlserializer":46}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorUtil = undefined;

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BRIGHTNESS_THRESHOLD = 130; // for isColorDark


/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ColorUtil = exports.ColorUtil = {
  parseAndroidColor: function parseAndroidColor(val) {
    val = (val || '').replace(/^\s*#?|\s*$/g, '');
    var dict = { a: 255 };

    if (val.length == 3) {
      dict.r = parseInt(val.substring(0, 1), 16) * 17;
      dict.g = parseInt(val.substring(1, 2), 16) * 17;
      dict.b = parseInt(val.substring(2, 3), 16) * 17;
    } else if (val.length == 4) {
      dict.a = parseInt(val.substring(0, 1), 16) * 17;
      dict.r = parseInt(val.substring(1, 2), 16) * 17;
      dict.g = parseInt(val.substring(2, 3), 16) * 17;
      dict.b = parseInt(val.substring(3, 4), 16) * 17;
    } else if (val.length == 6) {
      dict.r = parseInt(val.substring(0, 2), 16);
      dict.g = parseInt(val.substring(2, 4), 16);
      dict.b = parseInt(val.substring(4, 6), 16);
    } else if (val.length == 8) {
      dict.a = parseInt(val.substring(0, 2), 16);
      dict.r = parseInt(val.substring(2, 4), 16);
      dict.g = parseInt(val.substring(4, 6), 16);
      dict.b = parseInt(val.substring(6, 8), 16);
    } else {
      return null;
    }

    return isNaN(dict.r) || isNaN(dict.g) || isNaN(dict.b) || isNaN(dict.a) ? null : dict;
  },
  toAndroidString: function toAndroidString(dict) {
    var str = '#';
    if (dict.a != 255) {
      str += (dict.a < 16 ? '0' : '') + dict.a.toString(16);
    }

    str += (dict.r < 16 ? '0' : '') + dict.r.toString(16) + (dict.g < 16 ? '0' : '') + dict.g.toString(16) + (dict.b < 16 ? '0' : '') + dict.b.toString(16);
    return str;
  },
  svgToAndroidColor: function svgToAndroidColor(color) {
    if (color == 'none') {
      return null;
    }
    color = (0, _tinycolor2.default)(color);
    var colorHex = color.toHex();
    var alphaHex = color.toHex8().substr(6);
    return '#' + (alphaHex != 'ff' ? alphaHex : '') + colorHex;
  },
  androidToCssColor: function androidToCssColor(androidColor, multAlpha) {
    multAlpha = multAlpha === undefined ? 1 : multAlpha;
    if (!androidColor) {
      return 'transparent';
    }

    var d = ColorUtil.parseAndroidColor(androidColor);
    return 'rgba(' + d.r + ',' + d.g + ',' + d.b + ',' + (d.a * multAlpha / 255).toFixed(2) + ')';
  },
  isAndroidColorDark: function isAndroidColorDark(androidColor) {
    if (!androidColor) {
      return false;
    }

    var d = ColorUtil.parseAndroidColor(androidColor);
    return (30 * d.r + 59 * d.g + 11 * d.b) / 100 <= BRIGHTNESS_THRESHOLD;
  }
};

},{"tinycolor2":52}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DRAG_SLOP = 4; // pixels


var DragHelper = exports.DragHelper = function () {
  function DragHelper(opts) {
    var _this = this;

    _classCallCheck(this, DragHelper);

    opts = opts || {};

    this.direction_ = opts.direction || 'both';
    this.downX_ = opts.downEvent.clientX;
    this.downY_ = opts.downEvent.clientY;
    this.skipSlopCheck_ = !!opts.skipSlopCheck;

    this.onBeginDrag_ = opts.onBeginDrag || function () {};
    this.onDrag_ = opts.onDrag || function () {};
    this.onDrop_ = opts.onDrop || function () {};

    this.dragging_ = false;
    this.draggingScrim_ = null;

    this.draggingCursor = opts.draggingCursor || 'grabbing';

    var mouseMoveHandler_ = function mouseMoveHandler_(event) {
      if (!_this.dragging_ && _this.shouldBeginDragging_(event)) {
        _this.dragging_ = true;
        _this.draggingScrim_ = _this.buildDraggingScrim_().appendTo(document.body);
        _this.draggingCursor = _this.draggingCursor_;
        _this.onBeginDrag_(event);
      }

      if (_this.dragging_) {
        _this.onDrag_(event, {
          x: event.clientX - _this.downX_,
          y: event.clientY - _this.downY_
        });
      }
    };

    var mouseUpHandler_ = function mouseUpHandler_(event) {
      $(window).off('mousemove', mouseMoveHandler_).off('mouseup', mouseUpHandler_);
      if (_this.dragging_) {
        _this.onDrag_(event, {
          x: event.clientX - _this.downX_,
          y: event.clientY - _this.downY_
        });

        _this.onDrop_();

        _this.draggingScrim_.remove();
        _this.draggingScrim_ = null;
        _this.dragging_ = false;

        event.stopPropagation();
        event.preventDefault();
        return false;
      }
    };

    $(window).on('mousemove', mouseMoveHandler_).on('mouseup', mouseUpHandler_);
  }

  _createClass(DragHelper, [{
    key: 'shouldBeginDragging_',
    value: function shouldBeginDragging_(mouseMoveEvent) {
      if (this.skipSlopCheck_) {
        return true;
      }

      var begin = false;
      if (this.direction_ == 'both' || this.direction_ == 'horizontal') {
        begin = begin || Math.abs(mouseMoveEvent.clientX - this.downX_) > DRAG_SLOP;
      }
      if (this.direction_ == 'both' || this.direction_ == 'vertical') {
        begin = begin || Math.abs(mouseMoveEvent.clientY - this.downY_) > DRAG_SLOP;
      }
      return begin;
    }
  }, {
    key: 'buildDraggingScrim_',
    value: function buildDraggingScrim_() {
      return $('<div>').css({
        position: 'fixed',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        zIndex: 9999
      });
    }
  }, {
    key: 'draggingCursor',
    set: function set(cursor) {
      if (cursor == 'grabbing') {
        cursor = '-webkit-' + cursor;
      }

      this.draggingCursor_ = cursor;
      if (this.draggingScrim_) {
        this.draggingScrim_.css({ cursor: cursor });
      }
    }
  }]);

  return DragHelper;
}();

},{}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Based on http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/

var ElementResizeWatcher = exports.ElementResizeWatcher = function () {
  function ElementResizeWatcher(element, listener) {
    var _this = this;

    _classCallCheck(this, ElementResizeWatcher);

    this.element_ = $(element);

    // create resize listener
    var rafHandle = void 0;

    this.onResize_ = function (event) {
      var el = event.target || event.srcElement;
      if (rafHandle) {
        el.cancelAnimationFrame(rafHandle);
      }

      rafHandle = el.requestAnimationFrame(function () {
        return listener();
      });
    };

    // add listener
    if (getComputedStyle(this.element_.get(0)).position == 'static') {
      this.element_.css({ position: 'relative' });
    }

    this.proxyElement_ = $('<object>').css({
      display: 'block',
      position: 'absolute',
      left: 0,
      top: 0,
      width: '100%',
      height: '100%',
      overflow: 'hidden',
      pointerEvents: 'none',
      zIndex: -1
    }).attr('type', 'text/html').attr('data', 'about:blank').on('load', function () {
      _this.proxyDefaultView_ = _this.proxyElement_.get(0).contentDocument.defaultView;
      _this.proxyDefaultView_.addEventListener('resize', _this.onResize_);
    }).appendTo(this.element_);
  }

  _createClass(ElementResizeWatcher, [{
    key: 'destroy',
    value: function destroy() {
      if (this.proxyDefaultView_) {
        this.proxyDefaultView_.removeEventListener('resize', this.onResize_);
      }

      this.proxyElement_.remove();
    }
  }]);

  return ElementResizeWatcher;
}();

},{}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MathUtil = exports.MathUtil = {
  progress: function progress(val, min, max) {
    return MathUtil.constrain((val - min) / (max - min), 0, 1);
  },
  constrain: function constrain(val, min, max) {
    if (val < min) {
      return min;
    } else if (val > max) {
      return max;
    } else {
      return val;
    }
  },
  interpolate: function interpolate(start, end, f) {
    return start + (end - start) * f;
  },
  dist: function dist(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(y2 - y1, 2) + Math.pow(x2 - x1, 2));
  }
};

},{}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var ModelUtil = exports.ModelUtil = {
  getOrderedAnimationBlocksByLayerIdAndProperty: function getOrderedAnimationBlocksByLayerIdAndProperty(animation) {
    var animationBlocksByLayerId = {};

    animation.blocks.forEach(function (block) {
      var blocksByProperty = animationBlocksByLayerId[block.layerId];
      if (!blocksByProperty) {
        blocksByProperty = {};
        animationBlocksByLayerId[block.layerId] = blocksByProperty;
      }

      blocksByProperty[block.propertyName] = blocksByProperty[block.propertyName] || [];
      blocksByProperty[block.propertyName].push(block);
    });

    for (var layerId in animationBlocksByLayerId) {
      var blocksByProperty = animationBlocksByLayerId[layerId];
      for (var propertyName in blocksByProperty) {
        blocksByProperty[propertyName].sort(function (a, b) {
          return a.startTime - b.startTime;
        });
      }
    }

    return animationBlocksByLayerId;
  },
  getUniqueId: function getUniqueId(opts) {
    opts = opts || {};
    opts.prefix = opts.prefix || '';
    opts.objectById = opts.objectById || function () {
      return null;
    };
    opts.targetObject = opts.targetObject || null;

    var n = 0;
    var id_ = function id_() {
      return opts.prefix + (n ? '_' + n : '');
    };
    while (true) {
      var o = opts.objectById(id_());
      if (!o || o == opts.targetObject) {
        break;
      }

      ++n;
    }

    return id_();
  }
};

},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var IDENTITY_TRANSFORM_MATRIX = [1, 0, 0, 1, 0, 0];

var RenderUtil = exports.RenderUtil = {
  transformMatrixForLayer: function transformMatrixForLayer(layer) {
    var cosR = Math.cos(layer.rotation * Math.PI / 180);
    var sinR = Math.sin(layer.rotation * Math.PI / 180);

    // first negative pivot, then scale, rotate, translate, and pivot
    // notes:
    // translate: [1, 0, 0, 1, x, y]
    // scale: [sx, 0, 0, sy, 0, 0]
    // rotate: [cos, sin, -sin, cos, 0, 0]

    return [cosR * layer.scaleX, sinR * layer.scaleX, -sinR * layer.scaleY, cosR * layer.scaleY, layer.pivotX + layer.translateX - cosR * layer.scaleX * layer.pivotX + sinR * layer.scaleY * layer.pivotY, layer.pivotY + layer.translateY - cosR * layer.scaleY * layer.pivotY - sinR * layer.scaleX * layer.pivotX];
  },
  flattenTransforms: function flattenTransforms(transforms) {
    return (transforms || []).reduce(function (m, transform) {
      return transformMatrix_(transform, m);
    }, IDENTITY_TRANSFORM_MATRIX);
  },
  transformPoint: function transformPoint(matrices, p) {
    if (!matrices || !matrices.length) {
      return Object.assign({}, p);
    }

    return matrices.reduce(function (p, m) {
      return {
        // [a c e]   [p.x]
        // [b d f] * [p.y]
        // [0 0 1]   [ 1 ]
        x: m[0] * p.x + m[2] * p.y + m[4],
        y: m[1] * p.x + m[3] * p.y + m[5]
      };
    }, p);
  },
  computeStrokeWidthMultiplier: function computeStrokeWidthMultiplier(transformMatrix) {
    // from getMatrixScale in
    // https://android.googlesource.com/platform/frameworks/base/+/master/libs/hwui/VectorDrawable.cpp

    // Given unit vectors A = (0, 1) and B = (1, 0).
    // After matrix mapping, we got A' and B'. Let theta = the angel b/t A' and B'.
    // Therefore, the final scale we want is min(|A'| * sin(theta), |B'| * sin(theta)),
    // which is (|A'| * |B'| * sin(theta)) / max (|A'|, |B'|);
    // If  max (|A'|, |B'|) = 0, that means either x or y has a scale of 0.
    //
    // For non-skew case, which is most of the cases, matrix scale is computing exactly the
    // scale on x and y axis, and take the minimal of these two.
    // For skew case, an unit square will mapped to a parallelogram. And this function will
    // return the minimal height of the 2 bases.

    // first remove translate elements from matrix
    transformMatrix[4] = transformMatrix[5] = 0;

    var vecA = RenderUtil.transformPoint([transformMatrix], { x: 0, y: 1 });
    var vecB = RenderUtil.transformPoint([transformMatrix], { x: 1, y: 0 });
    var scaleX = Math.hypot(vecA.x, vecA.y);
    var scaleY = Math.hypot(vecB.x, vecB.y);
    var crossProduct = vecA.y * vecB.x - vecA.x * vecB.y; // vector cross product
    var maxScale = Math.max(scaleX, scaleY);
    var matrixScale = 0;
    if (maxScale > 0) {
      matrixScale = Math.abs(crossProduct) / maxScale;
    }
    return matrixScale;
  }
};

// formula generated w/ wolfram alpha
// returns the product of 2D transformation matrices s and t

function transformMatrix_(s, t) {
  return [t[0] * s[0] + t[1] * s[2], t[0] * s[1] + t[1] * s[3], s[0] * t[2] + s[2] * t[3], s[1] * t[2] + t[3] * s[3], s[0] * t[4] + s[4] + s[2] * t[5], s[1] * t[4] + s[3] * t[5] + s[5]];
}

},{}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SvgLoader = undefined;

var _model = require('./model');

var _properties = require('./model/properties');

var _ColorUtil = require('./ColorUtil');

var _SvgPathData = require('./SvgPathData');

var _ModelUtil = require('./ModelUtil');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*
                                                                                                                                                                                                     * Copyright 2016 Google Inc.
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                     *
                                                                                                                                                                                                     *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                     */

var SvgLoader = exports.SvgLoader = {
  loadArtworkFromSvgString: function loadArtworkFromSvgString(svgString) {
    var parser = new DOMParser();
    var doc = parser.parseFromString(svgString, 'image/svg+xml');

    var usedIds = {};

    var nodeToLayerData_ = function nodeToLayerData_(node, context) {
      if (!node) {
        return null;
      }

      if (node.nodeType == Node.TEXT_NODE || node.nodeType == Node.COMMENT_NODE) {
        return null;
      }

      var makeFinalNodeId_ = function makeFinalNodeId_(typeIdPrefix) {
        var finalId = _ModelUtil.ModelUtil.getUniqueId({
          prefix: _properties.IdProperty.sanitize(node.id || typeIdPrefix),
          objectById: function objectById(id) {
            return usedIds[id];
          }
        });
        usedIds[finalId] = true;
        return finalId;
      };

      var layerData = {};

      var simpleAttr_ = function simpleAttr_(nodeAttr, contextAttr) {
        if (node.attributes[nodeAttr]) {
          context[contextAttr] = node.attributes[nodeAttr].value;
        }
      };

      // set attributes
      simpleAttr_('stroke', 'strokeColor');
      simpleAttr_('stroke-width', 'strokeWidth');
      simpleAttr_('stroke-linecap', 'strokeLinecap');
      simpleAttr_('stroke-linejoin', 'strokeLinejoin');
      simpleAttr_('stroke-miterlimit', 'strokeMiterLimit');
      simpleAttr_('stroke-opacity', 'strokeAlpha');
      simpleAttr_('fill', 'fillColor');
      simpleAttr_('fill-opacity', 'fillAlpha');

      // add transforms

      if (node.transform) {
        var _context$transforms;

        var transforms = Array.from(node.transform.baseVal);
        transforms.reverse();
        context.transforms = context.transforms ? context.transforms.slice() : [];
        (_context$transforms = context.transforms).splice.apply(_context$transforms, [0, 0].concat(_toConsumableArray(transforms)));
      }

      // see if this is a path
      var path = void 0;
      if (node instanceof SVGPathElement) {
        path = node.attributes.d.value;
      } else if (node instanceof SVGRectElement) {
        var l = lengthPx_(node.x),
            t = lengthPx_(node.y),
            r = l + lengthPx_(node.width),
            b = t + lengthPx_(node.height);
        // TODO: handle corner radii
        path = 'M ' + l + ',' + t + ' ' + r + ',' + t + ' ' + r + ',' + b + ' ' + l + ',' + b + ' Z';
      } else if (node instanceof SVGLineElement) {
        var x1 = lengthPx_(node.x1),
            y1 = lengthPx_(node.y1),
            x2 = lengthPx_(node.x2),
            y2 = lengthPx_(node.y2);
        path = 'M ' + x1 + ',' + y1 + ' ' + x2 + ',' + y2 + ' Z';
      } else if (node instanceof SVGPolygonElement || node instanceof SVGPolylineElement) {
        path = 'M ' + Array.from(node.points).map(function (pt) {
          return pt.x + ',' + pt.y;
        }).join(' ');
        if (node instanceof SVGPolygonElement) {
          path += ' Z';
        }
      } else if (node instanceof SVGCircleElement) {
        var cx = lengthPx_(node.cx),
            cy = lengthPx_(node.cy),
            _r = lengthPx_(node.r);
        path = 'M ' + cx + ',' + (cy - _r) + ' A ' + _r + ' ' + _r + ' 0 1 0 ' + cx + ',' + (cy + _r) + ' A ' + _r + ' ' + _r + ' 0 1 0 ' + cx + ',' + (cy - _r) + ' Z';
      } else if (node instanceof SVGEllipseElement) {
        var _cx = lengthPx_(node.cx),
            _cy = lengthPx_(node.cy),
            rx = lengthPx_(node.rx),
            ry = lengthPx_(node.ry);
        path = 'M ' + _cx + ',' + (_cy - ry) + ' A ' + rx + ' ' + ry + ' 0 1 0 ' + _cx + ',' + (_cy + ry) + ' ' + ('A ' + rx + ' ' + ry + ' 0 1 0 ' + _cx + ',' + (_cy - ry) + ' Z');
      }

      if (path) {
        // transform all points
        if (context.transforms && context.transforms.length) {
          var pathData = new _SvgPathData.SvgPathData(path);
          pathData.transform(context.transforms);
          path = pathData.pathString;
        }

        // create a path layer
        return Object.assign(layerData, {
          id: makeFinalNodeId_('path'),
          pathData: path,
          fillColor: 'fillColor' in context ? _ColorUtil.ColorUtil.svgToAndroidColor(context.fillColor) : "#ff000000",
          fillAlpha: 'fillAlpha' in context ? context.fillAlpha : 1,
          strokeColor: 'strokeColor' in context ? _ColorUtil.ColorUtil.svgToAndroidColor(context.strokeColor) : null,
          strokeAlpha: 'strokeAlpha' in context ? context.strokeAlpha : 1,
          strokeWidth: 'strokeWidth' in context ? context.strokeWidth : 1,
          strokeLinecap: context.strokeLinecap || _model.DefaultValues.LINECAP,
          strokeLinejoin: context.strokeLinejoin || _model.DefaultValues.LINEJOIN,
          strokeMiterLimit: 'strokeMiterLimit' in context ? context.strokeMiterLimit : _model.DefaultValues.MITER_LIMIT
        });
      }

      if (node.childNodes.length) {
        var layers = Array.from(node.childNodes).map(function (child) {
          return nodeToLayerData_(child, Object.assign({}, context));
        }).filter(function (layer) {
          return !!layer;
        });
        if (layers && layers.length) {
          // create a group (there are valid children)
          return Object.assign(layerData, {
            id: makeFinalNodeId_('group'),
            type: 'group',
            layers: layers
          });
        } else {
          return null;
        }
      }
    };

    var docElContext = {};
    var width = lengthPx_(doc.documentElement.width);
    var height = lengthPx_(doc.documentElement.height);

    if (doc.documentElement.viewBox) {
      width = doc.documentElement.viewBox.baseVal.width;
      height = doc.documentElement.viewBox.baseVal.height;

      // fake a translate transform for the viewbox
      docElContext.transforms = [{
        matrix: {
          a: 1,
          b: 0,
          c: 0,
          d: 1,
          e: -doc.documentElement.viewBox.baseVal.x,
          f: -doc.documentElement.viewBox.baseVal.y
        }
      }];
    }

    var rootLayer = nodeToLayerData_(doc.documentElement, docElContext);

    var artwork = {
      width: width,
      height: height,
      layers: (rootLayer ? rootLayer.layers : null) || [],
      alpha: doc.documentElement.getAttribute('opacity') || 1
    };

    return new _model.Artwork(artwork);
  }
};

function lengthPx_(svgLength) {
  if (svgLength.baseVal) {
    svgLength = svgLength.baseVal;
  }
  svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
  return svgLength.valueInSpecifiedUnits;
}

},{"./ColorUtil":15,"./ModelUtil":19,"./SvgPathData":22,"./model":35,"./model/properties":44}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SvgPathData = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2016 Google Inc.

icensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _bezierJs = require('bezier-js');

var _bezierJs2 = _interopRequireDefault(_bezierJs);

var _MathUtil = require('./MathUtil');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SvgPathData = exports.SvgPathData = function () {
  function SvgPathData(obj) {
    _classCallCheck(this, SvgPathData);

    this.length = 0;
    this.bounds = null;
    this.subPaths = [];

    if (obj) {
      if (typeof obj == 'string') {
        this.pathString = obj;
      } else if (Array.isArray(obj)) {
        this.commands = obj;
      } else if (obj instanceof SvgPathData) {
        this.pathString = obj.pathString;
      }
    }
  }

  _createClass(SvgPathData, [{
    key: 'toString',
    value: function toString() {
      return this.pathString;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.pathString;
    }
  }, {
    key: 'execute',
    value: function execute(ctx) {
      ctx.beginPath();
      this.commands_.forEach(function (_ref) {
        var command = _ref.command,
            args = _ref.args;

        if (command == '__arc__') {
          executeArc_(ctx, args);
        } else {
          ctx[command].apply(ctx, _toConsumableArray(args));
        }
      });
    }

    // executes the path, possibly trimming it
    // (if actually trimming, draws only using beziers)

  }, {
    key: 'executeTrimmed',
    value: function executeTrimmed(ctx) {
      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var beginPath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

      if (start === end) {
        return;
      }

      if (start === 0 && end === 1 && offset === 0) {
        this.execute(ctx);
        return;
      }

      start += offset;
      if (start > 1) {
        start = (start % 1 + 1) % 1; // double modulo to stay positive
      }
      end += offset;
      if (end > 1) {
        end = (end % 1 + 1) % 1;
      }

      if (beginPath) {
        ctx.beginPath();
      }

      if (start > end) {
        // wrap around
        this.executeTrimmed(ctx, 0, end, 0, false);
        this.executeTrimmed(ctx, start, 1, 0, false);
        return;
      }

      // start guaranteed to be before end

      if (!this.subPaths.length) {
        return;
      }

      // NOTE: don't support trimming multiple subpaths to match android behavior
      // https://code.google.com/p/android/issues/detail?id=172547
      var firstSubPath = this.subPaths[0];
      var length = firstSubPath.reduce(function (l, subPath) {
        return l + subPath.length;
      }, 0);
      if (!length) {
        return;
      }

      // compute the string of beziers (possibly split) that make up the
      // path from start to end
      var beziers = [];
      var lengthCovered = 0;
      var started = false;
      var ended = false;
      firstSubPath.forEach(function (segment) {
        var segStart = lengthCovered / length;
        var segEnd = (segment.length + lengthCovered) / length;
        if (!started) {
          if (start < segEnd) {
            started = true;
            var splitStart = _MathUtil.MathUtil.progress(start, segStart, segEnd);
            if (end < segEnd) {
              ended = true;
              var splitEnd = _MathUtil.MathUtil.progress(end, segStart, segEnd);
              beziers.push(segment.bezier.split(tForBezierDistance_(segment, splitStart), tForBezierDistance_(segment, splitEnd)));
            } else {
              beziers.push(segment.bezier.split(tForBezierDistance_(segment, splitStart)).right);
            }
          }
        } else if (!ended) {
          if (end < segEnd) {
            ended = true;
            var _splitEnd = _MathUtil.MathUtil.progress(end, segStart, segEnd);
            beziers.push(segment.bezier.split(tForBezierDistance_(segment, _splitEnd)).left);
          } else {
            beziers.push(segment.bezier);
          }
        }
        lengthCovered += segment.length;
      });

      // draw the beziers just computed
      if (beziers.length) {
        ctx.moveTo(beziers[0].points[0].x, beziers[0].points[0].y);
        beziers.forEach(function (bez) {
          if (bez.points.length == 4) {
            ctx.bezierCurveTo(bez.points[1].x, bez.points[1].y, bez.points[2].x, bez.points[2].y, bez.points[3].x, bez.points[3].y);
          } else if (bez.points.length == 3) {
            ctx.quadraticCurveTo(bez.points[1].x, bez.points[1].y, bez.points[2].x, bez.points[2].y);
          }
        });
      }
    }
  }, {
    key: 'hitTestStroke',
    value: function hitTestStroke(point, pointTransformerFn, strokeWidth) {
      // If the shortest distance from the point to the path is less than half
      // the stroke width, then select the path.
      return this.subPaths.reduce(function (all, subPath) {
        return all.concat(subPath);
      }, []).map(function (segment) {
        return segment.bezier;
      }).map(function (bez) {
        return new _bezierJs2.default(bez.points.map(function (p) {
          return pointTransformerFn(p);
        }));
      }).map(function (bez) {
        return bez.project(point);
      }).reduce(function (proj, min) {
        return proj.d < min.d ? proj : min;
      }).d <= strokeWidth / 2;
    }
  }, {
    key: 'hitTestFill',
    value: function hitTestFill(point, pointTransformerFn) {
      // We use the 'even-odd rule' to determine if the filled path is selected.
      // We create a line from the mouse point to a point we know that is not
      // inside the path (in this case, we use a coordinate outside the path's
      // bounded box). The path should be selected if and only if the number of =
      // intersections between the line and the path is odd.
      var line = {
        p1: point,
        p2: {
          x: this.bounds.r + 1,
          y: this.bounds.b + 1
        }
      };
      return this.subPaths.reduce(function (all, subPath) {
        return all.concat(subPath);
      }, []).map(function (segment) {
        return segment.bezier;
      }).map(function (bez) {
        return new _bezierJs2.default(bez.points.map(function (p) {
          return pointTransformerFn(p);
        }));
      }).map(function (bez) {
        return bez.intersects(line).length;
      }).reduce(function (l, sum) {
        return sum + l;
      }) % 2 != 0;
    }
  }, {
    key: 'transform',
    value: function transform(transforms) {
      this.commands_.forEach(function (_ref2) {
        var command = _ref2.command,
            args = _ref2.args;

        if (command == '__arc__') {
          var start = transformPoint_({ x: args[0], y: args[1] }, transforms);
          args[0] = start.x;
          args[1] = start.y;
          var arc = transformArc_({
            rx: args[2],
            ry: args[3],
            xAxisRotation: args[4],
            largeArcFlag: args[5],
            sweepFlag: args[6],
            endX: args[7],
            endY: args[8]
          }, transforms);
          args[2] = arc.rx;
          args[3] = arc.ry;
          args[4] = arc.xAxisRotation;
          args[5] = arc.largeArcFlag;
          args[6] = arc.sweepFlag;
          args[7] = arc.endX;
          args[8] = arc.endY;
          return;
        }

        for (var i = 0; i < args.length; i += 2) {
          var transformed = transformPoint_({ x: args[i], y: args[i + 1] }, transforms);
          args[i] = transformed.x;
          args[i + 1] = transformed.y;
        }
      });

      this.string_ = commandsToString_(this.commands_);

      var _makePathComputations = makePathComputations_(this.commands_),
          length = _makePathComputations.length,
          bounds = _makePathComputations.bounds,
          subPaths = _makePathComputations.subPaths;

      this.length = length;
      this.bounds = bounds;
      this.subPaths = subPaths;
    }
  }, {
    key: 'pathString',
    get: function get() {
      return this.string_ || '';
    },
    set: function set(value) {
      this.string_ = value;
      var commands = parseCommands_(value);
      this.commands_ = commands;

      var _makePathComputations2 = makePathComputations_(this.commands_),
          length = _makePathComputations2.length,
          bounds = _makePathComputations2.bounds,
          subPaths = _makePathComputations2.subPaths;

      this.length = length;
      this.bounds = bounds;
      this.subPaths = subPaths;
    }
  }, {
    key: 'commands',
    get: function get() {
      return this.commands_;
    },
    set: function set(value) {
      this.commands_ = value ? value.slice() : [];
      this.string_ = commandsToString_(this.commands_);

      var _makePathComputations3 = makePathComputations_(this.commands_),
          length = _makePathComputations3.length,
          bounds = _makePathComputations3.bounds,
          subPaths = _makePathComputations3.subPaths;

      this.length = length;
      this.bounds = bounds;
      this.subPaths = subPaths;
    }
  }], [{
    key: 'interpolate',
    value: function interpolate(start, end, f) {
      if (!end || !start || !end.commands || !start.commands || end.commands.length != start.commands.length) {
        // TODO: show a warning
        return [];
      }

      var interpolatedCommands = [];

      var i = void 0,
          j = void 0;
      for (i = 0; i < start.commands.length; i++) {
        var si = start.commands[i],
            ei = end.commands[i];
        if (!ei.args || !si.args || ei.args.length != si.args.length) {
          console.warn('Incompatible path interpolation');
          return [];
        }

        var interpolatedArgs = [];
        for (j = 0; j < si.args.length; j++) {
          interpolatedArgs.push(simpleInterpolate_(si.args[j], ei.args[j], f));
        }

        interpolatedCommands.push({
          command: si.command,
          args: interpolatedArgs
        });
      }

      return new SvgPathData(interpolatedCommands);
    }
  }]);

  return SvgPathData;
}();

var simpleInterpolate_ = function simpleInterpolate_(start, end, f) {
  return start + (end - start) * f;
};

var TOKEN_ABSOLUTE_COMMAND = 1;
var TOKEN_RELATIVE_COMMAND = 2;
var TOKEN_VALUE = 3;
var TOKEN_EOF = 4;

function parseCommands_(pathString) {
  var commands = [];
  var pushCommandComplex_ = function pushCommandComplex_(command) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return commands.push({ command: command, args: args });
  };
  var pushCommandPoints_ = function pushCommandPoints_(command) {
    for (var _len2 = arguments.length, points = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      points[_key2 - 1] = arguments[_key2];
    }

    return commands.push({
      command: command, args: points.reduce(function (arr, point) {
        return arr.concat(point.x, point.y);
      }, []) });
  };

  var currentPoint = { x: NaN, y: NaN };
  var currentControlPoint = null; // used for S and T commands
  var index = 0;
  var length = pathString.length;

  var tempPoint1 = { x: 0, y: 0 };
  var tempPoint2 = { x: 0, y: 0 };
  var tempPoint3 = { x: 0, y: 0 };

  var firstMove = true;
  var currentToken = void 0;

  var advanceToNextToken_ = function advanceToNextToken_() {
    while (index < length) {
      var c = pathString.charAt(index);
      if ('a' <= c && c <= 'z') {
        return currentToken = TOKEN_RELATIVE_COMMAND;
      } else if ('A' <= c && c <= 'Z') {
        return currentToken = TOKEN_ABSOLUTE_COMMAND;
      } else if ('0' <= c && c <= '9' || c == '.' || c == '-') {
        return currentToken = TOKEN_VALUE;
      }

      // skip unrecognized character
      ++index;
    }

    return currentToken = TOKEN_EOF;
  };

  var consumeCommand_ = function consumeCommand_() {
    advanceToNextToken_();
    if (currentToken !== TOKEN_RELATIVE_COMMAND && currentToken !== TOKEN_ABSOLUTE_COMMAND) {
      throw new Error('Expected command');
    }

    return pathString.charAt(index++);
  };

  var consumePoint_ = function consumePoint_(out, relative) {
    out.x = consumeValue_();
    out.y = consumeValue_();
    if (relative) {
      out.x += currentPoint.x;
      out.y += currentPoint.y;
    }
  };

  var consumeValue_ = function consumeValue_() {
    advanceToNextToken_();
    if (currentToken !== TOKEN_VALUE) {
      throw new Error('Expected value');
    }

    var start = true;
    var seenDot = false;
    var tempIndex = index;
    while (tempIndex < length) {
      var c = pathString.charAt(tempIndex);

      if (!('0' <= c && c <= '9') && (c != '.' || seenDot) && (c != '-' || !start) && c != 'e') {
        // end of value
        break;
      }

      if (c == '.') {
        seenDot = true;
      }

      start = false;
      if (c == 'e') {
        start = true;
      }
      ++tempIndex;
    }

    if (tempIndex == index) {
      throw new Error('Expected value');
    }

    var str = pathString.substring(index, tempIndex);
    index = tempIndex;
    return parseFloat(str);
  };

  while (index < length) {
    var command = consumeCommand_();
    var relative = currentToken === TOKEN_RELATIVE_COMMAND;

    switch (command) {
      case 'M':
      case 'm':
        {
          // move command
          var firstPoint = true;
          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative && !isNaN(currentPoint.x));
            if (firstPoint) {
              pushCommandPoints_('moveTo', tempPoint1);
              firstPoint = false;
              if (firstMove) {
                currentPoint = Object.assign({}, tempPoint1);
                firstMove = false;
              }
            } else {
              pushCommandPoints_('lineTo', tempPoint1);
            }
          }

          currentControlPoint = null;
          currentPoint = Object.assign({}, tempPoint1);
          break;
        }

      case 'C':
      case 'c':
        {
          // cubic curve command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative);
            consumePoint_(tempPoint2, relative);
            consumePoint_(tempPoint3, relative);
            pushCommandPoints_('bezierCurveTo', tempPoint1, tempPoint2, tempPoint3);

            currentControlPoint = Object.assign({}, tempPoint2);
            currentPoint = Object.assign({}, tempPoint3);
          }

          break;
        }

      case 'S':
      case 's':
        {
          // cubic curve command (string of curves)
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative);
            consumePoint_(tempPoint2, relative);
            if (currentControlPoint) {
              tempPoint3.x = currentPoint.x + (currentPoint.x - currentControlPoint.x);
              tempPoint3.y = currentPoint.y + (currentPoint.y - currentControlPoint.y);
            } else {
              Object.assign(tempPoint3, tempPoint1);
            }
            pushCommandPoints_('bezierCurveTo', tempPoint3, tempPoint1, tempPoint2);

            currentControlPoint = Object.assign({}, tempPoint1);
            currentPoint = Object.assign({}, tempPoint2);
          }

          break;
        }

      case 'Q':
      case 'q':
        {
          // quadratic curve command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative);
            consumePoint_(tempPoint2, relative);
            pushCommandPoints_('quadraticCurveTo', tempPoint1, tempPoint2);

            currentControlPoint = Object.assign({}, tempPoint1);
            currentPoint = Object.assign({}, tempPoint2);
          }

          break;
        }

      case 'T':
      case 't':
        {
          // quadratic curve command (string of curves)
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative);
            if (currentControlPoint) {
              tempPoint2.x = currentPoint.x + (currentPoint.x - currentControlPoint.x);
              tempPoint2.y = currentPoint.y + (currentPoint.y - currentControlPoint.y);
            } else {
              Object.assign(tempPoint2, tempPoint1);
            }
            pushCommandPoints_('quadraticCurveTo', tempPoint2, tempPoint1);

            currentControlPoint = Object.assign({}, tempPoint2);
            currentPoint = Object.assign({}, tempPoint1);
          }

          break;
        }

      case 'L':
      case 'l':
        {
          // line command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            consumePoint_(tempPoint1, relative);
            pushCommandPoints_('lineTo', tempPoint1);

            currentControlPoint = null;
            currentPoint = Object.assign({}, tempPoint1);
          }

          break;
        }

      case 'H':
      case 'h':
        {
          // horizontal line command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            tempPoint1.x = consumeValue_();
            tempPoint1.y = currentPoint.y;
            if (relative) {
              tempPoint1.x += currentPoint.x;
            }

            pushCommandPoints_('lineTo', tempPoint1);

            currentControlPoint = null;
            currentPoint = Object.assign({}, tempPoint1);
          }
          break;
        }

      case 'A':
      case 'a':
        {
          // arc command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            var rx = consumeValue_();
            var ry = consumeValue_();
            var xAxisRotation = consumeValue_();
            var largeArcFlag = consumeValue_();
            var sweepFlag = consumeValue_();
            consumePoint_(tempPoint1, relative);

            pushCommandComplex_('__arc__', currentPoint.x, currentPoint.y, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, tempPoint1.x, tempPoint1.y);

            // pp.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);
            // pp.addMarkerAngle(tempPoint1, ah - dir * Math.PI);

            currentControlPoint = null;
            currentPoint = Object.assign({}, tempPoint1);
          }
          break;
        }

      case 'V':
      case 'v':
        {
          // vertical line command
          if (isNaN(currentPoint.x)) {
            throw new Error('Relative commands require current point');
          }

          while (advanceToNextToken_() === TOKEN_VALUE) {
            tempPoint1.y = consumeValue_();
            tempPoint1.x = currentPoint.x;
            if (relative) {
              tempPoint1.y += currentPoint.y;
            }
            pushCommandPoints_('lineTo', tempPoint1);

            currentControlPoint = null;
            currentPoint = Object.assign({}, tempPoint1);
          }
          break;
        }

      case 'Z':
      case 'z':
        {
          // close command
          pushCommandPoints_('closePath');
          break;
        }
    }
  }

  return commands;
}

function commandsToString_(commands) {
  var tokens = [];
  commands.forEach(function (_ref3) {
    var command = _ref3.command,
        args = _ref3.args;

    if (command == '__arc__') {
      tokens.push('A');
      tokens.splice(tokens.length, 0, args.slice(2)); // skip first two arc args
      return;
    }

    switch (command) {
      case 'moveTo':
        tokens.push('M');break;
      case 'lineTo':
        tokens.push('L');break;
      case 'bezierCurveTo':
        tokens.push('C');break;
      case 'quadraticCurveTo':
        tokens.push('Q');break;
      case 'closePath':
        tokens.push('Z');break;
    }

    tokens.splice.apply(tokens, [tokens.length, 0].concat(_toConsumableArray(args.map(function (arg) {
      return Number(arg.toFixed(3)).toString();
    }))));
  });

  return tokens.join(' ');
}

function executeArc_(ctx, arcArgs) {
  var _arcArgs = _slicedToArray(arcArgs, 9),
      currentPointX = _arcArgs[0],
      currentPointY = _arcArgs[1],
      rx = _arcArgs[2],
      ry = _arcArgs[3],
      xAxisRotation = _arcArgs[4],
      largeArcFlag = _arcArgs[5],
      sweepFlag = _arcArgs[6],
      tempPoint1X = _arcArgs[7],
      tempPoint1Y = _arcArgs[8];

  if (currentPointX == tempPoint1X && currentPointY == tempPoint1Y) {
    // degenerate to point
    return;
  }

  if (rx == 0 || ry == 0) {
    // degenerate to line
    ctx.lineTo(tempPoint1X, tempPoint1Y);
    return;
  }

  var bezierCoords = arcToBeziers_(currentPointX, currentPointY, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, tempPoint1X, tempPoint1Y);

  for (var i = 0; i < bezierCoords.length; i += 8) {
    ctx.bezierCurveTo(bezierCoords[i + 2], bezierCoords[i + 3], bezierCoords[i + 4], bezierCoords[i + 5], bezierCoords[i + 6], bezierCoords[i + 7]);
  }
}

// maps a distance along the curve to the bezier parameter space (t)
function tForBezierDistance_(_ref4, f) {
  var lut = _ref4.lut,
      length = _ref4.length;

  var targetDist = f * length;
  for (var i = 0; i < lut.length - 1; i++) {
    var p1 = lut[i];
    var p2 = lut[i + 1];
    var dist = _MathUtil.MathUtil.dist(p1.x, p1.y, p2.x, p2.y);
    if (!dist) {
      continue;
    }

    if (targetDist <= dist) {
      f = targetDist / dist;
      return (i + f) / (lut.length - 1);
    }

    targetDist -= dist;
  }

  return 1;
}

function makePathComputations_(commands) {
  var length = 0;
  var bounds = { l: Infinity, t: Infinity, r: -Infinity, b: -Infinity };
  var currentSubPath = null;
  var subPaths = [];

  var pushBezier_ = function pushBezier_(bezier) {
    currentSubPath.push({
      bezier: bezier,
      lut: bezier.getLUT(100),
      length: bezier.length()
    });
  };

  var expandBounds_ = function expandBounds_(x, y) {
    bounds.l = Math.min(x, bounds.l);
    bounds.t = Math.min(y, bounds.t);
    bounds.r = Math.max(x, bounds.r);
    bounds.b = Math.max(y, bounds.b);
  };

  var expandBoundsToBezier_ = function expandBoundsToBezier_(bez) {
    var bbox = bez.bbox();
    expandBounds_(bbox.x.min, bbox.y.min);
    expandBounds_(bbox.x.max, bbox.y.min);
    expandBounds_(bbox.x.min, bbox.y.max);
    expandBounds_(bbox.x.max, bbox.y.max);
  };

  var lastMovePoint = null;
  var currentPoint = { x: 0, y: 0 };

  commands.forEach(function (_ref5) {
    var command = _ref5.command,
        args = _ref5.args;

    switch (command) {
      case 'moveTo':
        {
          // start new sub-path
          currentSubPath = [];
          subPaths.push(currentSubPath);
          lastMovePoint = { x: args[0], y: args[1] };
          currentPoint.x = args[0];
          currentPoint.y = args[1];
          expandBounds_(args[0], args[1]);
          break;
        }

      case 'lineTo':
        {
          length += _MathUtil.MathUtil.dist(args[0], args[1], currentPoint.x, currentPoint.y);
          pushBezier_(new _bezierJs2.default(currentPoint.x, currentPoint.y, args[0], args[1], args[0], args[1]));
          currentPoint.x = args[0];
          currentPoint.y = args[1];
          expandBounds_(args[0], args[1]);
          break;
        }

      case 'closePath':
        {
          if (lastMovePoint) {
            length += _MathUtil.MathUtil.dist(lastMovePoint.x, lastMovePoint.y, currentPoint.x, currentPoint.y);
            pushBezier_(new _bezierJs2.default(currentPoint.x, currentPoint.y, lastMovePoint.x, lastMovePoint.y, lastMovePoint.x, lastMovePoint.y));
            currentPoint.x = lastMovePoint.x;
            currentPoint.y = lastMovePoint.y;
          }
          break;
        }

      case 'bezierCurveTo':
        {
          var bez = new _bezierJs2.default(currentPoint.x, currentPoint.y, args[0], args[1], args[2], args[3], args[4], args[5]);
          length += bez.length();
          currentPoint.x = args[4];
          currentPoint.y = args[5];
          pushBezier_(bez);
          expandBoundsToBezier_(bez);
          break;
        }

      case 'quadraticCurveTo':
        {
          var _bez = new _bezierJs2.default(currentPoint.x, currentPoint.y, args[0], args[1], args[2], args[3]);
          length += _bez.length();
          currentPoint.x = args[2];
          currentPoint.y = args[3];
          pushBezier_(_bez);
          expandBoundsToBezier_(_bez);
          break;
        }

      case '__arc__':
        {
          var _args = _slicedToArray(args, 9),
              currentPointX = _args[0],
              currentPointY = _args[1],
              rx = _args[2],
              ry = _args[3],
              xAxisRotation = _args[4],
              largeArcFlag = _args[5],
              sweepFlag = _args[6],
              tempPoint1X = _args[7],
              tempPoint1Y = _args[8];

          if (currentPointX == tempPoint1X && currentPointY == tempPoint1Y) {
            // degenerate to point (0 length)
            break;
          }

          if (rx == 0 || ry == 0) {
            // degenerate to line
            length += _MathUtil.MathUtil.dist(currentPointX, currentPointY, tempPoint1X, tempPoint1Y);
            expandBounds_(tempPoint1X, tempPoint1Y);
            currentPoint.x = tempPoint1X;
            currentPoint.y = tempPoint1Y;
            return;
          }

          var bezierCoords = arcToBeziers_(currentPointX, currentPointY, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, tempPoint1X, tempPoint1Y);

          for (var i = 0; i < bezierCoords.length; i += 8) {
            var _bez2 = new _bezierJs2.default(currentPoint.x, currentPoint.y, bezierCoords[i + 2], bezierCoords[i + 3], bezierCoords[i + 4], bezierCoords[i + 5], bezierCoords[i + 6], bezierCoords[i + 7]);
            length += _bez2.length();
            currentPoint.x = bezierCoords[i + 6];
            currentPoint.y = bezierCoords[i + 7];
            expandBoundsToBezier_(_bez2);
            pushBezier_(_bez2);
          }
          currentPoint.x = tempPoint1X;
          currentPoint.y = tempPoint1Y;
          break;
        }
    }
  });

  return { length: length, bounds: bounds, subPaths: subPaths };
}

// Based on code from https://code.google.com/archive/p/androidsvg
function arcToBeziers_(xf, yf, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, xt, yt) {
  // Sign of the radii is ignored (behaviour specified by the spec)
  rx = Math.abs(rx);
  ry = Math.abs(ry);

  var rotate = xAxisRotation * Math.PI / 180;
  var cosAngle = Math.cos(rotate);
  var sinAngle = Math.sin(rotate);

  // We simplify the calculations by transforming the arc so that the origin is at the
  // midpoint calculated above followed by a rotation to line up the coordinate axes
  // with the axes of the ellipse.

  // Compute the midpoint of the line between the current and the end point
  var dx2 = (xf - xt) / 2;
  var dy2 = (yf - yt) / 2;

  // Step 1 : Compute (x1', y1') - the transformed start point
  var x1 = cosAngle * dx2 + sinAngle * dy2;
  var y1 = -sinAngle * dx2 + cosAngle * dy2;

  var rx_sq = rx * rx;
  var ry_sq = ry * ry;
  var x1_sq = x1 * x1;
  var y1_sq = y1 * y1;

  // Check that radii are large enough.
  // If they are not, the spec says to scale them up so they are.
  // This is to compensate for potential rounding errors/differences between SVG implementations.
  var radiiCheck = x1_sq / rx_sq + y1_sq / ry_sq;
  if (radiiCheck > 1) {
    rx = Math.sqrt(radiiCheck) * rx;
    ry = Math.sqrt(radiiCheck) * ry;
    rx_sq = rx * rx;
    ry_sq = ry * ry;
  }

  // Step 2 : Compute (cx1, cy1) - the transformed centre point
  var sign = largeArcFlag == sweepFlag ? -1 : 1;
  var sq = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);
  sq = sq < 0 ? 0 : sq;
  var coef = sign * Math.sqrt(sq);
  var cx1 = coef * (rx * y1 / ry);
  var cy1 = coef * -(ry * x1 / rx);

  // Step 3 : Compute (cx, cy) from (cx1, cy1)
  var sx2 = (xf + xt) / 2;
  var sy2 = (yf + yt) / 2;
  var cx = sx2 + (cosAngle * cx1 - sinAngle * cy1);
  var cy = sy2 + (sinAngle * cx1 + cosAngle * cy1);

  // Step 4 : Compute the angleStart (angle1) and the angleExtent (dangle)
  var ux = (x1 - cx1) / rx;
  var uy = (y1 - cy1) / ry;
  var vx = (-x1 - cx1) / rx;
  var vy = (-y1 - cy1) / ry;
  var p = void 0,
      n = void 0;

  // Compute the angle start
  n = Math.sqrt(ux * ux + uy * uy);
  p = ux; // (1 * ux) + (0 * uy)
  sign = uy < 0 ? -1 : 1;
  var angleStart = sign * Math.acos(p / n) * 180 / Math.PI;

  // Compute the angle extent
  n = Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));
  p = ux * vx + uy * vy;
  sign = ux * vy - uy * vx < 0 ? -1 : 1;
  var angleExtent = sign * Math.acos(p / n) * 180 / Math.PI;
  if (!sweepFlag && angleExtent > 0) {
    angleExtent -= 360;
  } else if (sweepFlag && angleExtent < 0) {
    angleExtent += 360;
  }

  angleExtent %= 360;
  angleStart %= 360;

  // Many elliptical arc implementations including the Java2D and Android ones, only
  // support arcs that are axis aligned.  Therefore we need to substitute the arc
  // with bezier curves.  The following method call will generate the beziers for
  // a unit circle that covers the arc angles we want.
  var bezierCoords = unitCircleArcToBeziers_(angleStart, angleExtent);

  // Calculate a transformation matrix that will move and scale these bezier points to the correct location.
  // translate(cx, cy) --> rotate(rotate) --> scale(rx, ry)
  for (var i = 0; i < bezierCoords.length; i += 2) {
    // dot product
    var x = bezierCoords[i];
    var y = bezierCoords[i + 1];
    bezierCoords[i] = cosAngle * rx * x + -sinAngle * ry * y + cx;

    bezierCoords[i + 1] = sinAngle * rx * x + cosAngle * ry * y + cy;
  }

  // The last point in the bezier set should match exactly the last coord pair in the arc (ie: x,y). But
  // considering all the mathematical manipulation we have been doing, it is bound to be off by a tiny
  // fraction. Experiments show that it can be up to around 0.00002.  So why don't we just set it to
  // exactly what it ought to be.
  bezierCoords[bezierCoords.length - 2] = xt;
  bezierCoords[bezierCoords.length - 1] = yt;
  return bezierCoords;
}

/*
* Generate the control points and endpoints for a set of bezier curves that match
* a circular arc starting from angle 'angleStart' and sweep the angle 'angleExtent'.
* The circle the arc follows will be centred on (0,0) and have a radius of 1.0.
*
* Each bezier can cover no more than 90 degrees, so the arc will be divided evenly
* into a maximum of four curves.
*
* The resulting control points will later be scaled and rotated to match the final
* arc required.
*
* The returned array has the format [x0,y0, x1,y1,...].
*/
function unitCircleArcToBeziers_(angleStart, angleExtent) {
  var numSegments = Math.ceil(Math.abs(angleExtent) / 90);

  angleStart = angleStart * Math.PI / 180;
  angleExtent = angleExtent * Math.PI / 180;

  var angleIncrement = angleExtent / numSegments;

  // The length of each control point vector is given by the following formula.
  var controlLength = 4 / 3 * Math.sin(angleIncrement / 2) / (1 + Math.cos(angleIncrement / 2));

  var coords = new Array(numSegments * 8);
  var pos = 0;

  for (var i = 0; i < numSegments; i++) {
    var angle = angleStart + i * angleIncrement;

    // Calculate the control vector at this angle
    var dx = Math.cos(angle);
    var dy = Math.sin(angle);

    // First point
    coords[pos++] = dx;
    coords[pos++] = dy;

    // First control point
    coords[pos++] = dx - controlLength * dy;
    coords[pos++] = dy + controlLength * dx;

    // Second control point
    angle += angleIncrement;
    dx = Math.cos(angle);
    dy = Math.sin(angle);

    coords[pos++] = dx + controlLength * dy;
    coords[pos++] = dy - controlLength * dx;

    // Endpoint of bezier
    coords[pos++] = dx;
    coords[pos++] = dy;
  }

  return coords;
}

// TODO: refactor into a MatrixUtil
function transformPoint_(p, transformMatricies) {
  return transformMatricies.reduce(function (p, transform) {
    var m = transform.matrix;
    return {
      // dot product
      x: m.a * p.x + m.c * p.y + m.e * 1,
      y: m.b * p.x + m.d * p.y + m.f * 1
    };
  }, p);
}

// Code adapted from here:
// https://gist.github.com/alexjlockwood/c037140879806fb4d9820b7e70195494#file-flatten-js-L441-L547
function transformArc_(initialArc, transformMatricies) {
  var isNearZero = function isNearZero(n) {
    return Math.abs(n) < 0.0000000000000001;
  };
  return transformMatricies.reduce(function (arc, transform) {
    var rx = arc.rx,
        ry = arc.ry,
        xAxisRotation = arc.xAxisRotation,
        largeArcFlag = arc.largeArcFlag,
        sweepFlag = arc.sweepFlag,
        endX = arc.endX,
        endY = arc.endY;


    xAxisRotation = xAxisRotation * Math.PI / 180;

    var s = parseFloat(Math.sin(xAxisRotation));
    var c = parseFloat(Math.cos(xAxisRotation));

    // Matrix representation of transformed ellipse.
    var m = [];

    // Build ellipse representation matrix (unit circle transformation).
    // The 2x2 matrix multiplication with the upper 2x2 of a_mat is inlined.
    var matrix = transform.matrix;
    m[0] = matrix.a * +rx * c + matrix.c * rx * s;
    m[1] = matrix.b * +rx * c + matrix.d * rx * s;
    m[2] = matrix.a * -ry * s + matrix.c * ry * c;
    m[3] = matrix.b * -ry * s + matrix.d * ry * c;

    // To implict equation (centered).
    var A = m[0] * m[0] + m[2] * m[2];
    var C = m[1] * m[1] + m[3] * m[3];
    var B = (m[0] * m[1] + m[2] * m[3]) * 2.0;

    // Precalculate distance A to C.
    var ac = A - C;

    // Convert implicit equation to angle and halfaxis.
    var A2 = void 0,
        C2 = void 0;
    if (isNearZero(B)) {
      xAxisRotation = 0;
      A2 = A;
      C2 = C;
    } else {
      if (isNearZero(ac)) {
        A2 = A + B * 0.5;
        C2 = A - B * 0.5;
        xAxisRotation = Math.PI / 4.0;
      } else {
        // Precalculate radical.
        var K = 1 + B * B / (ac * ac);

        // Clamp (precision issues might need this... not likely, but better safe than sorry).
        K = K < 0 ? 0 : Math.sqrt(K);

        A2 = 0.5 * (A + C + K * ac);
        C2 = 0.5 * (A + C - K * ac);
        xAxisRotation = 0.5 * Math.atan2(B, ac);
      }
    }

    // This can get slightly below zero due to rounding issues.
    // It's safe to clamp to zero in this case (this yields a zero length halfaxis).
    A2 = A2 < 0 ? 0 : Math.sqrt(A2);
    C2 = C2 < 0 ? 0 : Math.sqrt(C2);

    // Now A2 and C2 are half-axis.
    if (ac <= 0) {
      ry = A2;
      rx = C2;
    } else {
      ry = C2;
      rx = A2;
    }

    // If the transformation matrix contain a mirror-component
    // winding order of the ellise needs to be changed.
    if (matrix.a * matrix.d - matrix.b * matrix.c < 0) {
      sweepFlag = sweepFlag ? 0 : 1;
    }

    // Finally, transform arc endpoint. This takes care about the
    // translational part which we ignored at the whole math-showdown above.
    var end = transformPoint_({ x: endX, y: endY }, [transform]);

    xAxisRotation = xAxisRotation * 180 / Math.PI;

    return {
      rx: rx,
      ry: ry,
      xAxisRotation: xAxisRotation,
      largeArcFlag: largeArcFlag,
      sweepFlag: sweepFlag,
      endX: end.x,
      endY: end.y
    };
  }, initialArc);
}

},{"./MathUtil":18,"bezier-js":48}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var UiUtil = exports.UiUtil = {
  waitForElementWidth_: function waitForElementWidth_(el) {
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;

    var start = Number(new Date());
    var $el = $(el);
    return new Promise(function (resolve, reject) {
      var tryResolve_ = function tryResolve_() {
        if (Number(new Date()) - start > timeout) {
          reject();
          return;
        }

        var width = $el.width();
        if (width) {
          resolve(width);
        } else {
          setTimeout(function () {
            return tryResolve_();
          }, 0);
        }
      };

      tryResolve_();
    });
  }
};

},{}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VectorDrawableLoader = undefined;

var _model = require('./model');

var _properties = require('./model/properties');

var _ModelUtil = require('./ModelUtil');

var VectorDrawableLoader = exports.VectorDrawableLoader = {
  loadArtworkFromXmlString: function loadArtworkFromXmlString(xmlString) {
    var parser = new DOMParser();
    var doc = parser.parseFromString(xmlString, 'application/xml');

    var usedIds = {};

    var nodeToLayerData_ = function nodeToLayerData_(node) {
      if (!node) {
        return null;
      }
      if (node.nodeType == Node.TEXT_NODE || node.nodeType == Node.COMMENT_NODE) {
        return null;
      }

      var makeFinalNodeId_ = function makeFinalNodeId_(node, typeIdPrefix) {
        var name = node.getAttribute('android:name');
        var finalId = _ModelUtil.ModelUtil.getUniqueId({
          prefix: _properties.IdProperty.sanitize(name || typeIdPrefix),
          objectById: function objectById(id) {
            return usedIds[id];
          }
        });
        usedIds[finalId] = true;
        return finalId;
      };

      var layerData = {};

      if (node.tagName === 'path') {
        return Object.assign(layerData, {
          id: makeFinalNodeId_(node, 'path'),
          pathData: node.getAttribute('android:pathData') || null,
          fillColor: node.getAttribute('android:fillColor') || null,
          fillAlpha: node.getAttribute('android:fillAlpha') || 1,
          strokeColor: node.getAttribute('android:strokeColor') || null,
          strokeAlpha: node.getAttribute('android:strokeAlpha') || 1,
          strokeWidth: node.getAttribute('android:strokeWidth') || 0,
          strokeLinecap: node.getAttribute('android:strokeLineCap') || _model.DefaultValues.LINECAP,
          strokeLinejoin: node.getAttribute('android:strokeLineJoin') || _model.DefaultValues.LINEJOIN,
          strokeMiterLimit: node.getAttribute('android:strokeMiterLimit') || _model.DefaultValues.MITER_LIMIT,
          trimPathStart: node.getAttribute('android:trimPathStart') || 0,
          trimPathEnd: node.getAttribute('android:trimPathEnd') || 1,
          trimPathOffset: node.getAttribute('android:trimPathOffset') || 0
        });
      }

      if (node.childNodes.length) {
        var layers = Array.from(node.childNodes).map(function (child) {
          return nodeToLayerData_(child);
        }).filter(function (layer) {
          return !!layer;
        });
        if (layers && layers.length) {
          // create a group (there are valid children)
          return Object.assign(layerData, {
            id: makeFinalNodeId_(node, 'group'),
            type: 'group',
            rotation: node.getAttribute('android:rotation') || 0,
            scaleX: node.getAttribute('android:scaleX') || 1,
            scaleY: node.getAttribute('android:scaleY') || 1,
            pivotX: node.getAttribute('android:pivotX') || 0,
            pivotY: node.getAttribute('android:pivotY') || 0,
            translateX: node.getAttribute('android:translateX') || 0,
            translateY: node.getAttribute('android:translateY') || 0,
            layers: layers
          });
        } else {
          return null;
        }
      }
    };

    var rootLayer = nodeToLayerData_(doc.documentElement);
    var id = _properties.IdProperty.sanitize(doc.documentElement.getAttribute('android:name') || 'vector');
    usedIds[id] = true;
    var width = doc.documentElement.getAttribute('android:viewportWidth');
    var height = doc.documentElement.getAttribute('android:viewportHeight');
    var alpha = doc.documentElement.getAttribute('android:alpha') || 1;
    var artwork = {
      id: id,
      width: width,
      height: height,
      layers: (rootLayer ? rootLayer.layers : null) || [],
      alpha: alpha
    };
    return new _model.Artwork(artwork);
  }
}; /*
    * Copyright 2016 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */

},{"./ModelUtil":19,"./model":35,"./model/properties":44}],25:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

angular.module('AVDStudio', ['ngMaterial', 'ngRoute']).config(require('./materialtheme')).config(require('./icons')).config(require('./routes').routeConfig);

// core app
angular.module('AVDStudio').controller('AppCtrl', function AppCtrl($scope) {
  _classCallCheck(this, AppCtrl);
});

// all components
require('../components/canvas/canvas-ruler.js');require('../components/canvas/canvas.js');require('../components/filehandlers/filedroptarget.js');require('../components/filehandlers/fileopenhandler.js');require('../components/layertimeline/consts.js');require('../components/layertimeline/layertimeline.js');require('../components/layertimeline/timelinegrid.js');require('../components/propertyinspector/propertyinspector.js');require('../components/scrollgroup/scrollgroup.js');require('../components/splitter/splitter.js');

// all pages
require('../pages/studio/studio.js');require('../pages/studio/studiostate.js');

},{"../components/canvas/canvas-ruler.js":1,"../components/canvas/canvas.js":2,"../components/filehandlers/filedroptarget.js":3,"../components/filehandlers/fileopenhandler.js":4,"../components/layertimeline/consts.js":5,"../components/layertimeline/layertimeline.js":6,"../components/layertimeline/timelinegrid.js":7,"../components/propertyinspector/propertyinspector.js":8,"../components/scrollgroup/scrollgroup.js":9,"../components/splitter/splitter.js":10,"../pages/studio/studio.js":11,"../pages/studio/studiostate.js":12,"./icons":26,"./materialtheme":27,"./routes":45}],26:[function(require,module,exports){
'use strict';

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = function ($mdIconProvider) {
  $mdIconProvider.iconSet('avdstudio', 'images/icons.svg');
};

},{}],27:[function(require,module,exports){
'use strict';

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = function ($mdThemingProvider) {
    $mdThemingProvider.theme('default').primaryPalette('blue').accentPalette('blue');
    $mdThemingProvider.theme('dark').primaryPalette('blue').accentPalette('blue').dark();
    $mdThemingProvider.setDefaultTheme('default');
};

},{}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animation = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

var _AnimationBlock = require('./AnimationBlock');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * An animation represents a collection of layer property tweens for a given artwork.
 */
var Animation = exports.Animation = (_dec = _properties.Property.register([new _properties.IdProperty('id'), new _properties.NumberProperty('duration', { min: 100, max: 60000 })]), _dec(_class = function () {
  function Animation() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Animation);

    this.id = obj.id || null;
    this.blocks = (obj.blocks || []).map(function (obj) {
      return new _AnimationBlock.AnimationBlock(obj);
    });
    this.duration = obj.duration || 100;
  }

  _createClass(Animation, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        id: this.id,
        duration: this.duration,
        blocks: this.blocks.map(function (block) {
          return block.toJSON();
        })
      };
    }
  }, {
    key: 'blocks',
    get: function get() {
      return this.blocks_ || [];
    },
    set: function set(blocks) {
      var _this = this;

      this.blocks_ = blocks;
      this.blocks_.forEach(function (block) {
        return block.parent = _this;
      });
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'animation';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'anim';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'animation';
    }
  }]);

  return Animation;
}()) || _class);

},{"./AnimationBlock":29,"./properties":44}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimationBlock = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _bezierEasing = require('bezier-easing');

var _bezierEasing2 = _interopRequireDefault(_bezierEasing);

var _SvgPathData = require('../SvgPathData');

var _properties = require('./properties');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FAST_OUT_SLOW_IN_EASING = (0, _bezierEasing2.default)(.4, 0, .2, 1);
var FAST_OUT_LINEAR_IN_EASING = (0, _bezierEasing2.default)(.4, 0, 1, 1);
var LINEAR_OUT_SLOW_IN_EASING = (0, _bezierEasing2.default)(0, 0, .2, 1);

var ENUM_INTERPOLATOR_OPTIONS = [{
  value: 'ACCELERATE_DECELERATE',
  label: 'Accelerate/decelerate',
  androidRef: '@android:anim/accelerate_decelerate_interpolator',
  interpolate: function interpolate(f) {
    return Math.cos((f + 1) * Math.PI) / 2.0 + 0.5;
  }
}, {
  value: 'ACCELERATE',
  label: 'Accelerate',
  androidRef: '@android:anim/accelerate_interpolator',
  interpolate: function interpolate(f) {
    return f * f;
  }
}, {
  value: 'DECELERATE',
  label: 'Decelerate',
  androidRef: '@android:anim/decelerate_interpolator',
  interpolate: function interpolate(f) {
    return 1 - (1 - f) * (1 - f);
  }
}, {
  value: 'ANTICIPATE',
  label: 'Anticipate',
  androidRef: '@android:anim/anticipate_interpolator',
  interpolate: function interpolate(f) {
    return f * f * ((2 + 1) * f - 2);
  }
}, {
  value: 'LINEAR',
  label: 'Linear',
  androidRef: '@android:anim/linear_interpolator',
  interpolate: function interpolate(f) {
    return f;
  }
}, {
  value: 'OVERSHOOT',
  label: 'Overshoot',
  androidRef: '@android:anim/overshoot_interpolator',
  interpolate: function interpolate(f) {
    return (f - 1) * (f - 1) * ((2 + 1) * (f - 1) + 2) + 1;
  }
}, {
  value: 'FAST_OUT_SLOW_IN',
  label: 'Fast out, slow in',
  androidRef: '@android:interpolator/fast_out_slow_in',
  interpolate: function interpolate(f) {
    return FAST_OUT_SLOW_IN_EASING(f);
  }
}, {
  value: 'FAST_OUT_LINEAR_IN',
  label: 'Fast out, linear in',
  androidRef: '@android:interpolator/fast_out_linear_in',
  interpolate: function interpolate(f) {
    return FAST_OUT_LINEAR_IN_EASING(f);
  }
}, {
  value: 'LINEAR_OUT_SLOW_IN',
  label: 'Linear out, slow in',
  androidRef: '@android:interpolator/linear_out_slow_in',
  interpolate: function interpolate(f) {
    return LINEAR_OUT_SLOW_IN_EASING(f);
  }
}];

/**
 * An animation block is an individual layer property tween (property animation).
 */
var AnimationBlock = exports.AnimationBlock = (_dec = _properties.Property.register([new _properties.StubProperty('fromValue'), new _properties.StubProperty('toValue'), new _properties.NumberProperty('startTime', { min: 0, integer: true }), new _properties.NumberProperty('endTime', { min: 0, integer: true }), new _properties.EnumProperty('interpolator', ENUM_INTERPOLATOR_OPTIONS, { storeEntireOption: true })]), _dec(_class = function () {
  function AnimationBlock() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AnimationBlock);

    this.layerId = obj.layerId || null;
    this.propertyName = obj.propertyName || null;
    var isPathData = this.propertyName == 'pathData';
    if ('fromValue' in obj) {
      this.fromValue = isPathData ? new _SvgPathData.SvgPathData(obj.fromValue) : obj.fromValue;
    }
    this.toValue = isPathData ? new _SvgPathData.SvgPathData(obj.toValue) : obj.toValue;
    this.startTime = obj.startTime || 0;
    this.endTime = obj.endTime || 0;
    if (this.startTime > this.endTime) {
      var tmp = this.endTime;
      this.endTime = this.startTime;
      this.startTime = tmp;
    }
    this.interpolator = obj.interpolator || 'ACCELERATE_DECELERATE';
  }

  _createClass(AnimationBlock, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        layerId: this.layerId,
        propertyName: this.propertyName,
        fromValue: valueToJson_(this.fromValue),
        toValue: valueToJson_(this.toValue),
        startTime: this.startTime,
        endTime: this.endTime,
        interpolator: this.interpolator.value
      };
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'block';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'block';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'animation_block';
    }
  }]);

  return AnimationBlock;
}()) || _class);


function valueToJson_(val) {
  if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) == 'object' && 'toJSON' in val) {
    return val.toJSON();
  }

  return val;
}

},{"../SvgPathData":22,"./properties":44,"bezier-easing":47}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Artwork = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

var _BaseLayer = require('./BaseLayer');

var _LayerGroup2 = require('./LayerGroup');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An artwork is the root layer group for a vector, defined mostly by
 * a width, height, and its children.
 */
var Artwork = exports.Artwork = (_dec = _properties.Property.register([new _properties.IdProperty('id'), new _properties.ColorProperty('canvasColor'), new _properties.NumberProperty('width', { min: 4, max: 1024, integer: true }), new _properties.NumberProperty('height', { min: 4, max: 1024, integer: true }), new _properties.FractionProperty('alpha', { animatable: true })], { reset: true }), _dec(_class = function (_LayerGroup) {
  _inherits(Artwork, _LayerGroup);

  function Artwork() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Artwork);

    var _this = _possibleConstructorReturn(this, (Artwork.__proto__ || Object.getPrototypeOf(Artwork)).call(this, obj, opts));

    _this.id = _this.id || _this.typeIdPrefix;
    _this.canvasColor = obj.fillColor || null;
    _this.width = obj.width || 100;
    _this.height = obj.height || 100;
    _this.alpha = obj.alpha || 1;
    return _this;
  }

  _createClass(Artwork, [{
    key: 'computeBounds',
    value: function computeBounds() {
      return { l: 0, t: 0, r: this.width, b: this.height };
    }
  }, {
    key: 'findLayerById',
    value: function findLayerById(id) {
      if (this.id === id) {
        return this;
      }
      return _get(Artwork.prototype.__proto__ || Object.getPrototypeOf(Artwork.prototype), 'findLayerById', this).call(this, id);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        id: this.id,
        canvasColor: this.canvasColor,
        width: this.width,
        height: this.height,
        alpha: this.alpha,
        layers: this.layers.map(function (layer) {
          return layer.toJSON();
        })
      };
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'artwork';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'vector';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'artwork';
    }
  }]);

  return Artwork;
}(_LayerGroup2.LayerGroup)) || _class);


_BaseLayer.BaseLayer.LAYER_CLASSES_BY_TYPE['artwork'] = Artwork;

},{"./BaseLayer":31,"./LayerGroup":32,"./properties":44}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseLayer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class for any node in the tree, including path layers, layer groups, and artworks.
 */
var BaseLayer = exports.BaseLayer = (_dec = _properties.Property.register([new _properties.IdProperty('id')]), _dec(_class = function () {
  function BaseLayer() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, BaseLayer);

    this.parent = null;
    this.id = obj.id || null;
    if (opts && opts.linkSelectedState) {
      this.selectedStateLinkedObj_ = obj;
    }

    // meta
    this.visible = 'visible' in obj ? obj.visible : true;
    this.expanded = true;
  }

  _createClass(BaseLayer, [{
    key: 'computeBounds',
    value: function computeBounds() {
      return null;
    }
  }, {
    key: 'getSibling_',
    value: function getSibling_(offs) {
      if (!this.parent || !this.parent.layers) {
        return null;
      }

      var index = this.parent.layers.indexOf(this);
      if (index < 0) {
        return null;
      }

      index += offs;
      if (index < 0 || index >= this.parent.layers.length) {
        return null;
      }

      return this.parent.layers[index];
    }
  }, {
    key: 'remove',
    value: function remove() {
      if (!this.parent || !this.parent.layers) {
        return;
      }

      var index = this.parent.layers.indexOf(this);
      if (index >= 0) {
        this.parent.layers.splice(index, 1);
      }

      this.parent = null;
    }
  }, {
    key: 'walk',
    value: function walk(fn, context) {
      var visit_ = function visit_(layer, context) {
        var childContext = fn(layer, context);
        if (layer.layers) {
          walkLayerGroup_(layer, childContext);
        }
      };

      var walkLayerGroup_ = function walkLayerGroup_(layerGroup, context) {
        layerGroup.layers.forEach(function (layer) {
          return visit_(layer, context);
        });
      };

      visit_(this, context);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        id: this.id,
        type: this.typeString,
        visible: this.visible
      };
    }
  }, {
    key: 'selected',
    get: function get() {
      return this.selectedStateLinkedObj_ ? this.selectedStateLinkedObj_.selected_ : this.selected_;
    }
  }, {
    key: 'previousSibling',
    get: function get() {
      return this.getSibling_(-1);
    }
  }, {
    key: 'nextSibling',
    get: function get() {
      return this.getSibling_(1);
    }
  }], [{
    key: 'load',
    value: function load() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var opts = arguments[1];

      if (obj instanceof BaseLayer) {
        return new obj.constructor(obj, opts);
      }

      return new BaseLayer.LAYER_CLASSES_BY_TYPE[obj.type || 'path'](obj, opts);
    }
  }]);

  return BaseLayer;
}()) || _class);

// filled in by derived classes

BaseLayer.LAYER_CLASSES_BY_TYPE = {};

},{"./properties":44}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerGroup = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

var _BaseLayer2 = require('./BaseLayer');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A group ('folder') containing other layers.
 */
var LayerGroup = exports.LayerGroup = (_dec = _properties.Property.register([new _properties.NumberProperty('rotation', { animatable: true }), new _properties.NumberProperty('scaleX', { animatable: true }), new _properties.NumberProperty('scaleY', { animatable: true }), new _properties.NumberProperty('pivotX', { animatable: true }), new _properties.NumberProperty('pivotY', { animatable: true }), new _properties.NumberProperty('translateX', { animatable: true }), new _properties.NumberProperty('translateY', { animatable: true })]), _dec(_class = function (_BaseLayer) {
  _inherits(LayerGroup, _BaseLayer);

  function LayerGroup() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, LayerGroup);

    var _this = _possibleConstructorReturn(this, (LayerGroup.__proto__ || Object.getPrototypeOf(LayerGroup)).call(this, obj, opts));

    _this.layers = (obj.layers || []).map(function (obj) {
      return _BaseLayer2.BaseLayer.load(obj, opts);
    });
    _this.rotation = obj.rotation || 0;
    _this.scaleX = 'scaleX' in obj ? obj.scaleX : 1;
    _this.scaleY = 'scaleY' in obj ? obj.scaleY : 1;
    _this.pivotX = obj.pivotX || 0;
    _this.pivotY = obj.pivotY || 0;
    _this.translateX = obj.translateX || 0;
    _this.translateY = obj.translateY || 0;

    // meta
    _this.expanded = 'expanded' in obj ? obj.expanded : true;
    return _this;
  }

  _createClass(LayerGroup, [{
    key: 'computeBounds',
    value: function computeBounds() {
      var bounds = null;
      this.layers.forEach(function (child) {
        var childBounds = child.computeBounds();
        if (!childBounds) {
          return;
        }

        if (!bounds) {
          bounds = Object.assign({}, childBounds);
        } else {
          bounds.l = Math.min(childBounds.l, bounds.l);
          bounds.t = Math.min(childBounds.t, bounds.t);
          bounds.r = Math.max(childBounds.r, bounds.r);
          bounds.b = Math.max(childBounds.b, bounds.b);
        }
      });
      return bounds;
    }
  }, {
    key: 'findLayerById',
    value: function findLayerById(id) {
      for (var i = 0; i < this.layers.length; i++) {
        var layer = this.layers[i];
        if (layer.id === id) {
          return layer;
        } else if (layer.findLayerById) {
          layer = layer.findLayerById(id);
          if (layer) {
            return layer;
          }
        }
      }

      return null;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return Object.assign(_get(LayerGroup.prototype.__proto__ || Object.getPrototypeOf(LayerGroup.prototype), 'toJSON', this).call(this), {
        rotation: this.rotation,
        scaleX: this.scaleX,
        scaleY: this.scaleY,
        pivotX: this.pivotX,
        pivotY: this.pivotY,
        translateX: this.translateX,
        translateY: this.translateY,
        layers: this.layers.map(function (layer) {
          return layer.toJSON();
        }),
        expanded: this.expanded
      });
    }
  }, {
    key: 'layers',
    get: function get() {
      return this.layers_ || [];
    },
    set: function set(layers) {
      var _this2 = this;

      this.layers_ = layers;
      this.layers_.forEach(function (layer) {
        return layer.parent = _this2;
      });
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'group';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'group';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'layer_group';
    }
  }]);

  return LayerGroup;
}(_BaseLayer2.BaseLayer)) || _class);


_BaseLayer2.BaseLayer.LAYER_CLASSES_BY_TYPE['group'] = LayerGroup;

},{"./BaseLayer":31,"./properties":44}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaskLayer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

var _BaseLayer2 = require('./BaseLayer');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A mask layer (mask defined by a path) that clips/masks layers that follow it
 * within its layer group.
 */
var MaskLayer = exports.MaskLayer = (_dec = _properties.Property.register([new _properties.PathDataProperty('pathData', { animatable: true })]), _dec(_class = function (_BaseLayer) {
  _inherits(MaskLayer, _BaseLayer);

  function MaskLayer() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, MaskLayer);

    var _this = _possibleConstructorReturn(this, (MaskLayer.__proto__ || Object.getPrototypeOf(MaskLayer)).call(this, obj, opts));

    _this.pathData = obj.pathData || '';
    return _this;
  }

  _createClass(MaskLayer, [{
    key: 'computeBounds',
    value: function computeBounds() {
      return Object.assign({}, this.pathData && this.pathData.bounds ? this.pathData.bounds : null);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return Object.assign(_get(MaskLayer.prototype.__proto__ || Object.getPrototypeOf(MaskLayer.prototype), 'toJSON', this).call(this), {
        pathData: this.pathData.pathString
      });
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'mask';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'mask';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'mask_layer';
    }
  }]);

  return MaskLayer;
}(_BaseLayer2.BaseLayer)) || _class);


_BaseLayer2.BaseLayer.LAYER_CLASSES_BY_TYPE['mask'] = MaskLayer;

},{"./BaseLayer":31,"./properties":44}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathLayer = exports.DefaultValues = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dec, _class; /*
                   * Copyright 2016 Google Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the "License");
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   *     http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an "AS IS" BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   */

var _properties = require('./properties');

var _BaseLayer2 = require('./BaseLayer');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DefaultValues = exports.DefaultValues = {
  LINECAP: 'butt',
  LINEJOIN: 'miter',
  MITER_LIMIT: 4
};

var ENUM_LINECAP_OPTIONS = [{ value: 'butt', label: 'Butt' }, { value: 'square', label: 'Square' }, { value: 'round', label: 'Round' }];

var ENUM_LINEJOIN_OPTIONS = [{ value: 'miter', label: 'Miter' }, { value: 'round', label: 'Round' }, { value: 'bevel', label: 'Bevel' }];

/**
 * A path layer, which is the main building block for visible content in a vector
 * artwork.
 */
var PathLayer = exports.PathLayer = (_dec = _properties.Property.register([new _properties.PathDataProperty('pathData', { animatable: true }), new _properties.ColorProperty('fillColor', { animatable: true }), new _properties.FractionProperty('fillAlpha', { animatable: true }), new _properties.ColorProperty('strokeColor', { animatable: true }), new _properties.FractionProperty('strokeAlpha', { animatable: true }), new _properties.NumberProperty('strokeWidth', { min: 0, animatable: true }), new _properties.EnumProperty('strokeLinecap', ENUM_LINECAP_OPTIONS), new _properties.EnumProperty('strokeLinejoin', ENUM_LINEJOIN_OPTIONS), new _properties.NumberProperty('strokeMiterLimit', { min: 1 }), new _properties.FractionProperty('trimPathStart', { animatable: true }), new _properties.FractionProperty('trimPathEnd', { animatable: true }), new _properties.FractionProperty('trimPathOffset', { animatable: true })]), _dec(_class = function (_BaseLayer) {
  _inherits(PathLayer, _BaseLayer);

  function PathLayer() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PathLayer);

    var _this = _possibleConstructorReturn(this, (PathLayer.__proto__ || Object.getPrototypeOf(PathLayer)).call(this, obj, opts));

    _this.pathData = obj.pathData || '';
    _this.fillColor = obj.fillColor || null;
    _this.fillAlpha = 'fillAlpha' in obj ? obj.fillAlpha : 1;
    _this.strokeColor = obj.strokeColor || '';
    _this.strokeAlpha = 'strokeAlpha' in obj ? obj.strokeAlpha : 1;
    _this.strokeWidth = obj.strokeWidth || 0;
    _this.strokeLinecap = obj.strokeLinecap || DefaultValues.LINECAP;
    _this.strokeLinejoin = obj.strokeLinejoin || DefaultValues.LINEJOIN;
    _this.strokeMiterLimit = obj.strokeMiterLimit || DefaultValues.MITER_LIMIT;
    _this.trimPathStart = obj.trimPathStart || 0;
    _this.trimPathEnd = 'trimPathEnd' in obj && typeof obj.trimPathEnd == 'number' ? obj.trimPathEnd : 1;
    _this.trimPathOffset = obj.trimPathOffset || 0;
    return _this;
  }

  _createClass(PathLayer, [{
    key: 'computeBounds',
    value: function computeBounds() {
      return Object.assign({}, this.pathData && this.pathData.bounds ? this.pathData.bounds : null);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return Object.assign(_get(PathLayer.prototype.__proto__ || Object.getPrototypeOf(PathLayer.prototype), 'toJSON', this).call(this), {
        pathData: this.pathData.pathString,
        fillColor: this.fillColor,
        fillAlpha: this.fillAlpha,
        strokeColor: this.strokeColor,
        strokeAlpha: this.strokeAlpha,
        strokeWidth: this.strokeWidth,
        strokeLinecap: this.strokeLinecap,
        strokeLinejoin: this.strokeLinejoin,
        strokeMiterLimit: this.strokeMiterLimit,
        trimPathStart: this.trimPathStart,
        trimPathEnd: this.trimPathEnd,
        trimPathOffset: this.trimPathOffset
      });
    }
  }, {
    key: 'typeString',
    get: function get() {
      return 'path';
    }
  }, {
    key: 'typeIdPrefix',
    get: function get() {
      return 'path';
    }
  }, {
    key: 'typeIcon',
    get: function get() {
      return 'path_layer';
    }
  }]);

  return PathLayer;
}(_BaseLayer2.BaseLayer)) || _class);


_BaseLayer2.BaseLayer.LAYER_CLASSES_BY_TYPE['path'] = PathLayer;

},{"./BaseLayer":31,"./properties":44}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Animation = require('./Animation');

Object.defineProperty(exports, 'Animation', {
  enumerable: true,
  get: function get() {
    return _Animation.Animation;
  }
});

var _AnimationBlock = require('./AnimationBlock');

Object.defineProperty(exports, 'AnimationBlock', {
  enumerable: true,
  get: function get() {
    return _AnimationBlock.AnimationBlock;
  }
});

var _Artwork = require('./Artwork');

Object.defineProperty(exports, 'Artwork', {
  enumerable: true,
  get: function get() {
    return _Artwork.Artwork;
  }
});

var _BaseLayer = require('./BaseLayer');

Object.defineProperty(exports, 'BaseLayer', {
  enumerable: true,
  get: function get() {
    return _BaseLayer.BaseLayer;
  }
});

var _LayerGroup = require('./LayerGroup');

Object.defineProperty(exports, 'LayerGroup', {
  enumerable: true,
  get: function get() {
    return _LayerGroup.LayerGroup;
  }
});

var _MaskLayer = require('./MaskLayer');

Object.defineProperty(exports, 'MaskLayer', {
  enumerable: true,
  get: function get() {
    return _MaskLayer.MaskLayer;
  }
});

var _PathLayer = require('./PathLayer');

Object.defineProperty(exports, 'PathLayer', {
  enumerable: true,
  get: function get() {
    return _PathLayer.PathLayer;
  }
});
Object.defineProperty(exports, 'DefaultValues', {
  enumerable: true,
  get: function get() {
    return _PathLayer.DefaultValues;
  }
});

},{"./Animation":28,"./AnimationBlock":29,"./Artwork":30,"./BaseLayer":31,"./LayerGroup":32,"./MaskLayer":33,"./PathLayer":34}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ColorUtil = require('ColorUtil');

var _MathUtil = require('MathUtil');

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ColorProperty = exports.ColorProperty = function (_Property) {
  _inherits(ColorProperty, _Property);

  function ColorProperty() {
    _classCallCheck(this, ColorProperty);

    return _possibleConstructorReturn(this, (ColorProperty.__proto__ || Object.getPrototypeOf(ColorProperty)).apply(this, arguments));
  }

  _createClass(ColorProperty, [{
    key: 'interpolateValue',
    value: function interpolateValue(start, end, f) {
      start = _ColorUtil.ColorUtil.parseAndroidColor(start);
      end = _ColorUtil.ColorUtil.parseAndroidColor(end);
      return _ColorUtil.ColorUtil.toAndroidString({
        r: _MathUtil.MathUtil.constrain(Math.round(_Property2.Property.simpleInterpolate(start.r, end.r, f)), 0, 255),
        g: _MathUtil.MathUtil.constrain(Math.round(_Property2.Property.simpleInterpolate(start.g, end.g, f)), 0, 255),
        b: _MathUtil.MathUtil.constrain(Math.round(_Property2.Property.simpleInterpolate(start.b, end.b, f)), 0, 255),
        a: _MathUtil.MathUtil.constrain(Math.round(_Property2.Property.simpleInterpolate(start.a, end.a, f)), 0, 255)
      });
    }
  }, {
    key: 'trySetEditedValue',
    value: function trySetEditedValue(obj, propertyName, value) {
      if (!value) {
        obj[propertyName] = null;
        return;
      }

      var processedValue = _ColorUtil.ColorUtil.parseAndroidColor(value);
      if (!processedValue) {
        processedValue = _ColorUtil.ColorUtil.parseAndroidColor(_ColorUtil.ColorUtil.svgToAndroidColor(value));
      }

      obj[propertyName] = _ColorUtil.ColorUtil.toAndroidString(processedValue);
    }
  }, {
    key: 'animatorValueType',
    get: function get() {
      return 'colorType';
    }
  }]);

  return ColorProperty;
}(_Property2.Property);

},{"./Property":42,"ColorUtil":15,"MathUtil":18}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnumProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var EnumProperty = exports.EnumProperty = function (_Property) {
  _inherits(EnumProperty, _Property);

  function EnumProperty(name, options) {
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, EnumProperty);

    var _this = _possibleConstructorReturn(this, (EnumProperty.__proto__ || Object.getPrototypeOf(EnumProperty)).call(this, name, config));

    _this.optionsByValue_ = {};
    _this.options_ = (options || []).map(function (option) {
      var newOption = {};
      if (typeof option === 'string') {
        newOption = {
          value: option,
          label: option
        };
        option = newOption;
      }

      if (!('label' in option)) {
        option.label = option.value;
      }

      _this.optionsByValue_[option.value] = option;
      return option;
    });

    config = config || {};
    if (config.storeEntireOption) {
      _this.storeEntireOption = config.storeEntireOption;
    }
    return _this;
  }

  _createClass(EnumProperty, [{
    key: 'getter_',
    value: function getter_(obj, propertyName, value) {
      var backingPropertyName = propertyName + '_';
      return obj[backingPropertyName];
    }
  }, {
    key: 'setter_',
    value: function setter_(obj, propertyName, value) {
      var backingPropertyName = propertyName + '_';

      obj[backingPropertyName] = this.storeEntireOption ? this.getOptionForValue_(value) : this.getOptionForValue_(value).value;
    }
  }, {
    key: 'getOptionForValue_',
    value: function getOptionForValue_(value) {
      if (!value) {
        return null;
      }

      if (typeof value === 'string') {
        return this.optionsByValue_[value];
      } else if ('value' in value) {
        return value;
      }

      return null;
    }
  }, {
    key: 'displayValueForValue',
    value: function displayValueForValue(value) {
      if (!value) {
        return '';
      }

      return this.getOptionForValue_(value).label;
    }
  }, {
    key: 'options',
    get: function get() {
      return this.options_;
    }
  }]);

  return EnumProperty;
}(_Property2.Property);

},{"./Property":42}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FractionProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _NumberProperty2 = require('./NumberProperty');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var FractionProperty = exports.FractionProperty = function (_NumberProperty) {
  _inherits(FractionProperty, _NumberProperty);

  function FractionProperty(name) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FractionProperty);

    config.min = 0;
    config.max = 1;
    return _possibleConstructorReturn(this, (FractionProperty.__proto__ || Object.getPrototypeOf(FractionProperty)).call(this, name, config));
  }

  _createClass(FractionProperty, [{
    key: 'animatorValueType',
    get: function get() {
      return 'floatType';
    }
  }]);

  return FractionProperty;
}(_NumberProperty2.NumberProperty);

},{"./NumberProperty":40}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var IdProperty = exports.IdProperty = function (_Property) {
  _inherits(IdProperty, _Property);

  function IdProperty() {
    _classCallCheck(this, IdProperty);

    return _possibleConstructorReturn(this, (IdProperty.__proto__ || Object.getPrototypeOf(IdProperty)).apply(this, arguments));
  }

  _createClass(IdProperty, [{
    key: 'trySetEditedValue',
    value: function trySetEditedValue(obj, propertyName, value) {
      obj[propertyName] = IdProperty.sanitize(value);
    }
  }], [{
    key: 'sanitize',
    value: function sanitize(value) {
      value = (value || '').toLowerCase().replace(/^\s+|\s+$/g, '').replace(/[\s-]+/g, '_').replace(/[^\w_]+/g, '');
      return value;
    }
  }]);

  return IdProperty;
}(_Property2.Property);

},{"./Property":42}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var NumberProperty = exports.NumberProperty = function (_Property) {
  _inherits(NumberProperty, _Property);

  function NumberProperty(name) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, NumberProperty);

    var _this = _possibleConstructorReturn(this, (NumberProperty.__proto__ || Object.getPrototypeOf(NumberProperty)).call(this, name, config));

    _this.config = config;
    return _this;
  }

  _createClass(NumberProperty, [{
    key: 'trySetEditedValue',
    value: function trySetEditedValue(obj, propertyName, value) {
      value = parseFloat(value);
      if (!isNaN(value)) {
        if ('min' in this.config) {
          value = Math.max(this.config.min, value);
        }
        if ('max' in this.config) {
          value = Math.min(this.config.max, value);
        }
        if (this.config.integer) {
          value = Math.floor(value);
        }
        obj[propertyName] = value;
      }
    }
  }, {
    key: 'displayValueForValue',
    value: function displayValueForValue(value) {
      if (typeof value === 'number') {
        return (Number.isInteger(value) ? value.toString() : Number(value.toFixed(3)).toString()).replace(/-/g, '\u2212');
      }
      return value;
    }
  }, {
    key: 'setter_',
    value: function setter_(obj, propertyName, value) {
      if (typeof value === 'string') {
        value = Number(value);
      }

      if (typeof value === 'number') {
        if (!isNaN(value)) {
          if ('min' in this.config) {
            value = Math.max(this.config.min, value);
          }
          if ('max' in this.config) {
            value = Math.min(this.config.max, value);
          }
          if (this.config.integer) {
            value = Math.floor(value);
          }
        }
      }

      var backingPropertyName = propertyName + '_';
      obj[backingPropertyName] = value;
    }
  }, {
    key: 'interpolateValue',
    value: function interpolateValue(start, end, f) {
      return _Property2.Property.simpleInterpolate(start, end, f);
    }
  }, {
    key: 'animatorValueType',
    get: function get() {
      return 'floatType';
    }
  }]);

  return NumberProperty;
}(_Property2.Property);

},{"./Property":42}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathDataProperty = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SvgPathData = require('SvgPathData');

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var PathDataProperty = exports.PathDataProperty = function (_Property) {
  _inherits(PathDataProperty, _Property);

  function PathDataProperty() {
    _classCallCheck(this, PathDataProperty);

    return _possibleConstructorReturn(this, (PathDataProperty.__proto__ || Object.getPrototypeOf(PathDataProperty)).apply(this, arguments));
  }

  _createClass(PathDataProperty, [{
    key: 'interpolateValue',
    value: function interpolateValue(start, end, f) {
      return _SvgPathData.SvgPathData.interpolate(start, end, f);
    }
  }, {
    key: 'displayValueForValue',
    value: function displayValueForValue(val) {
      return val.pathString;
    }
  }, {
    key: 'getEditableValue',
    value: function getEditableValue(obj, propertyName) {
      return obj[propertyName] ? obj[propertyName].pathString : '';
    }
  }, {
    key: 'trySetEditedValue',
    value: function trySetEditedValue(obj, propertyName, stringValue) {
      obj[propertyName] = new _SvgPathData.SvgPathData(stringValue);
    }
  }, {
    key: 'getter_',
    value: function getter_(obj, propertyName) {
      var backingPropertyName = propertyName + '_';
      return obj[backingPropertyName];
    }
  }, {
    key: 'setter_',
    value: function setter_(obj, propertyName, value) {
      var backingPropertyName = propertyName + '_';
      var pathData = void 0;
      if (!value || value instanceof _SvgPathData.SvgPathData) {
        pathData = value;
      } else {
        pathData = new _SvgPathData.SvgPathData(value);
      }

      obj[backingPropertyName] = pathData;
    }
  }, {
    key: 'cloneValue',
    value: function cloneValue(val) {
      return JSON.parse(JSON.stringify(val));
    }
  }, {
    key: 'animatorValueType',
    get: function get() {
      return 'pathType';
    }
  }]);

  return PathDataProperty;
}(_Property2.Property);

},{"./Property":42,"SvgPathData":22}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Property = exports.Property = function () {
  function Property(name) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Property);

    this.name = name;
    this.config = config;
    this.animatable = config.animatable;
    this.inspectable = config.inspectable;
  }

  _createClass(Property, [{
    key: 'interpolateValue',
    value: function interpolateValue(start, end, f) {
      return start;
    }
  }, {
    key: 'getEditableValue',
    value: function getEditableValue(obj, propertyName) {
      return obj[propertyName];
    }
  }, {
    key: 'trySetEditedValue',
    value: function trySetEditedValue(obj, propertyName, value) {
      obj[propertyName] = value;
    }
  }, {
    key: 'getter_',
    value: function getter_(obj, propertyName, value) {
      var backingPropertyName = propertyName + '_';
      return obj[backingPropertyName];
    }
  }, {
    key: 'setter_',
    value: function setter_(obj, propertyName, value) {
      var backingPropertyName = propertyName + '_';
      obj[backingPropertyName] = value;
    }
  }, {
    key: 'displayValueForValue',
    value: function displayValueForValue(val) {
      return val;
    }
  }, {
    key: 'cloneValue',
    value: function cloneValue(val) {
      return val;
    }
  }], [{
    key: 'simpleInterpolate',
    value: function simpleInterpolate(start, end, f) {
      return start + (end - start) * f;
    }
  }, {
    key: 'register',
    value: function register(props) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$reset = _ref.reset,
          reset = _ref$reset === undefined ? false : _ref$reset;

      return function (cls) {
        props.forEach(function (prop) {
          if (!(prop instanceof StubProperty)) {
            Object.defineProperty(cls.prototype, prop.name, {
              get: function get() {
                return prop.getter_(this, prop.name);
              },
              set: function set(value) {
                prop.setter_(this, prop.name, value);
              }
            });
          }
        });

        var animatableProperties = {};
        var inspectableProperties = {};

        if (!reset) {
          Object.assign(animatableProperties, cls.prototype.animatableProperties);
          Object.assign(inspectableProperties, cls.prototype.inspectableProperties);
        }

        props.forEach(function (prop) {
          if (prop.animatable) {
            animatableProperties[prop.name] = prop;
          }

          if (!prop.inspectable) {
            inspectableProperties[prop.name] = prop;
          }
        });

        Object.defineProperty(cls.prototype, 'animatableProperties', {
          get: function get() {
            return Object.assign({}, animatableProperties);
          }
        });

        Object.defineProperty(cls.prototype, 'inspectableProperties', {
          get: function get() {
            return Object.assign({}, inspectableProperties);
          }
        });
      };
    }
  }]);

  return Property;
}();

var StubProperty = exports.StubProperty = function (_Property) {
  _inherits(StubProperty, _Property);

  function StubProperty() {
    _classCallCheck(this, StubProperty);

    return _possibleConstructorReturn(this, (StubProperty.__proto__ || Object.getPrototypeOf(StubProperty)).apply(this, arguments));
  }

  return StubProperty;
}(Property);

},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StringProperty = undefined;

var _Property2 = require('./Property');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2016 Google Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var StringProperty = exports.StringProperty = function (_Property) {
  _inherits(StringProperty, _Property);

  function StringProperty() {
    _classCallCheck(this, StringProperty);

    return _possibleConstructorReturn(this, (StringProperty.__proto__ || Object.getPrototypeOf(StringProperty)).apply(this, arguments));
  }

  return StringProperty;
}(_Property2.Property);

},{"./Property":42}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ColorProperty = require('./ColorProperty');

Object.defineProperty(exports, 'ColorProperty', {
  enumerable: true,
  get: function get() {
    return _ColorProperty.ColorProperty;
  }
});

var _EnumProperty = require('./EnumProperty');

Object.defineProperty(exports, 'EnumProperty', {
  enumerable: true,
  get: function get() {
    return _EnumProperty.EnumProperty;
  }
});

var _FractionProperty = require('./FractionProperty');

Object.defineProperty(exports, 'FractionProperty', {
  enumerable: true,
  get: function get() {
    return _FractionProperty.FractionProperty;
  }
});

var _IdProperty = require('./IdProperty');

Object.defineProperty(exports, 'IdProperty', {
  enumerable: true,
  get: function get() {
    return _IdProperty.IdProperty;
  }
});

var _NumberProperty = require('./NumberProperty');

Object.defineProperty(exports, 'NumberProperty', {
  enumerable: true,
  get: function get() {
    return _NumberProperty.NumberProperty;
  }
});

var _PathDataProperty = require('./PathDataProperty');

Object.defineProperty(exports, 'PathDataProperty', {
  enumerable: true,
  get: function get() {
    return _PathDataProperty.PathDataProperty;
  }
});

var _Property = require('./Property');

Object.defineProperty(exports, 'Property', {
  enumerable: true,
  get: function get() {
    return _Property.Property;
  }
});
Object.defineProperty(exports, 'StubProperty', {
  enumerable: true,
  get: function get() {
    return _Property.StubProperty;
  }
});

var _StringProperty = require('./StringProperty');

Object.defineProperty(exports, 'StringProperty', {
  enumerable: true,
  get: function get() {
    return _StringProperty.StringProperty;
  }
});

},{"./ColorProperty":36,"./EnumProperty":37,"./FractionProperty":38,"./IdProperty":39,"./NumberProperty":40,"./PathDataProperty":41,"./Property":42,"./StringProperty":43}],45:[function(require,module,exports){
'use strict';

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports.routeConfig = function ($locationProvider, $routeProvider) {
  $locationProvider.html5Mode(true);

  $routeProvider.otherwise({
    templateUrl: 'pages/studio/studio.html'
  });
};

Object.assign(module.exports, {
  studio: function studio() {
    return '/';
  }
});

},{}],46:[function(require,module,exports){
'use strict';

/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Based on https://github.com/cburgmer/xmlserializer/blob/master/lib/serializer.js
// Other options for pretty-printing:
// - https://github.com/travisleithead/xmlserialization-polyfill
// - https://github.com/prettydiff/prettydiff/blob/master/lib/markuppretty.js
// - https://github.com/vkiryukhin/vkBeautify

var removeInvalidCharacters = function removeInvalidCharacters(content) {
    // See http://www.w3.org/TR/xml/#NT-Char for valid XML 1.0 characters
    return content.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F]/g, '');
};

var serializeAttributeValue = function serializeAttributeValue(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
};

var serializeTextContent = function serializeTextContent(content) {
    return content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
};

var serializeAttribute = function serializeAttribute(attr) {
    var value = attr.value;

    return attr.name + '="' + serializeAttributeValue(value) + '"';
};

var getTagName = function getTagName(node) {
    var tagName = node.tagName;

    // Aid in serializing of original HTML documents
    if (node.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        tagName = tagName.toLowerCase();
    }
    return tagName;
};

var serializeNamespace = function serializeNamespace(node, options) {
    var nodeHasXmlnsAttr = Array.prototype.map.call(node.attributes || node.attrs, function (attr) {
        return attr.name;
    }).indexOf('xmlns') >= 0;
    // Serialize the namespace as an xmlns attribute whenever the element
    // doesn't already have one and the inherited namespace does not match
    // the element's namespace.
    if (!nodeHasXmlnsAttr && node.namespaceURI && options.isRootNode /* ||
                                                                     node.namespaceURI !== node.parentNode.namespaceURI*/) {
        return ' xmlns="' + node.namespaceURI + '"';
    } else {
        return '';
    }
};

var serializeChildren = function serializeChildren(node, options) {
    return Array.prototype.map.call(node.childNodes, function (childNode) {
        return nodeTreeToXHTML(childNode, options);
    }).join('');
};

var serializeTag = function serializeTag(node, options) {
    var output = '';
    if (options.indent && options._indentLevel) {
        output += Array(options._indentLevel * options.indent + 1).join(' ');
    }
    output += '<' + getTagName(node);
    output += serializeNamespace(node, options.isRootNode);

    var attributes = node.attributes || node.attrs;
    Array.prototype.forEach.call(attributes, function (attr) {
        if (options.multiAttributeIndent && attributes.length > 1) {
            output += '\n';
            output += Array((options._indentLevel || 0) * options.indent + options.multiAttributeIndent + 1).join(' ');
        } else {
            output += ' ';
        }
        output += serializeAttribute(attr);
    });

    if (node.childNodes.length > 0) {
        output += '>';
        if (options.indent) {
            output += '\n';
        }
        options.isRootNode = false;
        options._indentLevel = (options._indentLevel || 0) + 1;
        output += serializeChildren(node, options);
        --options._indentLevel;
        if (options.indent && options._indentLevel) {
            output += Array(options._indentLevel * options.indent + 1).join(' ');
        }
        output += '</' + getTagName(node) + '>';
    } else {
        output += '/>';
    }
    if (options.indent) {
        output += '\n';
    }
    return output;
};

var serializeText = function serializeText(node) {
    var text = node.nodeValue || node.value || '';
    return serializeTextContent(text);
};

var serializeComment = function serializeComment(node) {
    return '<!--' + node.data.replace(/-/g, '&#45;') + '-->';
};

var serializeCDATA = function serializeCDATA(node) {
    return '<![CDATA[' + node.nodeValue + ']]>';
};

var nodeTreeToXHTML = function nodeTreeToXHTML(node, options) {
    if (node.nodeName === '#document' || node.nodeName === '#document-fragment') {
        return serializeChildren(node, options);
    } else {
        if (node.tagName) {
            return serializeTag(node, options);
        } else if (node.nodeName === '#text') {
            return serializeText(node);
        } else if (node.nodeName === '#comment') {
            return serializeComment(node);
        } else if (node.nodeName === '#cdata-section') {
            return serializeCDATA(node);
        }
    }
};

exports.serializeToString = function (node, options) {
    options = options || {};
    options.rootNode = true;
    return removeInvalidCharacters(nodeTreeToXHTML(node, options));
};

},{}],47:[function(require,module,exports){
/**
 * https://github.com/gre/bezier-easing
 * BezierEasing - use bezier curve for transition easing function
 * by Gaëtan Renaudeau 2014 - 2015 – MIT License
 */

// These values are established by empiricism with tests (tradeoff: performance VS precision)
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }
function B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }
function C (aA1)      { return 3.0 * aA1; }

// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
function calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }

// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.
function getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }

function binarySubdivide (aX, aA, aB, mX1, mX2) {
  var currentX, currentT, i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {
 for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
   var currentSlope = getSlope(aGuessT, mX1, mX2);
   if (currentSlope === 0.0) {
     return aGuessT;
   }
   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
   aGuessT -= currentX / currentSlope;
 }
 return aGuessT;
}

module.exports = function bezier (mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  // Precompute samples table
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX (aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    // Interpolate to provide an initial guess for t
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing (x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x; // linear
    }
    // Because JavaScript number are imprecise, we should guarantee the extremes are right.
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};

},{}],48:[function(require,module,exports){
module.exports = require('./lib/bezier');

},{"./lib/bezier":49}],49:[function(require,module,exports){
/**
  A javascript Bezier curve library by Pomax.

  Based on http://pomax.github.io/bezierinfo

  This code is MIT licensed.
**/
(function() {
  "use strict";

  // math-inlining.
  var abs = Math.abs,
      min = Math.min,
      max = Math.max,
      acos = Math.acos,
      sqrt = Math.sqrt,
      pi = Math.PI,
      // a zero coordinate, which is surprisingly useful
      ZERO = {x:0,y:0,z:0};

  // quite needed
  var utils = require('./utils.js');

  // not quite needed, but eventually this'll be useful...
  var PolyBezier = require('./poly-bezier.js');

  /**
   * Bezier curve constructor. The constructor argument can be one of three things:
   *
   * 1. array/4 of {x:..., y:..., z:...}, z optional
   * 2. numerical array/8 ordered x1,y1,x2,y2,x3,y3,x4,y4
   * 3. numerical array/12 ordered x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4
   *
   */
  var Bezier = function(coords) {
    var args = (coords && coords.forEach) ? coords : [].slice.call(arguments);
    var coordlen = false;
    if(typeof args[0] === "object") {
      coordlen = args.length;
      var newargs = [];
      args.forEach(function(point) {
        ['x','y','z'].forEach(function(d) {
          if(typeof point[d] !== "undefined") {
            newargs.push(point[d]);
          }
        });
      });
      args = newargs;
    }
    var higher = false;
    var len = args.length;
    if (coordlen) {
      if(coordlen>4) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
        higher = true;
      }
    } else {
      if(len!==6 && len!==8 && len!==9 && len!==12) {
        if (arguments.length !== 1) {
          throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");
        }
      }
    }
    var _3d = (!higher && (len === 9 || len === 12)) || (coords && coords[0] && typeof coords[0].z !== "undefined");
    this._3d = _3d;
    var points = [];
    for(var idx=0, step=(_3d ? 3 : 2); idx<len; idx+=step) {
      var point = {
        x: args[idx],
        y: args[idx+1]
      };
      if(_3d) { point.z = args[idx+2] };
      points.push(point);
    }
    this.order = points.length - 1;
    this.points = points;
    var dims = ['x','y'];
    if(_3d) dims.push('z');
    this.dims = dims;
    this.dimlen = dims.length;

    (function(curve) {
      var order = curve.order;
      var points = curve.points;
      var a = utils.align(points, {p1:points[0], p2:points[order]});
      for(var i=0; i<a.length; i++) {
        if(abs(a[i].y) > 0.0001) {
          curve._linear = false;
          return;
        }
      }
      curve._linear = true;
    }(this));

    this._t1 = 0;
    this._t2 = 1;
    this.update();
  };

  Bezier.fromSVG = function(svgString) {
    var list = svgString.match(/[-+]?\d*\.?\d+(?:[eE][-+]?\d+)?/g).map(parseFloat);
    var relative = /[cq]/.test(svgString);
    if(!relative) return new Bezier(list);
    list = list.map(function(v,i) {
      return i < 2 ? v : v + list[i % 2];
    });
    return new Bezier(list);
  };

  function getABC(n,S,B,E,t) {
    if(typeof t === "undefined") { t = 0.5; }
    var u = utils.projectionratio(t,n),
        um = 1-u,
        C = {
          x: u*S.x + um*E.x,
          y: u*S.y + um*E.y
        },
        s = utils.abcratio(t,n),
        A = {
          x: B.x + (B.x-C.x)/s,
          y: B.y + (B.y-C.y)/s
        };
    return { A:A, B:B, C:C };
  }

  Bezier.quadraticFromPoints = function(p1,p2,p3, t) {
    if(typeof t === "undefined") { t = 0.5; }
    // shortcuts, although they're really dumb
    if(t===0) { return new Bezier(p2,p2,p3); }
    if(t===1) { return new Bezier(p1,p2,p2); }
    // real fitting.
    var abc = getABC(2,p1,p2,p3,t);
    return new Bezier(p1, abc.A, p3);
  };

  Bezier.cubicFromPoints = function(S,B,E, t,d1) {
    if(typeof t === "undefined") { t = 0.5; }
    var abc = getABC(3,S,B,E,t);
    if(typeof d1 === "undefined") { d1 = utils.dist(B,abc.C); }
    var d2 = d1 * (1-t)/t;

    var selen = utils.dist(S,E),
        lx = (E.x-S.x)/selen,
        ly = (E.y-S.y)/selen,
        bx1 = d1 * lx,
        by1 = d1 * ly,
        bx2 = d2 * lx,
        by2 = d2 * ly;
    // derivation of new hull coordinates
    var e1  = { x: B.x - bx1, y: B.y - by1 },
        e2  = { x: B.x + bx2, y: B.y + by2 },
        A = abc.A,
        v1  = { x: A.x + (e1.x-A.x)/(1-t), y: A.y + (e1.y-A.y)/(1-t) },
        v2  = { x: A.x + (e2.x-A.x)/(t), y: A.y + (e2.y-A.y)/(t) },
        nc1 = { x: S.x + (v1.x-S.x)/(t), y: S.y + (v1.y-S.y)/(t) },
        nc2 = { x: E.x + (v2.x-E.x)/(1-t), y: E.y + (v2.y-E.y)/(1-t) };
    // ...done
    return new Bezier(S,nc1,nc2,E);
  };

  var getUtils = function() {
    return utils;
  };

  Bezier.getUtils = getUtils;

  Bezier.prototype = {
    getUtils: getUtils,
    valueOf: function() {
      return this.toString();
    },
    toString: function() {
      return utils.pointsToString(this.points);
    },
    toSVG: function(relative) {
      if(this._3d) return false;
      var p = this.points,
          x = p[0].x,
          y = p[0].y,
          s = ["M", x, y, (this.order===2 ? "Q":"C")];
      for(var i=1, last=p.length; i<last; i++) {
        s.push(p[i].x);
        s.push(p[i].y);
      }
      return s.join(" ");
    },
    update: function() {
      // one-time compute derivative coordinates
      this.dpoints = [];
      for(var p=this.points, d=p.length, c=d-1; d>1; d--, c--) {
        var list = [];
        for(var j=0, dpt; j<c; j++) {
          dpt = {
            x: c * (p[j+1].x - p[j].x),
            y: c * (p[j+1].y - p[j].y)
          };
          if(this._3d) {
            dpt.z = c * (p[j+1].z - p[j].z);
          }
          list.push(dpt);
        }
        this.dpoints.push(list);
        p = list;
      };
      this.computedirection();
    },
    computedirection: function() {
      var points = this.points;
      var angle = utils.angle(points[0], points[this.order], points[1]);
      this.clockwise = angle > 0;
    },
    length: function() {
      return utils.length(this.derivative.bind(this));
    },
    _lut: [],
    getLUT: function(steps) {
      steps = steps || 100;
      if (this._lut.length === steps) { return this._lut; }
      this._lut = [];
      for(var t=0; t<=steps; t++) {
        this._lut.push(this.compute(t/steps));
      }
      return this._lut;
    },
    on: function(point, error) {
      error = error || 5;
      var lut = this.getLUT(), hits = [], c, t=0;
      for(var i=0; i<lut.length; i++) {
        c = lut[i];
        if (utils.dist(c,point) < error) {
          hits.push(c)
          t += i / lut.length;
        }
      }
      if(!hits.length) return false;
      return t /= hits.length;
    },
    project: function(point) {
      // step 1: coarse check
      var LUT = this.getLUT(), l = LUT.length-1,
          closest = utils.closest(LUT, point),
          mdist = closest.mdist,
          mpos = closest.mpos;
      if (mpos===0 || mpos===l) {
        var t = mpos/l, pt = this.compute(t);
        pt.t = t;
        pt.d = mdist;
        return pt;
      }

      // step 2: fine check
      var ft, t, p, d,
          t1 = (mpos-1)/l,
          t2 = (mpos+1)/l,
          step = 0.1/l;
      mdist += 1;
      for(t=t1,ft=t; t<t2+step; t+=step) {
        p = this.compute(t);
        d = utils.dist(point, p);
        if (d<mdist) {
          mdist = d;
          ft = t;
        }
      }
      p = this.compute(ft);
      p.t = ft;
      p.d = mdist;
      return p;
    },
    get: function(t) {
      return this.compute(t);
    },
    point: function(idx) {
      return this.points[idx];
    },
    compute: function(t) {
      // shortcuts
      if(t===0) { return this.points[0]; }
      if(t===1) { return this.points[this.order]; }

      var p = this.points;
      var mt = 1-t;

      // linear?
      if(this.order===1) {
        ret = {
          x: mt*p[0].x + t*p[1].x,
          y: mt*p[0].y + t*p[1].y
        };
        if (this._3d) { ret.z = mt*p[0].z + t*p[1].z; }
        return ret;
      }

      // quadratic/cubic curve?
      if(this.order<4) {
        var mt2 = mt*mt,
            t2 = t*t,
            a,b,c,d = 0;
        if(this.order===2) {
          p = [p[0], p[1], p[2], ZERO];
          a = mt2;
          b = mt*t*2;
          c = t2;
        }
        else if(this.order===3) {
          a = mt2*mt;
          b = mt2*t*3;
          c = mt*t2*3;
          d = t*t2;
        }
        var ret = {
          x: a*p[0].x + b*p[1].x + c*p[2].x + d*p[3].x,
          y: a*p[0].y + b*p[1].y + c*p[2].y + d*p[3].y
        };
        if(this._3d) {
          ret.z = a*p[0].z + b*p[1].z + c*p[2].z + d*p[3].z;
        }
        return ret;
      }

      // higher order curves: use de Casteljau's computation
      var dCpts = JSON.parse(JSON.stringify(this.points));
      while(dCpts.length > 1) {
        for (var i=0; i<dCpts.length-1; i++) {
          dCpts[i] = {
            x: dCpts[i].x + (dCpts[i+1].x - dCpts[i].x) * t,
            y: dCpts[i].y + (dCpts[i+1].y - dCpts[i].y) * t
          };
          if (typeof dCpts[i].z !== "undefined") {
            dCpts[i] = dCpts[i].z + (dCpts[i+1].z - dCpts[i].z) * t
          }
        }
        dCpts.splice(dCpts.length-1, 1);
      }
      return dCpts[0];
    },
    raise: function() {
      var p = this.points, np = [p[0]], i, k=p.length, pi, pim;
      for (var i=1; i<k; i++) {
        pi = p[i];
        pim = p[i-1];
        np[i] = {
          x: (k-i)/k * pi.x + i/k * pim.x,
          y: (k-i)/k * pi.y + i/k * pim.y
        };
      }
      np[k] = p[k-1];
      return new Bezier(np);
    },
    derivative: function(t) {
      var mt = 1-t,
          a,b,c=0,
          p = this.dpoints[0];
      if(this.order===2) { p = [p[0], p[1], ZERO]; a = mt; b = t; }
      if(this.order===3) { a = mt*mt; b = mt*t*2; c = t*t; }
      var ret = {
        x: a*p[0].x + b*p[1].x + c*p[2].x,
        y: a*p[0].y + b*p[1].y + c*p[2].y
      };
      if(this._3d) {
        ret.z = a*p[0].z + b*p[1].z + c*p[2].z;
      }
      return ret;
    },
    inflections: function() {
      return utils.inflections(this.points);
    },
    normal: function(t) {
      return this._3d ? this.__normal3(t) : this.__normal2(t);
    },
    __normal2: function(t) {
      var d = this.derivative(t);
      var q = sqrt(d.x*d.x + d.y*d.y)
      return { x: -d.y/q, y: d.x/q };
    },
    __normal3: function(t) {
      // see http://stackoverflow.com/questions/25453159
      var r1 = this.derivative(t),
          r2 = this.derivative(t+0.01),
          q1 = sqrt(r1.x*r1.x + r1.y*r1.y + r1.z*r1.z),
          q2 = sqrt(r2.x*r2.x + r2.y*r2.y + r2.z*r2.z);
      r1.x /= q1; r1.y /= q1; r1.z /= q1;
      r2.x /= q2; r2.y /= q2; r2.z /= q2;
      // cross product
      var c = {
        x: r2.y*r1.z - r2.z*r1.y,
        y: r2.z*r1.x - r2.x*r1.z,
        z: r2.x*r1.y - r2.y*r1.x
      };
      var m = sqrt(c.x*c.x + c.y*c.y + c.z*c.z);
      c.x /= m; c.y /= m; c.z /= m;
      // rotation matrix
      var R = [   c.x*c.x,   c.x*c.y-c.z, c.x*c.z+c.y,
                c.x*c.y+c.z,   c.y*c.y,   c.y*c.z-c.x,
                c.x*c.z-c.y, c.y*c.z+c.x,   c.z*c.z    ];
      // normal vector:
      var n = {
        x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,
        y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,
        z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z
      };
      return n;
    },
    hull: function(t) {
      var p = this.points,
          _p = [],
          pt,
          q = [],
          idx = 0,
          i=0,
          l=0;
      q[idx++] = p[0];
      q[idx++] = p[1];
      q[idx++] = p[2];
      if(this.order === 3) { q[idx++] = p[3]; }
      // we lerp between all points at each iteration, until we have 1 point left.
      while(p.length>1) {
        _p = [];
        for(i=0, l=p.length-1; i<l; i++) {
          pt = utils.lerp(t,p[i],p[i+1]);
          q[idx++] = pt;
          _p.push(pt);
        }
        p = _p;
      }
      return q;
    },
    split: function(t1, t2) {
      // shortcuts
      if(t1===0 && !!t2) { return this.split(t2).left; }
      if(t2===1) { return this.split(t1).right; }

      // no shortcut: use "de Casteljau" iteration.
      var q = this.hull(t1);
      var result = {
        left: this.order === 2 ? new Bezier([q[0],q[3],q[5]]) : new Bezier([q[0],q[4],q[7],q[9]]),
        right: this.order === 2 ? new Bezier([q[5],q[4],q[2]]) : new Bezier([q[9],q[8],q[6],q[3]]),
        span: q
      };

      // make sure we bind _t1/_t2 information!
      result.left._t1  = utils.map(0,  0,1, this._t1,this._t2);
      result.left._t2  = utils.map(t1, 0,1, this._t1,this._t2);
      result.right._t1 = utils.map(t1, 0,1, this._t1,this._t2);
      result.right._t2 = utils.map(1,  0,1, this._t1,this._t2);

      // if we have no t2, we're done
      if(!t2) { return result; }

      // if we have a t2, split again:
      t2 = utils.map(t2,t1,1,0,1);
      var subsplit = result.right.split(t2);
      return subsplit.left;
    },
    extrema: function() {
      var dims = this.dims,
          result={},
          roots=[],
          p, mfn;
      dims.forEach(function(dim) {
        mfn = function(v) { return v[dim]; };
        p = this.dpoints[0].map(mfn);
        result[dim] = utils.droots(p);
        if(this.order === 3) {
          p = this.dpoints[1].map(mfn);
          result[dim] = result[dim].concat(utils.droots(p));
        }
        result[dim] = result[dim].filter(function(t) { return (t>=0 && t<=1); });
        roots = roots.concat(result[dim].sort());
      }.bind(this));
      roots = roots.sort().filter(function(v,idx) { return (roots.indexOf(v) === idx); });
      result.values = roots;
      return result;
    },
    bbox: function() {
      var extrema = this.extrema(), result = {};
      this.dims.forEach(function(d) {
        result[d] = utils.getminmax(this, d, extrema[d]);
      }.bind(this));
      return result;
    },
    overlaps: function(curve) {
      var lbbox = this.bbox(),
          tbbox = curve.bbox();
      return utils.bboxoverlap(lbbox,tbbox);
    },
    offset: function(t, d) {
      if(typeof d !== "undefined") {
        var c = this.get(t);
        var n = this.normal(t);
        var ret = {
          c: c,
          n: n,
          x: c.x + n.x * d,
          y: c.y + n.y * d
        };
        if(this._3d) {
          ret.z = c.z + n.z * d;
        };
        return ret;
      }
      if(this._linear) {
        var nv = this.normal(0);
        var coords = this.points.map(function(p) {
          var ret = {
            x: p.x + t * nv.x,
            y: p.y + t * nv.y
          };
          if(p.z && n.z) { ret.z = p.z + t * nv.z; }
          return ret;
        });
        return [new Bezier(coords)];
      }
      var reduced = this.reduce();
      return reduced.map(function(s) {
        return s.scale(t);
      });
    },
    simple: function() {
      if(this.order===3) {
        var a1 = utils.angle(this.points[0], this.points[3], this.points[1]);
        var a2 = utils.angle(this.points[0], this.points[3], this.points[2]);
        if(a1>0 && a2<0 || a1<0 && a2>0) return false;
      }
      var n1 = this.normal(0);
      var n2 = this.normal(1);
      var s = n1.x*n2.x + n1.y*n2.y;
      if(this._3d) { s += n1.z*n2.z; }
      var angle = abs(acos(s));
      return angle < pi/3;
    },
    reduce: function() {
      var i, t1=0, t2=0, step=0.01, segment, pass1=[], pass2=[];
      // first pass: split on extrema
      var extrema = this.extrema().values;
      if(extrema.indexOf(0)===-1) { extrema = [0].concat(extrema); }
      if(extrema.indexOf(1)===-1) { extrema.push(1); }

      for(t1=extrema[0], i=1; i<extrema.length; i++) {
        t2 = extrema[i];
        segment = this.split(t1,t2);
        segment._t1 = t1;
        segment._t2 = t2;
        pass1.push(segment);
        t1 = t2;
      }

      // second pass: further reduce these segments to simple segments
      pass1.forEach(function(p1) {
        t1=0;
        t2=0;
        while(t2 <= 1) {
          for(t2=t1+step; t2<=1+step; t2+=step) {
            segment = p1.split(t1,t2);
            if(!segment.simple()) {
              t2 -= step;
              if(abs(t1-t2)<step) {
                // we can never form a reduction
                return [];
              }
              segment = p1.split(t1,t2);
              segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);
              segment._t2 = utils.map(t2,0,1,p1._t1,p1._t2);
              pass2.push(segment);
              t1 = t2;
              break;
            }
          }
        }
        if(t1<1) {
          segment = p1.split(t1,1);
          segment._t1 = utils.map(t1,0,1,p1._t1,p1._t2);
          segment._t2 = p1._t2;
          pass2.push(segment);
        }
      });
      return pass2;
    },
    scale: function(d) {
      var order = this.order;
      var distanceFn = false
      if(typeof d === "function") { distanceFn = d; }
      if(distanceFn && order === 2) { return this.raise().scale(distanceFn); }

      // TODO: add special handling for degenerate (=linear) curves.
      var clockwise = this.clockwise;
      var r1 = distanceFn ? distanceFn(0) : d;
      var r2 = distanceFn ? distanceFn(1) : d;
      var v = [ this.offset(0,10), this.offset(1,10) ];
      var o = utils.lli4(v[0], v[0].c, v[1], v[1].c);
      if(!o) { throw new Error("cannot scale this curve. Try reducing it first."); }
      // move all points by distance 'd' wrt the origin 'o'
      var points=this.points, np=[];

      // move end points by fixed distance along normal.
      [0,1].forEach(function(t) {
        var p = np[t*order] = utils.copy(points[t*order]);
        p.x += (t?r2:r1) * v[t].n.x;
        p.y += (t?r2:r1) * v[t].n.y;
      }.bind(this));

      if (!distanceFn) {
        // move control points to lie on the intersection of the offset
        // derivative vector, and the origin-through-control vector
        [0,1].forEach(function(t) {
          if(this.order===2 && !!t) return;
          var p = np[t*order];
          var d = this.derivative(t);
          var p2 = { x: p.x + d.x, y: p.y + d.y };
          np[t+1] = utils.lli4(p, p2, o, points[t+1]);
        }.bind(this));
        return new Bezier(np);
      }

      // move control points by "however much necessary to
      // ensure the correct tangent to endpoint".
      [0,1].forEach(function(t) {
        if(this.order===2 && !!t) return;
        var p = points[t+1];
        var ov = {
          x: p.x - o.x,
          y: p.y - o.y
        };
        var rc = distanceFn ? distanceFn((t+1)/order) : d;
        if(distanceFn && !clockwise) rc = -rc;
        var m = sqrt(ov.x*ov.x + ov.y*ov.y);
        ov.x /= m;
        ov.y /= m;
        np[t+1] = {
          x: p.x + rc*ov.x,
          y: p.y + rc*ov.y
        }
      }.bind(this));
      return new Bezier(np);
    },
    outline: function(d1, d2, d3, d4) {
      d2 = (typeof d2 === "undefined") ? d1 : d2;
      var reduced = this.reduce(),
          len = reduced.length,
          fcurves = [],
          bcurves = [],
          p,
          alen = 0,
          tlen = this.length();

      var graduated = (typeof d3 !== "undefined" && typeof d4 !== "undefined");

      function linearDistanceFunction(s,e, tlen,alen,slen) {
        return function (v) {
          var f1 = alen/tlen, f2 = (alen+slen)/tlen, d = e-s;
          return utils.map(v, 0,1, s+f1*d, s+f2*d);
        };
      };

      // form curve oulines
      reduced.forEach(function(segment) {
        slen = segment.length();
        if (graduated) {
          fcurves.push(segment.scale(  linearDistanceFunction( d1, d3, tlen,alen,slen)  ));
          bcurves.push(segment.scale(  linearDistanceFunction(-d2,-d4, tlen,alen,slen)  ));
        } else {
          fcurves.push(segment.scale( d1));
          bcurves.push(segment.scale(-d2));
        }
        alen += slen;
      });

      // reverse the "return" outline
      bcurves = bcurves.map(function(s) {
        p = s.points;
        if(p[3]) { s.points = [p[3],p[2],p[1],p[0]]; }
        else { s.points = [p[2],p[1],p[0]]; }
        return s;
      }).reverse();

      // form the endcaps as lines
      var fs = fcurves[0].points[0],
          fe = fcurves[len-1].points[fcurves[len-1].points.length-1],
          bs = bcurves[len-1].points[bcurves[len-1].points.length-1],
          be = bcurves[0].points[0],
          ls = utils.makeline(bs,fs),
          le = utils.makeline(fe,be),
          segments = [ls].concat(fcurves).concat([le]).concat(bcurves),
          slen = segments.length;

      return new PolyBezier(segments);
    },
    outlineshapes: function(d1, d2, curveIntersectionThreshold) {
      d2 = d2 || d1;
      var outline = this.outline(d1,d2).curves;
      var shapes = [];
      for(var i=1, len=outline.length; i < len/2; i++) {
        var shape = utils.makeshape(outline[i], outline[len-i], curveIntersectionThreshold);
        shape.startcap.virtual = (i > 1);
        shape.endcap.virtual = (i < len/2-1);
        shapes.push(shape);
      }
      return shapes;
    },
    intersects: function(curve, curveIntersectionThreshold) {
      if(!curve) return this.selfintersects(curveIntersectionThreshold);
      if(curve.p1 && curve.p2) {
        return this.lineIntersects(curve);
      }
      if(curve instanceof Bezier) { curve = curve.reduce(); }
      return this.curveintersects(this.reduce(), curve, curveIntersectionThreshold);
    },
    lineIntersects: function(line) {
      var mx = min(line.p1.x, line.p2.x),
          my = min(line.p1.y, line.p2.y),
          MX = max(line.p1.x, line.p2.x),
          MY = max(line.p1.y, line.p2.y),
          self=this;
      return utils.roots(this.points, line).filter(function(t) {
        var p = self.get(t);
        return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);
      });
    },
    selfintersects: function(curveIntersectionThreshold) {
      var reduced = this.reduce();
      // "simple" curves cannot intersect with their direct
      // neighbour, so for each segment X we check whether
      // it intersects [0:x-2][x+2:last].
      var i,len=reduced.length-2,results=[],result,left,right;
      for(i=0; i<len; i++) {
        left = reduced.slice(i,i+1);
        right = reduced.slice(i+2);
        result = this.curveintersects(left, right, curveIntersectionThreshold);
        results = results.concat( result );
      }
      return results;
    },
    curveintersects: function(c1, c2, curveIntersectionThreshold) {
      var pairs = [];
      // step 1: pair off any overlapping segments
      c1.forEach(function(l) {
        c2.forEach(function(r) {
          if(l.overlaps(r)) {
            pairs.push({ left: l, right: r });
          }
        });
      });
      // step 2: for each pairing, run through the convergence algorithm.
      var intersections = [];
      pairs.forEach(function(pair) {
        var result = utils.pairiteration(pair.left, pair.right, curveIntersectionThreshold);
        if(result.length > 0) {
          intersections = intersections.concat(result);
        }
      });
      return intersections;
    },
    arcs: function(errorThreshold) {
      errorThreshold = errorThreshold || 0.5;
      var circles = [];
      return this._iterate(errorThreshold, circles);
    },
    _error: function(pc, np1, s, e) {
      var q = (e - s) / 4,
          c1 = this.get(s + q),
          c2 = this.get(e - q),
          ref = utils.dist(pc, np1),
          d1  = utils.dist(pc, c1),
          d2  = utils.dist(pc, c2);
      return abs(d1-ref) + abs(d2-ref);
    },
    _iterate: function(errorThreshold, circles) {
      var s = 0, e = 1, safety;
      // we do a binary search to find the "good `t` closest to no-longer-good"
      do {
        safety=0;

        // step 1: start with the maximum possible arc
        e = 1;

        // points:
        var np1 = this.get(s), np2, np3, arc, prev_arc;

        // booleans:
        var curr_good = false, prev_good = false, done;

        // numbers:
        var m = e, prev_e = 1, step = 0;

        // step 2: find the best possible arc
        do {
          prev_good = curr_good;
          prev_arc = arc;
          m = (s + e)/2;
          step++;

          np2 = this.get(m);
          np3 = this.get(e);

          arc = utils.getccenter(np1, np2, np3);

          //also save the t values
          arc.interval = {
            start: s,
            end: e
          };

          var error = this._error(arc, np1, s, e);
          curr_good = (error <= errorThreshold);

          done = prev_good && !curr_good;
          if(!done) prev_e = e;

          // this arc is fine: we can move 'e' up to see if we can find a wider arc
          if(curr_good) {

            // if e is already at max, then we're done for this arc.
            if (e >= 1) {
              arc.interval.end = prev_e = 1;
              prev_arc = arc;
              break;
            }
            // if not, move it up by half the iteration distance
            e = e + (e-s)/2;
          }

          // this is a bad arc: we need to move 'e' down to find a good arc
          else {
            e = m;
          }
        }
        while(!done && safety++<100);

        if(safety>=100) {
          break;
        }

        // console.log("L835: [F] arc found", s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);

        prev_arc = (prev_arc ? prev_arc : arc);
        circles.push(prev_arc);
        s = prev_e;
      }
      while(e < 1);
      return circles;
    }
  };

  module.exports = Bezier;

}());

},{"./poly-bezier.js":50,"./utils.js":51}],50:[function(require,module,exports){
(function() {
  "use strict";

  var utils = require('./utils.js');

  /**
   * Poly Bezier
   * @param {[type]} curves [description]
   */
  var PolyBezier = function(curves) {
    this.curves = [];
    this._3d = false;
    if(!!curves) {
      this.curves = curves;
      this._3d = this.curves[0]._3d;
    }
  }

  PolyBezier.prototype = {
    valueOf: function() {
      return this.toString();
    },
    toString: function() {
      return "[" + this.curves.map(function(curve) {
        return utils.pointsToString(curve.points);
      }).join(", ") + "]";
    },
    addCurve: function(curve) {
      this.curves.push(curve);
      this._3d = this._3d || curve._3d;
    },
    length: function() {
      return this.curves.map(function(v) { return v.length(); }).reduce(function(a,b) { return a+b; });
    },
    curve: function(idx) {
      return this.curves[idx];
    },
    bbox: function() {
      var c = this.curves;
      var bbox = c[0].bbox();
      for(var i=1; i<c.length; i++) {
        utils.expandbox(bbox, c[i].bbox());
      }
      return bbox;
    },
    offset: function(d) {
      var offset = [];
      this.curves.forEach(function(v) {
        offset = offset.concat(v.offset(d));
      });
      return new PolyBezier(offset);
    }
  };

  module.exports = PolyBezier;
}());

},{"./utils.js":51}],51:[function(require,module,exports){
(function() {
  "use strict";

  // math-inlining.
  var abs = Math.abs,
      cos = Math.cos,
      sin = Math.sin,
      acos = Math.acos,
      atan2 = Math.atan2,
      sqrt = Math.sqrt,
      pow = Math.pow,
      // cube root function yielding real roots
      crt = function(v) { return (v<0) ? -pow(-v,1/3) : pow(v,1/3); },
      // trig constants
      pi = Math.PI,
      tau = 2*pi,
      quart = pi/2,
      // float precision significant decimal
      epsilon = 0.000001,
      // extremas used in bbox calculation and similar algorithms
      nMax = Number.MAX_SAFE_INTEGER,
      nMin = Number.MIN_SAFE_INTEGER;

  // Bezier utility functions
  var utils = {
    // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))
    Tvalues: [
      -0.0640568928626056260850430826247450385909,
       0.0640568928626056260850430826247450385909,
      -0.1911188674736163091586398207570696318404,
       0.1911188674736163091586398207570696318404,
      -0.3150426796961633743867932913198102407864,
       0.3150426796961633743867932913198102407864,
      -0.4337935076260451384870842319133497124524,
       0.4337935076260451384870842319133497124524,
      -0.5454214713888395356583756172183723700107,
       0.5454214713888395356583756172183723700107,
      -0.6480936519369755692524957869107476266696,
       0.6480936519369755692524957869107476266696,
      -0.7401241915785543642438281030999784255232,
       0.7401241915785543642438281030999784255232,
      -0.8200019859739029219539498726697452080761,
       0.8200019859739029219539498726697452080761,
      -0.8864155270044010342131543419821967550873,
       0.8864155270044010342131543419821967550873,
      -0.9382745520027327585236490017087214496548,
       0.9382745520027327585236490017087214496548,
      -0.9747285559713094981983919930081690617411,
       0.9747285559713094981983919930081690617411,
      -0.9951872199970213601799974097007368118745,
       0.9951872199970213601799974097007368118745
    ],

    // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)
    Cvalues: [
      0.1279381953467521569740561652246953718517,
      0.1279381953467521569740561652246953718517,
      0.1258374563468282961213753825111836887264,
      0.1258374563468282961213753825111836887264,
      0.1216704729278033912044631534762624256070,
      0.1216704729278033912044631534762624256070,
      0.1155056680537256013533444839067835598622,
      0.1155056680537256013533444839067835598622,
      0.1074442701159656347825773424466062227946,
      0.1074442701159656347825773424466062227946,
      0.0976186521041138882698806644642471544279,
      0.0976186521041138882698806644642471544279,
      0.0861901615319532759171852029837426671850,
      0.0861901615319532759171852029837426671850,
      0.0733464814110803057340336152531165181193,
      0.0733464814110803057340336152531165181193,
      0.0592985849154367807463677585001085845412,
      0.0592985849154367807463677585001085845412,
      0.0442774388174198061686027482113382288593,
      0.0442774388174198061686027482113382288593,
      0.0285313886289336631813078159518782864491,
      0.0285313886289336631813078159518782864491,
      0.0123412297999871995468056670700372915759,
      0.0123412297999871995468056670700372915759
    ],

    arcfn: function(t, derivativeFn) {
      var d = derivativeFn(t);
      var l = d.x*d.x + d.y*d.y;
      if(typeof d.z !== "undefined") {
        l += d.z*d.z;
      }
      return sqrt(l);
    },

    between: function(v, m, M) {
      return (m <= v && v <= M) || utils.approximately(v, m) || utils.approximately(v, M);
    },

    approximately: function(a,b,precision) {
      return abs(a-b) <= (precision || epsilon);
    },

    length: function(derivativeFn) {
      var z=0.5,sum=0,len=utils.Tvalues.length,i,t;
      for(i=0; i<len; i++) {
        t = z * utils.Tvalues[i] + z;
        sum += utils.Cvalues[i] * utils.arcfn(t,derivativeFn);
      }
      return z * sum;
    },

    map: function(v, ds,de, ts,te) {
      var d1 = de-ds, d2 = te-ts, v2 =  v-ds, r = v2/d1;
      return ts + d2*r;
    },

    lerp: function(r, v1, v2) {
      var ret = {
        x: v1.x + r*(v2.x-v1.x),
        y: v1.y + r*(v2.y-v1.y)
      };
      if(!!v1.z && !!v2.z) {
        ret.z =  v1.z + r*(v2.z-v1.z);
      }
      return ret;
    },

    pointToString: function(p) {
      var s = p.x+"/"+p.y;
      if(typeof p.z !== "undefined") {
        s += "/"+p.z;
      }
      return s;
    },

    pointsToString: function(points) {
      return "[" + points.map(utils.pointToString).join(", ") + "]";
    },

    copy: function(obj) {
      return JSON.parse(JSON.stringify(obj));
    },

    angle: function(o,v1,v2) {
      var dx1 = v1.x - o.x,
          dy1 = v1.y - o.y,
          dx2 = v2.x - o.x,
          dy2 = v2.y - o.y,
          cross = dx1*dy2 - dy1*dx2,
          dot = dx1*dx2 + dy1*dy2;
      return atan2(cross, dot);
    },

    // round as string, to avoid rounding errors
    round: function(v, d) {
      var s = '' + v;
      var pos = s.indexOf(".");
      return parseFloat(s.substring(0,pos+1+d));
    },

    dist: function(p1, p2) {
      var dx = p1.x - p2.x,
          dy = p1.y - p2.y;
      return sqrt(dx*dx+dy*dy);
    },

    closest: function(LUT, point) {
      var mdist = pow(2,63), mpos, d;
      LUT.forEach(function(p, idx) {
        d = utils.dist(point, p);
        if (d<mdist) {
          mdist = d;
          mpos = idx;
        }
      });
      return { mdist:mdist, mpos:mpos };
    },

    abcratio: function(t, n) {
      // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc
      if (n!==2 && n!==3) {
        return false;
      }
      if (typeof t === "undefined") {
        t = 0.5;
      } else if (t===0 || t===1) {
        return t;
      }
      var bottom = pow(t,n) + pow(1-t,n), top = bottom - 1;
      return abs(top/bottom);
    },

    projectionratio: function(t, n) {
      // see u(t) note on http://pomax.github.io/bezierinfo/#abc
      if (n!==2 && n!==3) {
        return false;
      }
      if (typeof t === "undefined") {
        t = 0.5;
      } else if (t===0 || t===1) {
        return t;
      }
      var top = pow(1-t, n), bottom = pow(t,n) + top;
      return top/bottom;
    },

    lli8: function(x1,y1,x2,y2,x3,y3,x4,y4) {
      var nx=(x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4),
          ny=(x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4),
          d=(x1-x2)*(y3-y4)-(y1-y2)*(x3-x4);
      if(d==0) { return false; }
      return { x: nx/d, y: ny/d };
    },

    lli4: function(p1,p2,p3,p4) {
      var x1 = p1.x, y1 = p1.y,
          x2 = p2.x, y2 = p2.y,
          x3 = p3.x, y3 = p3.y,
          x4 = p4.x, y4 = p4.y;
      return utils.lli8(x1,y1,x2,y2,x3,y3,x4,y4);
    },

    lli: function(v1, v2) {
      return utils.lli4(v1,v1.c,v2,v2.c);
    },

    makeline: function(p1,p2) {
      var Bezier = require('./bezier');
      var x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y, dx = (x2-x1)/3, dy = (y2-y1)/3;
      return new Bezier(x1, y1, x1+dx, y1+dy, x1+2*dx, y1+2*dy, x2, y2);
    },

    findbbox: function(sections) {
      var mx=nMax,my=nMax,MX=nMin,MY=nMin;
      sections.forEach(function(s) {
        var bbox = s.bbox();
        if(mx > bbox.x.min) mx = bbox.x.min;
        if(my > bbox.y.min) my = bbox.y.min;
        if(MX < bbox.x.max) MX = bbox.x.max;
        if(MY < bbox.y.max) MY = bbox.y.max;
      });
      return {
        x: { min: mx, mid:(mx+MX)/2, max: MX, size:MX-mx },
        y: { min: my, mid:(my+MY)/2, max: MY, size:MY-my }
      }
    },

    shapeintersections: function(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {
      if(!utils.bboxoverlap(bbox1, bbox2)) return [];
      var intersections = [];
      var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];
      var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];
      a1.forEach(function(l1) {
        if(l1.virtual) return;
        a2.forEach(function(l2) {
          if(l2.virtual) return;
          var iss = l1.intersects(l2, curveIntersectionThreshold);
          if(iss.length>0) {
            iss.c1 = l1;
            iss.c2 = l2;
            iss.s1 = s1;
            iss.s2 = s2;
            intersections.push(iss);
          }
        });
      });
      return intersections;
    },

    makeshape: function(forward, back, curveIntersectionThreshold) {
      var bpl = back.points.length;
      var fpl = forward.points.length;
      var start  = utils.makeline(back.points[bpl-1], forward.points[0]);
      var end    = utils.makeline(forward.points[fpl-1], back.points[0]);
      var shape  = {
        startcap: start,
        forward: forward,
        back: back,
        endcap: end,
        bbox: utils.findbbox([start, forward, back, end])
      };
      var self = utils;
      shape.intersections = function(s2) {
        return self.shapeintersections(shape,shape.bbox,s2,s2.bbox, curveIntersectionThreshold);
      };
      return shape;
    },

    getminmax: function(curve, d, list) {
      if(!list) return { min:0, max:0 };
      var min=nMax, max=nMin,t,c;
      if(list.indexOf(0)===-1) { list = [0].concat(list); }
      if(list.indexOf(1)===-1) { list.push(1); }
      for(var i=0,len=list.length; i<len; i++) {
        t = list[i];
        c = curve.get(t);
        if(c[d] < min) { min = c[d]; }
        if(c[d] > max) { max = c[d]; }
      }
      return { min:min, mid:(min+max)/2, max:max, size:max-min };
    },

    align: function(points, line) {
      var tx = line.p1.x,
          ty = line.p1.y,
          a = -atan2(line.p2.y-ty, line.p2.x-tx),
          d = function(v) {
            return {
              x: (v.x-tx)*cos(a) - (v.y-ty)*sin(a),
              y: (v.x-tx)*sin(a) + (v.y-ty)*cos(a)
            };
          };
      return points.map(d);
    },

    roots: function(points, line) {
      line = line || {p1:{x:0,y:0},p2:{x:1,y:0}};
      var order = points.length - 1;
      var p = utils.align(points, line);
      var reduce = function(t) { return 0<=t && t <=1; };

      if (order === 2) {
        var a = p[0].y,
            b = p[1].y,
            c = p[2].y,
            d = a - 2*b + c;
        if(d!==0) {
          var m1 = -sqrt(b*b-a*c),
              m2 = -a+b,
              v1 = -( m1+m2)/d,
              v2 = -(-m1+m2)/d;
          return [v1, v2].filter(reduce);
        }
        else if(b!==c && d===0) {
          return [ (2*b-c)/2*(b-c) ].filter(reduce);
        }
        return [];
      }

      // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm
      var pa = p[0].y,
          pb = p[1].y,
          pc = p[2].y,
          pd = p[3].y,
          d = (-pa + 3*pb - 3*pc + pd),
          a = (3*pa - 6*pb + 3*pc) / d,
          b = (-3*pa + 3*pb) / d,
          c = pa / d,
          p = (3*b - a*a)/3,
          p3 = p/3,
          q = (2*a*a*a - 9*a*b + 27*c)/27,
          q2 = q/2,
          discriminant = q2*q2 + p3*p3*p3,
          u1,v1,x1,x2,x3;
       if (discriminant < 0) {
        var mp3 = -p/3,
            mp33 = mp3*mp3*mp3,
            r = sqrt( mp33 ),
            t = -q/(2*r),
            cosphi = t<-1 ? -1 : t>1 ? 1 : t,
            phi = acos(cosphi),
            crtr = crt(r),
            t1 = 2*crtr;
        x1 = t1 * cos(phi/3) - a/3;
        x2 = t1 * cos((phi+tau)/3) - a/3;
        x3 = t1 * cos((phi+2*tau)/3) - a/3;
        return [x1, x2, x3].filter(reduce);
      } else if(discriminant === 0) {
        u1 = q2 < 0 ? crt(-q2) : -crt(q2);
        x1 = 2*u1-a/3;
        x2 = -u1 - a/3;
        return [x1,x2].filter(reduce);
      } else {
        var sd = sqrt(discriminant);
        u1 = crt(-q2+sd);
        v1 = crt(q2+sd);
        return [u1-v1-a/3].filter(reduce);;
      }
    },

    droots: function(p) {
      // quadratic roots are easy
      if(p.length === 3) {
        var a = p[0],
            b = p[1],
            c = p[2],
            d = a - 2*b + c;
        if(d!==0) {
          var m1 = -sqrt(b*b-a*c),
              m2 = -a+b,
              v1 = -( m1+m2)/d,
              v2 = -(-m1+m2)/d;
          return [v1, v2];
        }
        else if(b!==c && d===0) {
          return [(2*b-c)/(2*(b-c))];
        }
        return [];
      }

      // linear roots are even easier
      if(p.length === 2) {
        var a = p[0], b = p[1];
        if(a!==b) {
          return [a/(a-b)];
        }
        return [];
      }
    },

    inflections: function(points) {
      if (points.length<4) return [];

      // FIXME: TODO: add in inflection abstraction for quartic+ curves?

      var p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),
          a = p[2].x * p[1].y,
          b = p[3].x * p[1].y,
          c = p[1].x * p[2].y,
          d = p[3].x * p[2].y,
          v1 = 18 * (-3*a + 2*b + 3*c - d),
          v2 = 18 * (3*a - b - 3*c),
          v3 = 18 * (c - a);

      if (utils.approximately(v1,0)){
        if(!utils.approximately(v2,0)){
          var t = -v3/v2;
          if (0 <= t && t <= 1)
             return [t];
        }
        return [];
      }

      var trm = v2*v2 - 4*v1*v3,
          sq = Math.sqrt(trm),
          d = 2 * v1;

      if (utils.approximately(d,0)) return [];

      return [(sq-v2)/d, -(v2+sq)/d].filter(function(r) {
        return (0 <= r && r <= 1);
      });
    },

    bboxoverlap: function(b1,b2) {
      var dims=['x','y'],len=dims.length,i,dim,l,t,d
      for(i=0; i<len; i++) {
        dim = dims[i];
        l = b1[dim].mid;
        t = b2[dim].mid;
        d = (b1[dim].size + b2[dim].size)/2;
        if(abs(l-t) >= d) return false;
      }
      return true;
    },

    expandbox: function(bbox, _bbox) {
      if(_bbox.x.min < bbox.x.min) { bbox.x.min = _bbox.x.min; }
      if(_bbox.y.min < bbox.y.min) { bbox.y.min = _bbox.y.min; }
      if(_bbox.z && _bbox.z.min < bbox.z.min) { bbox.z.min = _bbox.z.min; }
      if(_bbox.x.max > bbox.x.max) { bbox.x.max = _bbox.x.max; }
      if(_bbox.y.max > bbox.y.max) { bbox.y.max = _bbox.y.max; }
      if(_bbox.z && _bbox.z.max > bbox.z.max) { bbox.z.max = _bbox.z.max; }
      bbox.x.mid = (bbox.x.min + bbox.x.max)/2;
      bbox.y.mid = (bbox.y.min + bbox.y.max)/2;
      if(bbox.z) { bbox.z.mid = (bbox.z.min + bbox.z.max)/2; }
      bbox.x.size = bbox.x.max - bbox.x.min;
      bbox.y.size = bbox.y.max - bbox.y.min;
      if(bbox.z) { bbox.z.size = bbox.z.max - bbox.z.min; }
    },

    pairiteration: function(c1, c2, curveIntersectionThreshold) {
      var c1b = c1.bbox(),
          c2b = c2.bbox(),
          r = 100000,
          threshold = curveIntersectionThreshold || 0.5;
      if(c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {
        return [ ((r * (c1._t1+c1._t2)/2)|0)/r + "/" + ((r * (c2._t1+c2._t2)/2)|0)/r ];
      }
      var cc1 = c1.split(0.5),
          cc2 = c2.split(0.5),
          pairs = [
            {left: cc1.left, right: cc2.left },
            {left: cc1.left, right: cc2.right },
            {left: cc1.right, right: cc2.right },
            {left: cc1.right, right: cc2.left }];
      pairs = pairs.filter(function(pair) {
        return utils.bboxoverlap(pair.left.bbox(),pair.right.bbox());
      });
      var results = [];
      if(pairs.length === 0) return results;
      pairs.forEach(function(pair) {
        results = results.concat(
          utils.pairiteration(pair.left, pair.right, threshold)
        );
      })
      results = results.filter(function(v,i) {
        return results.indexOf(v) === i;
      });
      return results;
    },

    getccenter: function(p1,p2,p3) {
      var dx1 = (p2.x - p1.x),
          dy1 = (p2.y - p1.y),
          dx2 = (p3.x - p2.x),
          dy2 = (p3.y - p2.y);
      var dx1p = dx1 * cos(quart) - dy1 * sin(quart),
          dy1p = dx1 * sin(quart) + dy1 * cos(quart),
          dx2p = dx2 * cos(quart) - dy2 * sin(quart),
          dy2p = dx2 * sin(quart) + dy2 * cos(quart);
      // chord midpoints
      var mx1 = (p1.x + p2.x)/2,
          my1 = (p1.y + p2.y)/2,
          mx2 = (p2.x + p3.x)/2,
          my2 = (p2.y + p3.y)/2;
      // midpoint offsets
      var mx1n = mx1 + dx1p,
          my1n = my1 + dy1p,
          mx2n = mx2 + dx2p,
          my2n = my2 + dy2p;
      // intersection of these lines:
      var arc = utils.lli8(mx1,my1,mx1n,my1n, mx2,my2,mx2n,my2n),
          r = utils.dist(arc,p1),
          // arc start/end values, over mid point:
          s = atan2(p1.y - arc.y, p1.x - arc.x),
          m = atan2(p2.y - arc.y, p2.x - arc.x),
          e = atan2(p3.y - arc.y, p3.x - arc.x),
          _;
      // determine arc direction (cw/ccw correction)
      if (s<e) {
        // if s<m<e, arc(s, e)
        // if m<s<e, arc(e, s + tau)
        // if s<e<m, arc(e, s + tau)
        if (s>m || m>e) { s += tau; }
        if (s>e) { _=e; e=s; s=_; }
      } else {
        // if e<m<s, arc(e, s)
        // if m<e<s, arc(s, e + tau)
        // if e<s<m, arc(s, e + tau)
        if (e<m && m<s) { _=e; e=s; s=_; } else { e += tau; }
      }
      // assign and done.
      arc.s = s;
      arc.e = e;
      arc.r = r;
      return arc;
    }
  };

  module.exports = utils;
}());

},{"./bezier":49}],52:[function(require,module,exports){
// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

(function(Math) {

var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

// Node: Export function
if (typeof module !== "undefined" && module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else if (typeof define === 'function' && define.amd) {
    define(function () {return tinycolor;});
}
// Browser: Expose to window
else {
    window.tinycolor = tinycolor;
}

})(Math);

},{}],53:[function(require,module,exports){

var zip = require('zip');

function createUrl(src){
  var blob = new Blob([src], { type: 'application/javascript' });
  return URL.createObjectURL(blob);
}

var zWorker = createUrl("/* jshint worker:true */\n(function main(global) {\n\t\"use strict\";\n\n\tif (global.zWorkerInitialized)\n\t\tthrow new Error('z-worker.js should be run only once');\n\tglobal.zWorkerInitialized = true;\n\n\taddEventListener(\"message\", function(event) {\n\t\tvar message = event.data, type = message.type, sn = message.sn;\n\t\tvar handler = handlers[type];\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\thandler(message);\n\t\t\t} catch (e) {\n\t\t\t\tonError(type, sn, e);\n\t\t\t}\n\t\t}\n\t\t//for debug\n\t\t//postMessage({type: 'echo', originalType: type, sn: sn});\n\t});\n\n\tvar handlers = {\n\t\timportScripts: doImportScripts,\n\t\tnewTask: newTask,\n\t\tappend: processData,\n\t\tflush: processData,\n\t};\n\n\t// deflater/inflater tasks indexed by serial numbers\n\tvar tasks = {};\n\n\tfunction doImportScripts(msg) {\n\t\tif (msg.scripts && msg.scripts.length > 0)\n\t\t\timportScripts.apply(undefined, msg.scripts);\n\t\tpostMessage({type: 'importScripts'});\n\t}\n\n\tfunction newTask(msg) {\n\t\tvar CodecClass = global[msg.codecClass];\n\t\tvar sn = msg.sn;\n\t\tif (tasks[sn])\n\t\t\tthrow Error('duplicated sn');\n\t\ttasks[sn] =  {\n\t\t\tcodec: new CodecClass(msg.options),\n\t\t\tcrcInput: msg.crcType === 'input',\n\t\t\tcrcOutput: msg.crcType === 'output',\n\t\t\tcrc: new Crc32(),\n\t\t};\n\t\tpostMessage({type: 'newTask', sn: sn});\n\t}\n\n\t// performance may not be supported\n\tvar now = global.performance ? global.performance.now.bind(global.performance) : Date.now;\n\n\tfunction processData(msg) {\n\t\tvar sn = msg.sn, type = msg.type, input = msg.data;\n\t\tvar task = tasks[sn];\n\t\t// allow creating codec on first append\n\t\tif (!task && msg.codecClass) {\n\t\t\tnewTask(msg);\n\t\t\ttask = tasks[sn];\n\t\t}\n\t\tvar isAppend = type === 'append';\n\t\tvar start = now();\n\t\tvar output;\n\t\tif (isAppend) {\n\t\t\ttry {\n\t\t\t\toutput = task.codec.append(input, function onprogress(loaded) {\n\t\t\t\t\tpostMessage({type: 'progress', sn: sn, loaded: loaded});\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tdelete tasks[sn];\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tdelete tasks[sn];\n\t\t\toutput = task.codec.flush();\n\t\t}\n\t\tvar codecTime = now() - start;\n\n\t\tstart = now();\n\t\tif (input && task.crcInput)\n\t\t\ttask.crc.append(input);\n\t\tif (output && task.crcOutput)\n\t\t\ttask.crc.append(output);\n\t\tvar crcTime = now() - start;\n\n\t\tvar rmsg = {type: type, sn: sn, codecTime: codecTime, crcTime: crcTime};\n\t\tvar transferables = [];\n\t\tif (output) {\n\t\t\trmsg.data = output;\n\t\t\ttransferables.push(output.buffer);\n\t\t}\n\t\tif (!isAppend && (task.crcInput || task.crcOutput))\n\t\t\trmsg.crc = task.crc.get();\n\t\t\n\t\t// posting a message with transferables will fail on IE10\n\t\ttry {\n\t\t\tpostMessage(rmsg, transferables);\n\t\t} catch(ex) {\n\t\t\tpostMessage(rmsg); // retry without transferables\n\t\t}\n\t}\n\n\tfunction onError(type, sn, e) {\n\t\tvar msg = {\n\t\t\ttype: type,\n\t\t\tsn: sn,\n\t\t\terror: formatError(e)\n\t\t};\n\t\tpostMessage(msg);\n\t}\n\n\tfunction formatError(e) {\n\t\treturn { message: e.message, stack: e.stack };\n\t}\n\n\t// Crc32 code copied from file zip.js\n\tfunction Crc32() {\n\t\tthis.crc = -1;\n\t}\n\tCrc32.prototype.append = function append(data) {\n\t\tvar crc = this.crc | 0, table = this.table;\n\t\tfor (var offset = 0, len = data.length | 0; offset < len; offset++)\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n\t\tthis.crc = crc;\n\t};\n\tCrc32.prototype.get = function get() {\n\t\treturn ~this.crc;\n\t};\n\tCrc32.prototype.table = (function() {\n\t\tvar i, j, t, table = []; // Uint32Array is actually slower than []\n\t\tfor (i = 0; i < 256; i++) {\n\t\t\tt = i;\n\t\t\tfor (j = 0; j < 8; j++)\n\t\t\t\tif (t & 1)\n\t\t\t\t\tt = (t >>> 1) ^ 0xEDB88320;\n\t\t\t\telse\n\t\t\t\t\tt = t >>> 1;\n\t\t\ttable[i] = t;\n\t\t}\n\t\treturn table;\n\t})();\n\n\t// \"no-op\" codec\n\tfunction NOOP() {}\n\tglobal.NOOP = NOOP;\n\tNOOP.prototype.append = function append(bytes, onprogress) {\n\t\treturn bytes;\n\t};\n\tNOOP.prototype.flush = function flush() {};\n})(this);\n");
zip.workerScripts = {
  deflater: [zWorker, createUrl("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\n\tvar MAX_BITS = 15;\n\tvar D_CODES = 30;\n\tvar BL_CODES = 19;\n\n\tvar LENGTH_CODES = 29;\n\tvar LITERALS = 256;\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\n\n\tvar END_BLOCK = 256;\n\n\t// Bit length codes must not exceed MAX_BL_BITS bits\n\tvar MAX_BL_BITS = 7;\n\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\n\tvar REP_3_6 = 16;\n\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\n\tvar REPZ_3_10 = 17;\n\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\n\tvar REPZ_11_138 = 18;\n\n\t// The lengths of the bit length codes are sent in order of decreasing\n\t// probability, to avoid transmitting the lengths for unused bit\n\t// length codes.\n\n\tvar Buf_size = 8 * 2;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\n\t// compression strategy\n\tvar Z_FILTERED = 1;\n\tvar Z_HUFFMAN_ONLY = 2;\n\tvar Z_DEFAULT_STRATEGY = 0;\n\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\tvar Z_FULL_FLUSH = 3;\n\tvar Z_FINISH = 4;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_BUF_ERROR = -5;\n\n\t// Tree\n\n\t// see definition of array dist_code below\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\n\n\tfunction Tree() {\n\t\tvar that = this;\n\n\t\t// dyn_tree; // the dynamic tree\n\t\t// max_code; // largest code with non zero frequency\n\t\t// stat_desc; // the corresponding static tree\n\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\n\t\t// length\n\t\t// for the current block.\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t\t// above are the tree nodes sorted by increasing frequency.\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\n\t\t// array bl_count contains the frequencies for each bit length.\n\t\t// The length opt_len is updated; static_len is also updated if stree is\n\t\t// not null.\n\t\tfunction gen_bitlen(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar extra = that.stat_desc.extra_bits;\n\t\t\tvar base = that.stat_desc.extra_base;\n\t\t\tvar max_length = that.stat_desc.max_length;\n\t\t\tvar h; // heap index\n\t\t\tvar n, m; // iterate over the tree elements\n\t\t\tvar bits; // bit length\n\t\t\tvar xbits; // extra bits\n\t\t\tvar f; // frequency\n\t\t\tvar overflow = 0; // number of elements with bit length too large\n\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\n\t\t\t\ts.bl_count[bits] = 0;\n\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t\t// overflow in the case of the bit length tree).\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\t\tn = s.heap[h];\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\t\t\t\tif (bits > max_length) {\n\t\t\t\t\tbits = max_length;\n\t\t\t\t\toverflow++;\n\t\t\t\t}\n\t\t\t\ttree[n * 2 + 1] = bits;\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\n\n\t\t\t\tif (n > that.max_code)\n\t\t\t\t\tcontinue; // not a leaf node\n\n\t\t\t\ts.bl_count[bits]++;\n\t\t\t\txbits = 0;\n\t\t\t\tif (n >= base)\n\t\t\t\t\txbits = extra[n - base];\n\t\t\t\tf = tree[n * 2];\n\t\t\t\ts.opt_len += f * (bits + xbits);\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\n\t\t\t}\n\t\t\tif (overflow === 0)\n\t\t\t\treturn;\n\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\t\t\t// Find the first bit length which could increase:\n\t\t\tdo {\n\t\t\t\tbits = max_length - 1;\n\t\t\t\twhile (s.bl_count[bits] === 0)\n\t\t\t\t\tbits--;\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\t\ts.bl_count[max_length]--;\n\t\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t\t// but this does not affect bl_count[max_length]\n\t\t\t\toverflow -= 2;\n\t\t\t} while (overflow > 0);\n\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\t\tn = s.bl_count[bits];\n\t\t\t\twhile (n !== 0) {\n\t\t\t\t\tm = s.heap[--h];\n\t\t\t\t\tif (m > that.max_code)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\n\t\t\t\t\t}\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse the first len bits of a code, using straightforward code (a\n\t\t// faster\n\t\t// method would use a table)\n\t\t// IN assertion: 1 <= len <= 15\n\t\tfunction bi_reverse(code, // the value to invert\n\t\tlen // its bit length\n\t\t) {\n\t\t\tvar res = 0;\n\t\t\tdo {\n\t\t\t\tres |= code & 1;\n\t\t\t\tcode >>>= 1;\n\t\t\t\tres <<= 1;\n\t\t\t} while (--len > 0);\n\t\t\treturn res >>> 1;\n\t\t}\n\n\t\t// Generate the codes for a given tree and bit counts (which need not be\n\t\t// optimal).\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\n\t\t// the given tree and the field len is set for all tree elements.\n\t\t// OUT assertion: the field code is set for all tree elements of non\n\t\t// zero code length.\n\t\tfunction gen_codes(tree, // the tree to decorate\n\t\tmax_code, // largest code with non zero frequency\n\t\tbl_count // number of codes at each bit length\n\t\t) {\n\t\t\tvar next_code = []; // next code value for each\n\t\t\t// bit length\n\t\t\tvar code = 0; // running code value\n\t\t\tvar bits; // bit index\n\t\t\tvar n; // code index\n\t\t\tvar len;\n\n\t\t\t// The distribution counts are first used to generate the code values\n\t\t\t// without bit reversal.\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\n\t\t\t}\n\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t\t// must be all ones.\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t\t\t// \"inconsistent bit counts\");\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tlen = tree[n * 2 + 1];\n\t\t\t\tif (len === 0)\n\t\t\t\t\tcontinue;\n\t\t\t\t// Now reverse the bits\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\n\t\t\t}\n\t\t}\n\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\n\t\t// Update the total bit length for the current block.\n\t\t// IN assertion: the field freq is set for all tree elements.\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\n\t\t// and corresponding code. The length opt_len is updated; static_len is\n\t\t// also updated if stree is not null. The field max_code is set.\n\t\tthat.build_tree = function(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar elems = that.stat_desc.elems;\n\t\t\tvar n, m; // iterate over heap elements\n\t\t\tvar max_code = -1; // largest code with non zero frequency\n\t\t\tvar node; // new node being created\n\n\t\t\t// Construct the initial heap, with least frequent element in\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t\t// heap[0] is not used.\n\t\t\ts.heap_len = 0;\n\t\t\ts.heap_max = HEAP_SIZE;\n\n\t\t\tfor (n = 0; n < elems; n++) {\n\t\t\t\tif (tree[n * 2] !== 0) {\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\n\t\t\t\t\ts.depth[n] = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttree[n * 2 + 1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The pkzip format requires that at least one distance code exists,\n\t\t\t// and that at least one bit should be sent even if there is only one\n\t\t\t// possible code. So to avoid special checks later on we force at least\n\t\t\t// two codes of non zero frequency.\n\t\t\twhile (s.heap_len < 2) {\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n\t\t\t\ttree[node * 2] = 1;\n\t\t\t\ts.depth[node] = 0;\n\t\t\t\ts.opt_len--;\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\n\t\t\t}\n\t\t\tthat.max_code = max_code;\n\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t\t// establish sub-heaps of increasing lengths:\n\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\n\t\t\t\ts.pqdownheap(tree, n);\n\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t\t// frequent nodes.\n\n\t\t\tnode = elems; // next internal node of the tree\n\t\t\tdo {\n\t\t\t\t// n = node of least frequency\n\t\t\t\tn = s.heap[1];\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\n\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\t\t\t\ts.heap[--s.heap_max] = m;\n\n\t\t\t\t// Create a new node father of n and m\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n\t\t\t\t// and insert the new node in the heap\n\t\t\t\ts.heap[1] = node++;\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t} while (s.heap_len >= 2);\n\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\n\n\t\t\t// At this point, the fields freq and dad are set. We can now\n\t\t\t// generate the bit lengths.\n\n\t\t\tgen_bitlen(s);\n\n\t\t\t// The field len is now set, we can generate the bit codes\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\n\t\t};\n\n\t}\n\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\n\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\n\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t\t\t24576 ];\n\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\n\t// used.\n\tTree.d_code = function(dist) {\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\n\t};\n\n\t// extra bits for each length code\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\n\n\t// extra bits for each distance code\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// extra bits for each bit length code\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\n\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\t// StaticTree\n\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n\t\tvar that = this;\n\t\tthat.static_tree = static_tree;\n\t\tthat.extra_bits = extra_bits;\n\t\tthat.extra_base = extra_base;\n\t\tthat.elems = elems;\n\t\tthat.max_length = max_length;\n\t}\n\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\n\t\t\t99, 8, 227, 8 ];\n\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\n\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n\t// Deflate\n\n\tvar MAX_MEM_LEVEL = 9;\n\tvar DEF_MEM_LEVEL = 8;\n\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\t\tvar that = this;\n\t\tthat.good_length = good_length;\n\t\tthat.max_lazy = max_lazy;\n\t\tthat.nice_length = nice_length;\n\t\tthat.max_chain = max_chain;\n\t\tthat.func = func;\n\t}\n\n\tvar STORED = 0;\n\tvar FAST = 1;\n\tvar SLOW = 2;\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\n\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT\n\t// 2\n\t\"stream end\", // Z_STREAM_END 1\n\t\"\", // Z_OK 0\n\t\"\", // Z_ERRNO (-1)\n\t\"stream error\", // Z_STREAM_ERROR (-2)\n\t\"data error\", // Z_DATA_ERROR (-3)\n\t\"\", // Z_MEM_ERROR (-4)\n\t\"buffer error\", // Z_BUF_ERROR (-5)\n\t\"\",// Z_VERSION_ERROR (-6)\n\t\"\" ];\n\n\t// block not completed, need more input or more output\n\tvar NeedMore = 0;\n\n\t// block flush performed\n\tvar BlockDone = 1;\n\n\t// finish started, need only more output at next deflate\n\tvar FinishStarted = 2;\n\n\t// finish done, accept no more input or output\n\tvar FinishDone = 3;\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar INIT_STATE = 42;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\n\t// The deflate compression method\n\tvar Z_DEFLATED = 8;\n\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES = 2;\n\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\n\tfunction smaller(tree, n, m, depth) {\n\t\tvar tn2 = tree[n * 2];\n\t\tvar tm2 = tree[m * 2];\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\n\t}\n\n\tfunction Deflate() {\n\n\t\tvar that = this;\n\t\tvar strm; // pointer back to this zlib stream\n\t\tvar status; // as the name implies\n\t\t// pending_buf; // output still pending\n\t\tvar pending_buf_size; // size of pending_buf\n\t\t// pending_out; // next pending byte to output to the stream\n\t\t// pending; // nb of bytes in the pending buffer\n\t\tvar method; // STORED (for zip only) or DEFLATED\n\t\tvar last_flush; // value of flush param for previous deflate call\n\n\t\tvar w_size; // LZ77 window size (32K by default)\n\t\tvar w_bits; // log2(w_size) (8..16)\n\t\tvar w_mask; // w_size - 1\n\n\t\tvar window;\n\t\t// Sliding window. Input bytes are read into the second half of the window,\n\t\t// and move to the first half later to keep a dictionary of at least wSize\n\t\t// bytes. With this organization, matches are limited to a distance of\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t\t// performed with a length multiple of the block size. Also, it limits\n\t\t// the window size to 64K, which is quite useful on MSDOS.\n\t\t// To do: use the user input buffer as sliding window.\n\n\t\tvar window_size;\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\n\t\t// is directly used as sliding window.\n\n\t\tvar prev;\n\t\t// Link to older string with same hash index. To limit the size of this\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\n\t\t// An index in this array is thus a window index modulo 32K.\n\n\t\tvar head; // Heads of the hash chains or NIL.\n\n\t\tvar ins_h; // hash index of string to be inserted\n\t\tvar hash_size; // number of elements in hash table\n\t\tvar hash_bits; // log2(hash_size)\n\t\tvar hash_mask; // hash_size-1\n\n\t\t// Number of bits by which ins_h must be shifted at each input\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\n\t\t// byte no longer takes part in the hash key, that is:\n\t\t// hash_shift * MIN_MATCH >= hash_bits\n\t\tvar hash_shift;\n\n\t\t// Window position at the beginning of the current output block. Gets\n\t\t// negative when the window is moved backwards.\n\n\t\tvar block_start;\n\n\t\tvar match_length; // length of best match\n\t\tvar prev_match; // previous match\n\t\tvar match_available; // set if previous match exists\n\t\tvar strstart; // start of string to insert\n\t\tvar match_start; // start of matching string\n\t\tvar lookahead; // number of valid bytes ahead in window\n\n\t\t// Length of the best match at previous step. Matches not greater than this\n\t\t// are discarded. This is used in the lazy match evaluation.\n\t\tvar prev_length;\n\n\t\t// To speed up deflation, hash chains are never searched beyond this\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\n\t\tvar max_chain_length;\n\n\t\t// Attempt to find a better match only when the current match is strictly\n\t\t// smaller than this value. This mechanism is used only for compression\n\t\t// levels >= 4.\n\t\tvar max_lazy_match;\n\n\t\t// Insert new strings in the hash table only if the match length is not\n\t\t// greater than this length. This saves time but degrades compression.\n\t\t// max_insert_length is used only for compression levels <= 3.\n\n\t\tvar level; // compression level (1..9)\n\t\tvar strategy; // favor or force Huffman coding\n\n\t\t// Use a faster search when the previous match is longer than this\n\t\tvar good_match;\n\n\t\t// Stop searching when current match exceeds this\n\t\tvar nice_match;\n\n\t\tvar dyn_ltree; // literal and length tree\n\t\tvar dyn_dtree; // distance tree\n\t\tvar bl_tree; // Huffman tree for bit lengths\n\n\t\tvar l_desc = new Tree(); // desc for literal tree\n\t\tvar d_desc = new Tree(); // desc for distance tree\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\n\n\t\t// that.heap_len; // number of elements in the heap\n\t\t// that.heap_max; // element of largest frequency\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t\t// The same heap array is used to build all trees.\n\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\n\t\tthat.depth = [];\n\n\t\tvar l_buf; // index for literals or lengths */\n\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\n\t\t// limiting lit_bufsize to 64K:\n\t\t// - frequencies can be kept in 16 bit counters\n\t\t// - if compression is not successful for the first block, all input\n\t\t// data is still in the window so we can still emit a stored block even\n\t\t// when input comes from standard input. (This can also be done for\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\n\t\t// - if compression is not successful for a file smaller than 64K, we can\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\n\t\t// This is applicable only for zip (not gzip or zlib).\n\t\t// - creating new Huffman trees less frequently may not provide fast\n\t\t// adaptation to changes in the input data statistics. (Take for\n\t\t// example a binary file with poorly compressible code followed by\n\t\t// a highly compressible string table.) Smaller buffer sizes give\n\t\t// fast adaptation but have of course the overhead of transmitting\n\t\t// trees more frequently.\n\t\t// - I can't count above 4\n\t\tvar lit_bufsize;\n\n\t\tvar last_lit; // running index in l_buf\n\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\n\t\t// the same number of elements. To use different lengths, an extra flag\n\t\t// array would be necessary.\n\n\t\tvar d_buf; // index of pendig_buf\n\n\t\t// that.opt_len; // bit length of current block with optimal trees\n\t\t// that.static_len; // bit length of current block with static trees\n\t\tvar matches; // number of string matches in current block\n\t\tvar last_eob_len; // bit length of EOB code for last block\n\n\t\t// Output buffer. bits are inserted starting at the bottom (least\n\t\t// significant bits).\n\t\tvar bi_buf;\n\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\n\t\t// are always zero.\n\t\tvar bi_valid;\n\n\t\t// number of codes at each bit length for an optimal tree\n\t\tthat.bl_count = [];\n\n\t\t// heap used to build the Huffman trees\n\t\tthat.heap = [];\n\n\t\tdyn_ltree = [];\n\t\tdyn_dtree = [];\n\t\tbl_tree = [];\n\n\t\tfunction lm_init() {\n\t\t\tvar i;\n\t\t\twindow_size = 2 * w_size;\n\n\t\t\thead[hash_size - 1] = 0;\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\n\t\t\t\thead[i] = 0;\n\t\t\t}\n\n\t\t\t// Set the default configuration parameters:\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\tgood_match = config_table[level].good_length;\n\t\t\tnice_match = config_table[level].nice_length;\n\t\t\tmax_chain_length = config_table[level].max_chain;\n\n\t\t\tstrstart = 0;\n\t\t\tblock_start = 0;\n\t\t\tlookahead = 0;\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\n\t\t\tmatch_available = 0;\n\t\t\tins_h = 0;\n\t\t}\n\n\t\tfunction init_block() {\n\t\t\tvar i;\n\t\t\t// Initialize the trees.\n\t\t\tfor (i = 0; i < L_CODES; i++)\n\t\t\t\tdyn_ltree[i * 2] = 0;\n\t\t\tfor (i = 0; i < D_CODES; i++)\n\t\t\t\tdyn_dtree[i * 2] = 0;\n\t\t\tfor (i = 0; i < BL_CODES; i++)\n\t\t\t\tbl_tree[i * 2] = 0;\n\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\n\t\t\tthat.opt_len = that.static_len = 0;\n\t\t\tlast_lit = matches = 0;\n\t\t}\n\n\t\t// Initialize the tree data structures for a new zlib stream.\n\t\tfunction tr_init() {\n\n\t\t\tl_desc.dyn_tree = dyn_ltree;\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\n\n\t\t\td_desc.dyn_tree = dyn_dtree;\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\n\n\t\t\tbl_desc.dyn_tree = bl_tree;\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\n\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\t// Initialize the first block of the first file:\n\t\t\tinit_block();\n\t\t}\n\n\t\t// Restore the heap property by moving down the tree starting at node k,\n\t\t// exchanging a node with the smallest of its two sons if necessary,\n\t\t// stopping\n\t\t// when the heap property is re-established (each father smaller than its\n\t\t// two sons).\n\t\tthat.pqdownheap = function(tree, // the tree to restore\n\t\tk // node to move down\n\t\t) {\n\t\t\tvar heap = that.heap;\n\t\t\tvar v = heap[k];\n\t\t\tvar j = k << 1; // left son of k\n\t\t\twhile (j <= that.heap_len) {\n\t\t\t\t// Set j to the smallest of the two sons:\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// Exit if v is smaller than both sons\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Exchange v with the smallest son\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\t\tj <<= 1;\n\t\t\t}\n\t\t\theap[k] = v;\n\t\t};\n\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\n\t\t// in the bit length tree.\n\t\tfunction scan_tree(tree,// the tree to be scanned\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tbl_tree[curlen * 2] += count;\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen)\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\n\t\t// bl_order of the last bit length code to send.\n\t\tfunction build_bl_tree() {\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\n\n\t\t\t// Determine the bit length frequencies for literal and distance trees\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t\t// Build the bit length tree:\n\t\t\tbl_desc.build_tree(that);\n\t\t\t// opt_len now includes the length of the tree representations, except\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\n\t\t\t// counts.\n\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t\t// 3 but the actual value used is 4.)\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update opt_len to include the bit length tree and counts\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\n\t\t\treturn max_blindex;\n\t\t}\n\n\t\t// Output a byte on the stream.\n\t\t// IN assertion: there is enough room in pending_buf.\n\t\tfunction put_byte(p) {\n\t\t\tthat.pending_buf[that.pending++] = p;\n\t\t}\n\n\t\tfunction put_short(w) {\n\t\t\tput_byte(w & 0xff);\n\t\t\tput_byte((w >>> 8) & 0xff);\n\t\t}\n\n\t\tfunction putShortMSB(b) {\n\t\t\tput_byte((b >> 8) & 0xff);\n\t\t\tput_byte((b & 0xff) & 0xff);\n\t\t}\n\n\t\tfunction send_bits(value, length) {\n\t\t\tvar val, len = length;\n\t\t\tif (bi_valid > Buf_size - len) {\n\t\t\t\tval = value;\n\t\t\t\t// bi_buf |= (val << bi_valid);\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\n\t\t\t\tbi_valid += len - Buf_size;\n\t\t\t} else {\n\t\t\t\t// bi_buf |= (value) << bi_valid;\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\n\t\t\t\tbi_valid += len;\n\t\t\t}\n\t\t}\n\n\t\tfunction send_code(c, tree) {\n\t\t\tvar c2 = c * 2;\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n\t\t}\n\n\t\t// Send a literal or distance tree in compressed form, using the codes in\n\t\t// bl_tree.\n\t\tfunction send_tree(tree,// the tree to be sent\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t} while (--count !== 0);\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen) {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t\t} else {\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\n\t\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\n\t\t\tvar rank; // index in bl_order\n\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\t\tsend_bits(dcodes - 1, 5);\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n\t\t\t}\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\n\t\t}\n\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\n\t\tfunction bi_flush() {\n\t\t\tif (bi_valid == 16) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = 0;\n\t\t\t\tbi_valid = 0;\n\t\t\t} else if (bi_valid >= 8) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t\tbi_buf >>>= 8;\n\t\t\t\tbi_valid -= 8;\n\t\t\t}\n\t\t}\n\n\t\t// Send one empty static block to give enough lookahead for inflate.\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\n\t\t// The current inflate code requires 9 bits of lookahead. If the\n\t\t// last two codes for the previous block (real code plus EOB) were coded\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n\t\t// the last real code. In this case we send two empty static blocks instead\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\n\t\t// To simplify the code, we assume the worst case of last real code encoded\n\t\t// on one bit only.\n\t\tfunction _tr_align() {\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\n\t\t\tbi_flush();\n\n\t\t\t// Of the 10 bits for the empty block, we have already sent\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\t\t\t\tbi_flush();\n\t\t\t}\n\t\t\tlast_eob_len = 7;\n\t\t}\n\n\t\t// Save the match info and tally the frequency counts. Return true if\n\t\t// the current block must be flushed.\n\t\tfunction _tr_tally(dist, // distance of matched string\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\n\t\t) {\n\t\t\tvar out_length, in_length, dcode;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\n\t\t\tlast_lit++;\n\n\t\t\tif (dist === 0) {\n\t\t\t\t// lc is the unmatched char\n\t\t\t\tdyn_ltree[lc * 2]++;\n\t\t\t} else {\n\t\t\t\tmatches++;\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\tdist--; // dist = match distance - 1\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\n\t\t\t}\n\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\n\t\t\t\t// Compute an upper bound for the compressed length\n\t\t\t\tout_length = last_lit * 8;\n\t\t\t\tin_length = strstart - block_start;\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n\t\t\t\t}\n\t\t\t\tout_length >>>= 3;\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn (last_lit == lit_bufsize - 1);\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t\t// 64K-1 bytes.\n\t\t}\n\n\t\t// Send the block data compressed using the given Huffman trees\n\t\tfunction compress_block(ltree, dtree) {\n\t\t\tvar dist; // distance of matched string\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\n\t\t\tvar lx = 0; // running index in l_buf\n\t\t\tvar code; // the code to send\n\t\t\tvar extra; // number of extra bits to send\n\n\t\t\tif (last_lit !== 0) {\n\t\t\t\tdo {\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\n\t\t\t\t\tlx++;\n\n\t\t\t\t\tif (dist === 0) {\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\t\tcode = Tree._length_code[lc];\n\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\n\t\t\t\t\t\t// code\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\n\t\t\t\t\t\tcode = Tree.d_code(dist);\n\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t\t}\n\t\t\t\t\t} // literal or match pair ?\n\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\n\t\t\t\t\t// ok:\n\t\t\t\t} while (lx < last_lit);\n\t\t\t}\n\n\t\t\tsend_code(END_BLOCK, ltree);\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\n\t\t}\n\n\t\t// Flush the bit buffer and align the output on a byte boundary\n\t\tfunction bi_windup() {\n\t\t\tif (bi_valid > 8) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t} else if (bi_valid > 0) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t}\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t}\n\n\t\t// Copy a stored block, storing first the length and its\n\t\t// one's complement if requested.\n\t\tfunction copy_block(buf, // the input data\n\t\tlen, // its length\n\t\theader // true if block header must be written\n\t\t) {\n\t\t\tbi_windup(); // align on byte boundary\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\tif (header) {\n\t\t\t\tput_short(len);\n\t\t\t\tput_short(~len);\n\t\t\t}\n\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n\t\t\tthat.pending += len;\n\t\t}\n\n\t\t// Send a stored block\n\t\tfunction _tr_stored_block(buf, // input block\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\t\t\tcopy_block(buf, stored_len, true); // with header\n\t\t}\n\n\t\t// Determine the best encoding for the current block: dynamic trees, static\n\t\t// trees or store, and output the encoded block to the zip file.\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\n\n\t\t\t// Build the Huffman trees unless a stored block is forced\n\t\t\tif (level > 0) {\n\t\t\t\t// Construct the literal and distance trees\n\t\t\t\tl_desc.build_tree(that);\n\n\t\t\t\td_desc.build_tree(that);\n\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\n\t\t\t\t// of\n\t\t\t\t// the compressed block data, excluding the tree representations.\n\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\n\t\t\t\t// index\n\t\t\t\t// in bl_order of the last bit length code to send.\n\t\t\t\tmax_blindex = build_bl_tree();\n\n\t\t\t\t// Determine the best encoding. Compute first the block length in\n\t\t\t\t// bytes\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\n\n\t\t\t\tif (static_lenb <= opt_lenb)\n\t\t\t\t\topt_lenb = static_lenb;\n\t\t\t} else {\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\n\t\t\t}\n\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\n\t\t\t\t// 4: two words for the lengths\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\n\t\t\t\t// since\n\t\t\t\t// the last block flush, because compression would have been\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t\t// transform a block into a stored block.\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\n\t\t\t} else if (static_lenb == opt_lenb) {\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n\t\t\t} else {\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t\t}\n\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\n\t\t\t// and uLong implemented on 32 bits.\n\n\t\t\tinit_block();\n\n\t\t\tif (eof) {\n\t\t\t\tbi_windup();\n\t\t\t}\n\t\t}\n\n\t\tfunction flush_block_only(eof) {\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\t\t\tblock_start = strstart;\n\t\t\tstrm.flush_pending();\n\t\t}\n\n\t\t// Fill the window when the lookahead becomes insufficient.\n\t\t// Updates strstart and lookahead.\n\t\t//\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t\t// At least one byte has been read, or avail_in === 0; reads are\n\t\t// performed for at least two bytes (required for the zip translate_eol\n\t\t// option -- not supported here).\n\t\tfunction fill_window() {\n\t\t\tvar n, m;\n\t\t\tvar p;\n\t\t\tvar more; // Amount of free space at the end of the window.\n\n\t\t\tdo {\n\t\t\t\tmore = (window_size - lookahead - strstart);\n\n\t\t\t\t// Deal with !@#$% 64K limit:\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\n\t\t\t\t\tmore = w_size;\n\t\t\t\t} else if (more == -1) {\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\t\t\tmore--;\n\n\t\t\t\t\t// If the window is almost full and there is insufficient\n\t\t\t\t\t// lookahead,\n\t\t\t\t\t// move the upper half to the lower one to make room in the\n\t\t\t\t\t// upper half.\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\n\n\t\t\t\t\tmatch_start -= w_size;\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\n\t\t\t\t\tblock_start -= w_size;\n\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\n\t\t\t\t\t// > 0\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)\n\n\t\t\t\t\tn = hash_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t} while (--n !== 0);\n\n\t\t\t\t\tn = w_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t\t\t\t// its value will never be used.\n\t\t\t\t\t} while (--n !== 0);\n\t\t\t\t\tmore += w_size;\n\t\t\t\t}\n\n\t\t\t\tif (strm.avail_in === 0)\n\t\t\t\t\treturn;\n\n\t\t\t\t// If there was no sliding:\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t\t\t\t// more == window_size - lookahead - strstart\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\n\t\t\t\tlookahead += n;\n\n\t\t\t\t// Initialize the hash value now that we have some input:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = window[strstart] & 0xff;\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t}\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\n\t\t\t\t// garbage,\n\t\t\t\t// but this is not important since only literal bytes will be\n\t\t\t\t// emitted.\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n\t\t}\n\n\t\t// Copy without compression as much as possible from the input stream,\n\t\t// return\n\t\t// the current block state.\n\t\t// This function does not insert new strings in the dictionary since\n\t\t// uncompressible data is probably not useful. This function is used\n\t\t// only for the level=0 compression option.\n\t\t// NOTE: this function should be optimized to avoid extra copying from\n\t\t// window to pending_buf.\n\t\tfunction deflate_stored(flush) {\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\n\n\t\t\tvar max_block_size = 0xffff;\n\t\t\tvar max_start;\n\n\t\t\tif (max_block_size > pending_buf_size - 5) {\n\t\t\t\tmax_block_size = pending_buf_size - 5;\n\t\t\t}\n\n\t\t\t// Copy as much as possible from input to output:\n\t\t\twhile (true) {\n\t\t\t\t// Fill the window as much as possible:\n\t\t\t\tif (lookahead <= 1) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\tstrstart += lookahead;\n\t\t\t\tlookahead = 0;\n\n\t\t\t\t// Emit a stored block if pending_buf will be full:\n\t\t\t\tmax_start = block_start + max_block_size;\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\n\t\t\t\t\tlookahead = (strstart - max_start);\n\t\t\t\t\tstrstart = max_start;\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\n\t\t\t\t}\n\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\n\t\t\t\t// negative and the data will be gone:\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0)\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction longest_match(cur_match) {\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\n\t\t\tvar scan = strstart; // current string\n\t\t\tvar match; // matched string\n\t\t\tvar len; // length of current match\n\t\t\tvar best_len = prev_length; // best match length so far\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n\t\t\tvar _nice_match = nice_match;\n\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t\t// we prevent matches with the string of window index 0.\n\n\t\t\tvar wmask = w_mask;\n\n\t\t\tvar strend = strstart + MAX_MATCH;\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\n\t\t\tvar scan_end = window[scan + best_len];\n\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n\t\t\t// 16.\n\t\t\t// It is easy to get rid of this optimization if necessary.\n\n\t\t\t// Do not waste too much time if we already have a good match:\n\t\t\tif (prev_length >= good_match) {\n\t\t\t\tchain_length >>= 2;\n\t\t\t}\n\n\t\t\t// Do not look for matches beyond the end of the input. This is\n\t\t\t// necessary\n\t\t\t// to make deflate deterministic.\n\t\t\tif (_nice_match > lookahead)\n\t\t\t\t_nice_match = lookahead;\n\n\t\t\tdo {\n\t\t\t\tmatch = cur_match;\n\n\t\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t\t// or if the match length is less than 2:\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t\t// are always equal when the other bytes match, given that\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\t\tscan += 2;\n\t\t\t\tmatch++;\n\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t\t// the 256th check will be made at strstart+258.\n\t\t\t\tdo {\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\n\t\t\t\tscan = strend - MAX_MATCH;\n\n\t\t\t\tif (len > best_len) {\n\t\t\t\t\tmatch_start = cur_match;\n\t\t\t\t\tbest_len = len;\n\t\t\t\t\tif (len >= _nice_match)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\n\t\t\t\t\tscan_end = window[scan + best_len];\n\t\t\t\t}\n\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\n\n\t\t\tif (best_len <= lookahead)\n\t\t\t\treturn best_len;\n\t\t\treturn lookahead;\n\t\t}\n\n\t\t// Compress as much as possible from the input stream, return the current\n\t\t// block state.\n\t\t// This function does not perform lazy evaluation of matches and inserts\n\t\t// new strings in the dictionary only for unmatched strings or for short\n\t\t// matches. It is used only for the fast compression options.\n\t\tfunction deflate_fast(flush) {\n\t\t\t// short hash_head = 0; // head of the hash chain\n\t\t\tvar hash_head = 0; // head of the hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\n\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\t\t\t\t}\n\t\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n\n\t\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tstrstart++;\n\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\n\t\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\t\tstrstart++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\n\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\n\t\t\t\t\t\t// not\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// No match, output a literal byte\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tstrstart++;\n\t\t\t\t}\n\t\t\t\tif (bflush) {\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\t// Same as above, but achieves better compression. We use a lazy\n\t\t// evaluation for matches: a match is finally adopted only if there is\n\t\t// no better match at the next window position.\n\t\tfunction deflate_slow(flush) {\n\t\t\t// short hash_head = 0; // head of hash chain\n\t\t\tvar hash_head = 0; // head of hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\t\t\tvar max_insert;\n\n\t\t\t// Process the input block.\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\tprev_length = match_length;\n\t\t\t\tprev_match = match_start;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If there was a match at the previous step and the current\n\t\t\t\t// match is not better, output the previous match:\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\n\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\n\t\t\t\t\t// the hash table.\n\t\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\t\tprev_length -= 2;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (++strstart <= max_insert) {\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\t\tmatch_available = 0;\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\tstrstart++;\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t} else if (match_available !== 0) {\n\n\t\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t}\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t} else {\n\t\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t\t// the next step to decide.\n\n\t\t\t\t\tmatch_available = 1;\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (match_available !== 0) {\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\t\t\t\tmatch_available = 0;\n\t\t\t}\n\t\t\tflush_block_only(flush == Z_FINISH);\n\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction deflateReset(strm) {\n\t\t\tstrm.total_in = strm.total_out = 0;\n\t\t\tstrm.msg = null; //\n\t\t\t\n\t\t\tthat.pending = 0;\n\t\t\tthat.pending_out = 0;\n\n\t\t\tstatus = BUSY_STATE;\n\n\t\t\tlast_flush = Z_NO_FLUSH;\n\n\t\t\ttr_init();\n\t\t\tlm_init();\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\n\t\t\tif (!_method)\n\t\t\t\t_method = Z_DEFLATED;\n\t\t\tif (!memLevel)\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\n\t\t\tif (!_strategy)\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\n\n\t\t\t// byte[] my_version=ZLIB_VERSION;\n\n\t\t\t//\n\t\t\t// if (!version || version[0] != my_version[0]\n\t\t\t// || stream_size != sizeof(z_stream)) {\n\t\t\t// return Z_VERSION_ERROR;\n\t\t\t// }\n\n\t\t\tstrm.msg = null;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\n\t\t\t\t_level = 6;\n\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tstrm.dstate = that;\n\n\t\t\tw_bits = bits;\n\t\t\tw_size = 1 << w_bits;\n\t\t\tw_mask = w_size - 1;\n\n\t\t\thash_bits = memLevel + 7;\n\t\t\thash_size = 1 << hash_bits;\n\t\t\thash_mask = hash_size - 1;\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n\t\t\twindow = new Uint8Array(w_size * 2);\n\t\t\tprev = [];\n\t\t\thead = [];\n\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\n\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\n\t\t\tpending_buf_size = lit_bufsize * 4;\n\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\n\n\t\t\tlevel = _level;\n\n\t\t\tstrategy = _strategy;\n\t\t\tmethod = _method & 0xff;\n\n\t\t\treturn deflateReset(strm);\n\t\t};\n\n\t\tthat.deflateEnd = function() {\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\t// Deallocate in reverse order of allocations:\n\t\t\tthat.pending_buf = null;\n\t\t\thead = null;\n\t\t\tprev = null;\n\t\t\twindow = null;\n\t\t\t// free\n\t\t\tthat.dstate = null;\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n\t\t};\n\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\n\t\t\tvar err = Z_OK;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\n\t\t\t\t_level = 6;\n\t\t\t}\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n\t\t\t\t// Flush the last buffer:\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\n\t\t\t}\n\n\t\t\tif (level != _level) {\n\t\t\t\tlevel = _level;\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\t\tgood_match = config_table[level].good_length;\n\t\t\t\tnice_match = config_table[level].nice_length;\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\n\t\t\t}\n\t\t\tstrategy = _strategy;\n\t\t\treturn err;\n\t\t};\n\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\n\t\t\tvar length = dictLength;\n\t\t\tvar n, index = 0;\n\n\t\t\tif (!dictionary || status != INIT_STATE)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length < MIN_MATCH)\n\t\t\t\treturn Z_OK;\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\n\t\t\t}\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\n\n\t\t\tstrstart = length;\n\t\t\tblock_start = length;\n\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\n\t\t\t// call of fill_window.\n\n\t\t\tins_h = window[0] & 0xff;\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\n\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\tprev[n & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = n;\n\t\t\t}\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.deflate = function(_strm, flush) {\n\t\t\tvar i, header, level_flags, old_flush, bstate;\n\n\t\t\tif (flush > Z_FINISH || flush < 0) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tif (_strm.avail_out === 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\tstrm = _strm; // just in case\n\t\t\told_flush = last_flush;\n\t\t\tlast_flush = flush;\n\n\t\t\t// Write the zlib header\n\t\t\tif (status == INIT_STATE) {\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\n\n\t\t\t\tif (level_flags > 3)\n\t\t\t\t\tlevel_flags = 3;\n\t\t\t\theader |= (level_flags << 6);\n\t\t\t\tif (strstart !== 0)\n\t\t\t\t\theader |= PRESET_DICT;\n\t\t\t\theader += 31 - (header % 31);\n\n\t\t\t\tstatus = BUSY_STATE;\n\t\t\t\tputShortMSB(header);\n\t\t\t}\n\n\t\t\t// Flush as much pending output as possible\n\t\t\tif (that.pending !== 0) {\n\t\t\t\tstrm.flush_pending();\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t// console.log(\" avail_out==0\");\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\n\t\t\t\t\t// more output space, but possibly with both pending and\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,\n\t\t\t\t\t// but this is not an error situation so make sure we\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\n\t\t\t\t\tlast_flush = -1;\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t}\n\n\t\t\t\t// Make sure there is something to do and avoid duplicate\n\t\t\t\t// consecutive\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// User must not provide more input after the first FINISH:\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// Start a new block or continue the current one.\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\n\t\t\t\tbstate = -1;\n\t\t\t\tswitch (config_table[level].func) {\n\t\t\t\tcase STORED:\n\t\t\t\t\tbstate = deflate_stored(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FAST:\n\t\t\t\t\tbstate = deflate_fast(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SLOW:\n\t\t\t\t\tbstate = deflate_slow(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\n\t\t\t\t\tstatus = FINISH_STATE;\n\t\t\t\t}\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\n\t\t\t\t\t}\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\n\t\t\t\t\t// that the flush is complete. So we don't have to output an\n\t\t\t\t\t// empty block here, this will be done at next call. This also\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\n\t\t\t\t\t// one empty block.\n\t\t\t\t}\n\n\t\t\t\tif (bstate == BlockDone) {\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\n\t\t\t\t\t\t_tr_align();\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\n\t\t\t\t\t\t// as a special marker by inflate_sync().\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\n\t\t\t\t\t\t\t\t// forget history\n\t\t\t\t\t\t\t\thead[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstrm.flush_pending();\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\n\t\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flush != Z_FINISH)\n\t\t\t\treturn Z_OK;\n\t\t\treturn Z_STREAM_END;\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t\tvar that = this;\n\t\tthat.next_in_index = 0;\n\t\tthat.next_out_index = 0;\n\t\t// that.next_in; // next input byte\n\t\tthat.avail_in = 0; // number of bytes available at next_in\n\t\tthat.total_in = 0; // total nb of input bytes read so far\n\t\t// that.next_out; // next output byte should be put there\n\t\tthat.avail_out = 0; // remaining free space at next_out\n\t\tthat.total_out = 0; // total nb of bytes output so far\n\t\t// that.msg;\n\t\t// that.dstate;\n\t}\n\n\tZStream.prototype = {\n\t\tdeflateInit : function(level, bits) {\n\t\t\tvar that = this;\n\t\t\tthat.dstate = new Deflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\n\t\t},\n\n\t\tdeflate : function(flush) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\treturn that.dstate.deflate(that, flush);\n\t\t},\n\n\t\tdeflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.dstate.deflateEnd();\n\t\t\tthat.dstate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tdeflateParams : function(level, strategy) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\n\t\t},\n\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\n\t\t// Read a new buffer from the current input stream, update the\n\t\t// total number of bytes read. All deflate() input goes through\n\t\t// this function so some applications may wish to modify it to avoid\n\t\t// allocating a large strm->next_in buffer and copying from it.\n\t\t// (See also flush_pending()).\n\t\tread_buf : function(buf, start, size) {\n\t\t\tvar that = this;\n\t\t\tvar len = that.avail_in;\n\t\t\tif (len > size)\n\t\t\t\tlen = size;\n\t\t\tif (len === 0)\n\t\t\t\treturn 0;\n\t\t\tthat.avail_in -= len;\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n\t\t\tthat.next_in_index += len;\n\t\t\tthat.total_in += len;\n\t\t\treturn len;\n\t\t},\n\n\t\t// Flush as much pending output as possible. All deflate() output goes\n\t\t// through this function so some applications may wish to modify it\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\n\t\t// (See also read_buf()).\n\t\tflush_pending : function() {\n\t\t\tvar that = this;\n\t\t\tvar len = that.dstate.pending;\n\n\t\t\tif (len > that.avail_out)\n\t\t\t\tlen = that.avail_out;\n\t\t\tif (len === 0)\n\t\t\t\treturn;\n\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t\t// len)) {\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n\t\t\t// that.next_out_index + \", \" + len);\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);\n\t\t\t// }\n\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n\n\t\t\tthat.next_out_index += len;\n\t\t\tthat.dstate.pending_out += len;\n\t\t\tthat.total_out += len;\n\t\t\tthat.avail_out -= len;\n\t\t\tthat.dstate.pending -= len;\n\t\t\tif (that.dstate.pending === 0) {\n\t\t\t\tthat.dstate.pending_out = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Deflater\n\n\tfunction Deflater(options) {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar level = options ? options.level : Z_DEFAULT_COMPRESSION;\n\t\tif (typeof level == \"undefined\")\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\n\t\tz.deflateInit(level);\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (!data.length)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(flush);\n\t\t\t\tif (err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index == bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(Z_FINISH);\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (bufsize - z.avail_out > 0)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tz.deflateEnd();\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._jzlib_Deflater = Deflater;\n})(this);\n")],
  inflater: [zWorker, createUrl("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\tvar MAX_BITS = 15;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_MEM_ERROR = -4;\n\tvar Z_BUF_ERROR = -5;\n\n\tvar inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\n\t\t\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];\n\n\tvar MANY = 1440;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_FINISH = 4;\n\n\t// InfTree\n\tvar fixed_bl = 9;\n\tvar fixed_bd = 5;\n\n\tvar fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\n\t\t\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\n\t\t\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\n\t\t\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\n\t\t\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\n\t\t\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\n\t\t\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\n\t\t\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\n\t\t\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\n\t\t\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\n\t\t\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\n\t\t\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\n\t\t\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\n\t\t\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\n\t\t\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\n\t\t\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\n\t\t\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\n\t\t\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\n\t\t\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\n\t\t\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\n\t\t\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\n\t\t\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\n\t\t\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\n\t\t\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\n\t\t\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\n\t\t\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\n\t\t\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\n\t\t\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\n\t\t\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\n\t\t\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\n\t\t\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\n\t\t\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\n\t\t\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\n\t\t\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\n\t\t\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\n\t\t\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\n\t\t\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];\n\tvar fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\n\t\t\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\n\t\t\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];\n\n\t// Tables for deflate from PKZIP's appnote.txt.\n\tvar cplens = [ // Copy lengths for literal codes 257..285\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];\n\n\t// see note #13 above about 258\n\tvar cplext = [ // Extra bits for literal codes 257..285\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n\t];\n\n\tvar cpdist = [ // Copy offsets for distance codes 0..29\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\n\tvar cpdext = [ // Extra bits for distance codes\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\tvar BMAX = 15; // maximum bit length of any code\n\n\tfunction InfTree() {\n\t\tvar that = this;\n\n\t\tvar hn; // hufts used in space\n\t\tvar v; // work area for huft_build\n\t\tvar c; // bit length count table\n\t\tvar r; // table entry for structure assignment\n\t\tvar u; // table stack\n\t\tvar x; // bit offsets, then code stack\n\n\t\tfunction huft_build(b, // code lengths in bits (all assumed <=\n\t\t// BMAX)\n\t\tbindex, n, // number of codes (assumed <= 288)\n\t\ts, // number of simple-valued codes (0..s-1)\n\t\td, // list of base values for non-simple codes\n\t\te, // list of extra bits for non-simple codes\n\t\tt, // result: starting table\n\t\tm, // maximum lookup bits, returns actual\n\t\thp,// space for trees\n\t\thn,// hufts used in space\n\t\tv // working area: values in order of bit length\n\t\t) {\n\t\t\t// Given a list of code lengths and a maximum table size, make a set of\n\t\t\t// tables to decode that set of codes. Return Z_OK on success,\n\t\t\t// Z_BUF_ERROR\n\t\t\t// if the given code set is incomplete (the tables are still built in\n\t\t\t// this\n\t\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n\t\t\t// of\n\t\t\t// lengths), or Z_MEM_ERROR if not enough memory.\n\n\t\t\tvar a; // counter for codes of length k\n\t\t\tvar f; // i repeats in table every f entries\n\t\t\tvar g; // maximum code length\n\t\t\tvar h; // table level\n\t\t\tvar i; // counter, current code\n\t\t\tvar j; // counter\n\t\t\tvar k; // number of bits in current code\n\t\t\tvar l; // bits per table (returned in m)\n\t\t\tvar mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\t\t\tvar p; // pointer into c[], b[], or v[]\n\t\t\tvar q; // points to current table\n\t\t\tvar w; // bits before this table == (l * h)\n\t\t\tvar xp; // pointer into x\n\t\t\tvar y; // number of dummy codes added\n\t\t\tvar z; // number of entries in current table\n\n\t\t\t// Generate counts for each bit length\n\n\t\t\tp = 0;\n\t\t\ti = n;\n\t\t\tdo {\n\t\t\t\tc[b[bindex + p]]++;\n\t\t\t\tp++;\n\t\t\t\ti--; // assume all entries <= BMAX\n\t\t\t} while (i !== 0);\n\n\t\t\tif (c[0] == n) { // null input--all zero length codes\n\t\t\t\tt[0] = -1;\n\t\t\t\tm[0] = 0;\n\t\t\t\treturn Z_OK;\n\t\t\t}\n\n\t\t\t// Find minimum and maximum length, bound *m by those\n\t\t\tl = m[0];\n\t\t\tfor (j = 1; j <= BMAX; j++)\n\t\t\t\tif (c[j] !== 0)\n\t\t\t\t\tbreak;\n\t\t\tk = j; // minimum code length\n\t\t\tif (l < j) {\n\t\t\t\tl = j;\n\t\t\t}\n\t\t\tfor (i = BMAX; i !== 0; i--) {\n\t\t\t\tif (c[i] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tg = i; // maximum code length\n\t\t\tif (l > i) {\n\t\t\t\tl = i;\n\t\t\t}\n\t\t\tm[0] = l;\n\n\t\t\t// Adjust last length count to fill out codes, if needed\n\t\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((y -= c[i]) < 0) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tc[i] += y;\n\n\t\t\t// Generate starting offsets into the value table for each length\n\t\t\tx[1] = j = 0;\n\t\t\tp = 1;\n\t\t\txp = 2;\n\t\t\twhile (--i !== 0) { // note that i == g from above\n\t\t\t\tx[xp] = (j += c[p]);\n\t\t\t\txp++;\n\t\t\t\tp++;\n\t\t\t}\n\n\t\t\t// Make a table of values in order of bit lengths\n\t\t\ti = 0;\n\t\t\tp = 0;\n\t\t\tdo {\n\t\t\t\tif ((j = b[bindex + p]) !== 0) {\n\t\t\t\t\tv[x[j]++] = i;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t} while (++i < n);\n\t\t\tn = x[g]; // set n to length of v\n\n\t\t\t// Generate the Huffman codes and for each, make the table entries\n\t\t\tx[0] = i = 0; // first Huffman code is zero\n\t\t\tp = 0; // grab values in bit order\n\t\t\th = -1; // no tables yet--level -1\n\t\t\tw = -l; // bits decoded == (l * h)\n\t\t\tu[0] = 0; // just to keep compilers happy\n\t\t\tq = 0; // ditto\n\t\t\tz = 0; // ditto\n\n\t\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\t\tfor (; k <= g; k++) {\n\t\t\t\ta = c[k];\n\t\t\t\twhile (a-- !== 0) {\n\t\t\t\t\t// here i is the Huffman code of length k bits for value *p\n\t\t\t\t\t// make tables up to required level\n\t\t\t\t\twhile (k > w + l) {\n\t\t\t\t\t\th++;\n\t\t\t\t\t\tw += l; // previous table always l bits\n\t\t\t\t\t\t// compute minimum size table less than or equal to l bits\n\t\t\t\t\t\tz = g - w;\n\t\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\n\t\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t\t// too few codes for\n\t\t\t\t\t\t\t// k-w bit table\n\t\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\t\txp = k;\n\t\t\t\t\t\t\tif (j < z) {\n\t\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\n\t\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\n\t\t\t\t\t\t// allocate new table\n\t\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn't matter for fixed)\n\t\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\n\t\t\t\t\t\t}\n\t\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\n\t\t\t\t\t\thn[0] += z;\n\n\t\t\t\t\t\t// connect to last table, if there is one\n\t\t\t\t\t\tif (h !== 0) {\n\t\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\n\t\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\n\t\t\t\t\t\t\tj = i >>> (w - l);\n\t\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\n\t\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\n\t\t\t\t\t\t\t// to\n\t\t\t\t\t\t\t// last\n\t\t\t\t\t\t\t// table\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt[0] = q; // first table is returned result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// set up table entry in r\n\t\t\t\t\tr[1] = /* (byte) */(k - w);\n\t\t\t\t\tif (p >= n) {\n\t\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\n\t\t\t\t\t} else if (v[p] < s) {\n\t\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\n\t\t\t\t\t\t// end-of-block\n\t\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\n\t\t\t\t\t\t// up in lists\n\t\t\t\t\t\tr[2] = d[v[p++] - s];\n\t\t\t\t\t}\n\n\t\t\t\t\t// fill code-like entries with r\n\t\t\t\t\tf = 1 << (k - w);\n\t\t\t\t\tfor (j = i >>> w; j < z; j += f) {\n\t\t\t\t\t\thp.set(r, (q + j) * 3);\n\t\t\t\t\t}\n\n\t\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\n\t\t\t\t\t\ti ^= j;\n\t\t\t\t\t}\n\t\t\t\t\ti ^= j;\n\n\t\t\t\t\t// backup over finished tables\n\t\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\n\t\t\t\t\twhile ((i & mask) != x[h]) {\n\t\t\t\t\t\th--; // don't need to update q\n\t\t\t\t\t\tw -= l;\n\t\t\t\t\t\tmask = (1 << w) - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return Z_BUF_ERROR if we were given an incomplete table\n\t\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n\t\t}\n\n\t\tfunction initWorkArea(vsize) {\n\t\t\tvar i;\n\t\t\tif (!hn) {\n\t\t\t\thn = []; // []; //new Array(1);\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t\tr = []; // new Array(3);\n\t\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\n\t\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t}\n\t\t\tif (v.length < vsize) {\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t}\n\t\t\tfor (i = 0; i < vsize; i++) {\n\t\t\t\tv[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < BMAX + 1; i++) {\n\t\t\t\tc[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\tr[i] = 0;\n\t\t\t}\n\t\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\n\t\t\tu.set(c.subarray(0, BMAX), 0);\n\t\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\t\t\tx.set(c.subarray(0, BMAX + 1), 0);\n\t\t}\n\n\t\tthat.inflate_trees_bits = function(c, // 19 code lengths\n\t\tbb, // bits tree desired/actual depth\n\t\ttb, // bits tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\t\t\tinitWorkArea(19);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = \"oversubscribed dynamic bit lengths tree\";\n\t\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\n\t\t\t\tz.msg = \"incomplete dynamic bit lengths tree\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tthat.inflate_trees_dynamic = function(nl, // number of literal/length codes\n\t\tnd, // number of distance codes\n\t\tc, // that many (total) code lengths\n\t\tbl, // literal desired/actual bit depth\n\t\tbd, // distance desired/actual bit depth\n\t\ttl, // literal/length tree result\n\t\ttd, // distance tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\n\t\t\t// build literal/length tree\n\t\t\tinitWorkArea(288);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\t\t\tif (result != Z_OK || bl[0] === 0) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed literal/length tree\";\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete literal/length tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// build distance tree\n\t\t\tinitWorkArea(288);\n\t\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n\t\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed distance tree\";\n\t\t\t\t} else if (result == Z_BUF_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete distance tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"empty distance tree with lengths\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn Z_OK;\n\t\t};\n\n\t}\n\n\tInfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth\n\tbd, // distance desired/actual bit depth\n\ttl,// literal/length tree result\n\ttd// distance tree result\n\t) {\n\t\tbl[0] = fixed_bl;\n\t\tbd[0] = fixed_bd;\n\t\ttl[0] = fixed_tl;\n\t\ttd[0] = fixed_td;\n\t\treturn Z_OK;\n\t};\n\n\t// InfCodes\n\n\t// waiting for \"i:\"=input,\n\t// \"o:\"=output,\n\t// \"x:\"=nothing\n\tvar START = 0; // x: set up for LEN\n\tvar LEN = 1; // i: get length/literal/eob next\n\tvar LENEXT = 2; // i: getting length extra (have base)\n\tvar DIST = 3; // i: get distance next\n\tvar DISTEXT = 4;// i: getting distance extra\n\tvar COPY = 5; // o: copying bytes in window, waiting\n\t// for space\n\tvar LIT = 6; // o: got literal, waiting for output\n\t// space\n\tvar WASH = 7; // o: got eob, possibly still output\n\t// waiting\n\tvar END = 8; // x: got eob and all data flushed\n\tvar BADCODE = 9;// x: got error\n\n\tfunction InfCodes() {\n\t\tvar that = this;\n\n\t\tvar mode; // current inflate_codes mode\n\n\t\t// mode dependent information\n\t\tvar len = 0;\n\n\t\tvar tree; // pointer into tree\n\t\tvar tree_index = 0;\n\t\tvar need = 0; // bits needed\n\n\t\tvar lit = 0;\n\n\t\t// if EXT or COPY, where and how much\n\t\tvar get = 0; // bits to get for extra\n\t\tvar dist = 0; // distance back to copy from\n\n\t\tvar lbits = 0; // ltree bits decoded per branch\n\t\tvar dbits = 0; // dtree bits decoder per branch\n\t\tvar ltree; // literal/length/eob tree\n\t\tvar ltree_index = 0; // literal/length/eob tree\n\t\tvar dtree; // distance tree\n\t\tvar dtree_index = 0; // distance tree\n\n\t\t// Called with number of bytes left to write in window at least 258\n\t\t// (the maximum string length) and number of input bytes available\n\t\t// at least ten. The ten bytes are six bytes for the longest length/\n\t\t// distance pair plus four bytes for overloading the bit buffer.\n\n\t\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n\t\t\tvar t; // temporary pointer\n\t\t\tvar tp; // temporary pointer\n\t\t\tvar tp_index; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar ml; // mask for literal/length tree\n\t\t\tvar md; // mask for distance tree\n\t\t\tvar c; // bytes to copy\n\t\t\tvar d; // distance back to copy from\n\t\t\tvar r; // copy source pointer\n\n\t\t\tvar tp_index_t_3; // (tp_index+t)*3\n\n\t\t\t// load input, output, bit values\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// initialize masks\n\t\t\tml = inflate_mask[bl];\n\t\t\tmd = inflate_mask[bd];\n\n\t\t\t// do until not enough input or output space for fast loop\n\t\t\tdo { // assume called with m >= 258 && n >= 10\n\t\t\t\t// get literal/length code\n\t\t\t\twhile (k < (20)) { // max bits for literal/length code\n\t\t\t\t\tn--;\n\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\tk += 8;\n\t\t\t\t}\n\n\t\t\t\tt = b & ml;\n\t\t\t\ttp = tl;\n\t\t\t\ttp_index = tl_index;\n\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\tm--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\n\n\t\t\t\t\t\tb >>= e;\n\t\t\t\t\t\tk -= e;\n\n\t\t\t\t\t\t// decode distance base of block to copy\n\t\t\t\t\t\twhile (k < (15)) { // max bits for distance code\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt = b & md;\n\t\t\t\t\t\ttp = td;\n\t\t\t\t\t\ttp_index = td_index;\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\te = tp[tp_index_t_3];\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\t\t\t// get extra bits to add to distance base\n\t\t\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\n\t\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n\t\t\t\t\t\t\t\tb >>= (e);\n\t\t\t\t\t\t\t\tk -= (e);\n\n\t\t\t\t\t\t\t\t// do the copy\n\t\t\t\t\t\t\t\tm -= c;\n\t\t\t\t\t\t\t\tif (q >= d) { // offset before dest\n\t\t\t\t\t\t\t\t\t// just copy\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // minimum\n\t\t\t\t\t\t\t\t\t\t// count is\n\t\t\t\t\t\t\t\t\t\t// three,\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // so unroll\n\t\t\t\t\t\t\t\t\t\t// loop a\n\t\t\t\t\t\t\t\t\t\t// little\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + 2), q);\n\t\t\t\t\t\t\t\t\t\tq += 2;\n\t\t\t\t\t\t\t\t\t\tr += 2;\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else { // else offset after destination\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in window\n\t\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\n\t\t\t\t\t\t\t\t\te = s.end - r;\n\t\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\n\t\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\n\t\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + e), q);\n\t\t\t\t\t\t\t\t\t\t\tq += e;\n\t\t\t\t\t\t\t\t\t\t\tr += e;\n\t\t\t\t\t\t\t\t\t\t\te = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of window\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// copy all or what's left\n\t\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t} while (--c !== 0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + c), q);\n\t\t\t\t\t\t\t\t\tq += c;\n\t\t\t\t\t\t\t\t\tr += c;\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else if ((e & 64) === 0) {\n\t\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\t\t\te = tp[tp_index_t_3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tz.msg = \"invalid distance code\";\n\n\t\t\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\t\t\tn += c;\n\t\t\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((e & 64) === 0) {\n\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\tm--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ((e & 32) !== 0) {\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t}\n\t\t\t\t} while (true);\n\t\t\t} while (m >= 258 && n >= 10);\n\n\t\t\t// not enough input or output--restore pointers and return\n\t\t\tc = z.avail_in - n;\n\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\tn += c;\n\t\t\tp -= c;\n\t\t\tk -= c << 3;\n\n\t\t\ts.bitb = b;\n\t\t\ts.bitk = k;\n\t\t\tz.avail_in = n;\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\ts.write = q;\n\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.init = function(bl, bd, tl, tl_index, td, td_index) {\n\t\t\tmode = START;\n\t\t\tlbits = /* (byte) */bl;\n\t\t\tdbits = /* (byte) */bd;\n\t\t\tltree = tl;\n\t\t\tltree_index = tl_index;\n\t\t\tdtree = td;\n\t\t\tdtree_index = td_index;\n\t\t\ttree = null;\n\t\t};\n\n\t\tthat.proc = function(s, z, r) {\n\t\t\tvar j; // temporary storage\n\t\t\tvar tindex; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b = 0; // bit buffer\n\t\t\tvar k = 0; // bits in bit buffer\n\t\t\tvar p = 0; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar f; // pointer to copy strings from\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// process input and output based on current state\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n\t\t\t\tcase START: // x: set up for LEN\n\t\t\t\t\tif (m >= 258 && n >= 10) {\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n\n\t\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\t\tb = s.bitb;\n\t\t\t\t\t\tk = s.bitk;\n\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\tif (r != Z_OK) {\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tneed = lbits;\n\t\t\t\t\ttree = ltree;\n\t\t\t\t\ttree_index = ltree_index;\n\n\t\t\t\t\tmode = LEN;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase LEN: // i: get length/literal/eob next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\n\t\t\t\t\tk -= (tree[tindex + 1]);\n\n\t\t\t\t\te = tree[tindex];\n\n\t\t\t\t\tif (e === 0) { // literal\n\t\t\t\t\t\tlit = tree[tindex + 2];\n\t\t\t\t\t\tmode = LIT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 16) !== 0) { // length\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tlen = tree[tindex + 2];\n\t\t\t\t\t\tmode = LENEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\n\t\t\t\t\t\tmode = WASH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tlen += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tneed = dbits;\n\t\t\t\t\ttree = dtree;\n\t\t\t\t\ttree_index = dtree_index;\n\t\t\t\t\tmode = DIST;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DIST: // i: get distance next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>= tree[tindex + 1];\n\t\t\t\t\tk -= tree[tindex + 1];\n\n\t\t\t\t\te = (tree[tindex]);\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tdist = tree[tindex + 2];\n\t\t\t\t\t\tmode = DISTEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid distance code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase DISTEXT: // i: getting distance extra\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tdist += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tmode = COPY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase COPY: // o: copying bytes in window, waiting for space\n\t\t\t\t\tf = q - dist;\n\t\t\t\t\twhile (f < 0) { // modulo window size-\"while\" instead\n\t\t\t\t\t\tf += s.end; // of \"if\" handles invalid distances\n\t\t\t\t\t}\n\t\t\t\t\twhile (len !== 0) {\n\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.window[q++] = s.window[f++];\n\t\t\t\t\t\tm--;\n\n\t\t\t\t\t\tif (f == s.end)\n\t\t\t\t\t\t\tf = 0;\n\t\t\t\t\t\tlen--;\n\t\t\t\t\t}\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\ts.window[q++] = /* (byte) */lit;\n\t\t\t\t\tm--;\n\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase WASH: // o: got eob, possibly more output\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\n\t\t\t\t\t\tk -= 8;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t\tp--; // can always return one\n\t\t\t\t\t}\n\n\t\t\t\t\ts.write = q;\n\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\tq = s.write;\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\tif (s.read != s.write) {\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = END;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase END:\n\t\t\t\t\tr = Z_STREAM_END;\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase BADCODE: // x: got error\n\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function() {\n\t\t\t// ZFREE(z, c);\n\t\t};\n\n\t}\n\n\t// InfBlocks\n\n\t// Table for deflate from PKZIP's appnote.txt.\n\tvar border = [ // Order of the bit length code lengths\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\tvar TYPE = 0; // get type bits (3, including end bit)\n\tvar LENS = 1; // get lengths for stored\n\tvar STORED = 2;// processing stored block\n\tvar TABLE = 3; // get table lengths\n\tvar BTREE = 4; // get bit lengths tree for a dynamic\n\t// block\n\tvar DTREE = 5; // get length, distance trees for a\n\t// dynamic block\n\tvar CODES = 6; // processing fixed or dynamic block\n\tvar DRY = 7; // output remaining window bytes\n\tvar DONELOCKS = 8; // finished last block, done\n\tvar BADBLOCKS = 9; // ot a data error--stuck here\n\n\tfunction InfBlocks(z, w) {\n\t\tvar that = this;\n\n\t\tvar mode = TYPE; // current inflate_block mode\n\n\t\tvar left = 0; // if STORED, bytes left to copy\n\n\t\tvar table = 0; // table lengths (14 bits)\n\t\tvar index = 0; // index into blens (or border)\n\t\tvar blens; // bit lengths of codes\n\t\tvar bb = [ 0 ]; // bit length tree depth\n\t\tvar tb = [ 0 ]; // bit length decoding tree\n\n\t\tvar codes = new InfCodes(); // if CODES, current state\n\n\t\tvar last = 0; // true if this block is the last block\n\n\t\tvar hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\t\tvar check = 0; // check on output\n\t\tvar inftree = new InfTree();\n\n\t\tthat.bitk = 0; // bits in bit buffer\n\t\tthat.bitb = 0; // bit buffer\n\t\tthat.window = new Uint8Array(w); // sliding window\n\t\tthat.end = w; // one byte after sliding window\n\t\tthat.read = 0; // window read pointer\n\t\tthat.write = 0; // window write pointer\n\n\t\tthat.reset = function(z, c) {\n\t\t\tif (c)\n\t\t\t\tc[0] = check;\n\t\t\t// if (mode == BTREE || mode == DTREE) {\n\t\t\t// }\n\t\t\tif (mode == CODES) {\n\t\t\t\tcodes.free(z);\n\t\t\t}\n\t\t\tmode = TYPE;\n\t\t\tthat.bitk = 0;\n\t\t\tthat.bitb = 0;\n\t\t\tthat.read = that.write = 0;\n\t\t};\n\n\t\tthat.reset(z, null);\n\n\t\t// copy as much as possible from the sliding window to the output area\n\t\tthat.inflate_flush = function(z, r) {\n\t\t\tvar n;\n\t\t\tvar p;\n\t\t\tvar q;\n\n\t\t\t// local copies of source and destination pointers\n\t\t\tp = z.next_out_index;\n\t\t\tq = that.read;\n\n\t\t\t// compute number of bytes to copy as far as end of window\n\t\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\n\t\t\tif (n > z.avail_out)\n\t\t\t\tn = z.avail_out;\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\tr = Z_OK;\n\n\t\t\t// update counters\n\t\t\tz.avail_out -= n;\n\t\t\tz.total_out += n;\n\n\t\t\t// copy as far as end of window\n\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\tp += n;\n\t\t\tq += n;\n\n\t\t\t// see if more to copy at beginning of window\n\t\t\tif (q == that.end) {\n\t\t\t\t// wrap pointers\n\t\t\t\tq = 0;\n\t\t\t\tif (that.write == that.end)\n\t\t\t\t\tthat.write = 0;\n\n\t\t\t\t// compute bytes to copy\n\t\t\t\tn = that.write - q;\n\t\t\t\tif (n > z.avail_out)\n\t\t\t\t\tn = z.avail_out;\n\t\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t// update counters\n\t\t\t\tz.avail_out -= n;\n\t\t\t\tz.total_out += n;\n\n\t\t\t\t// copy\n\t\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\t\tp += n;\n\t\t\t\tq += n;\n\t\t\t}\n\n\t\t\t// update pointers\n\t\t\tz.next_out_index = p;\n\t\t\tthat.read = q;\n\n\t\t\t// done\n\t\t\treturn r;\n\t\t};\n\n\t\tthat.proc = function(z, r) {\n\t\t\tvar t; // temporary storage\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\n\t\t\tvar i;\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\t// {\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = that.bitb;\n\t\t\tk = that.bitk;\n\t\t\t// }\n\t\t\t// {\n\t\t\tq = that.write;\n\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t// }\n\n\t\t\t// process input based on current state\n\t\t\t// DEBUG dtree\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\tcase TYPE:\n\n\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\t\t\t\t\tt = /* (int) */(b & 7);\n\t\t\t\t\tlast = t & 1;\n\n\t\t\t\t\tswitch (t >>> 1) {\n\t\t\t\t\tcase 0: // stored\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tt = k & 7; // go to byte boundary\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = LENS; // get length of stored block\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: // fixed\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tvar bl = []; // new Array(1);\n\t\t\t\t\t\tvar bd = []; // new Array(1);\n\t\t\t\t\t\tvar tl = [ [] ]; // new Array(1);\n\t\t\t\t\t\tvar td = [ [] ]; // new Array(1);\n\n\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\n\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = CODES;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: // dynamic\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = TABLE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: // illegal\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid block type\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LENS:\n\n\t\t\t\t\twhile (k < (32)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid stored block lengths\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tleft = (b & 0xffff);\n\t\t\t\t\tb = k = 0; // dump bits\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STORED:\n\t\t\t\t\tif (n === 0) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = that.write;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\tt = left;\n\t\t\t\t\tif (t > n)\n\t\t\t\t\t\tt = n;\n\t\t\t\t\tif (t > m)\n\t\t\t\t\t\tt = m;\n\t\t\t\t\tthat.window.set(z.read_buf(p, t), q);\n\t\t\t\t\tp += t;\n\t\t\t\t\tn -= t;\n\t\t\t\t\tq += t;\n\t\t\t\t\tm -= t;\n\t\t\t\t\tif ((left -= t) !== 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TABLE:\n\n\t\t\t\t\twhile (k < (14)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttable = t = (b & 0x3fff);\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"too many length or distance symbols\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\t\t\t\t\tif (!blens || blens.length < t) {\n\t\t\t\t\t\tblens = []; // new Array(t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\n\t\t\t\t\t\t\tblens[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// {\n\t\t\t\t\tb >>>= (14);\n\t\t\t\t\tk -= (14);\n\t\t\t\t\t// }\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = BTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase BTREE:\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\n\t\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (index < 19) {\n\t\t\t\t\t\tblens[border[index++]] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbb[0] = 7;\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tr = t;\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = DTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DTREE:\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tt = table;\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j, c;\n\n\t\t\t\t\t\tt = bb[0];\n\n\t\t\t\t\t\twhile (k < (t)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (tb[0] == -1) {\n\t\t\t\t\t\t// System.err.println(\"null...\");\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n\t\t\t\t\t\tif (c < 16) {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\tblens[index++] = c;\n\t\t\t\t\t\t} else { // c == 16..18\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\n\n\t\t\t\t\t\t\twhile (k < (t + i)) {\n\t\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\n\n\t\t\t\t\t\t\tb >>>= (i);\n\t\t\t\t\t\t\tk -= (i);\n\n\t\t\t\t\t\t\ti = index;\n\t\t\t\t\t\t\tt = table;\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\n\t\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\t\tz.msg = \"invalid bit length repeat\";\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tblens[i++] = c;\n\t\t\t\t\t\t\t} while (--j !== 0);\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttb[0] = -1;\n\t\t\t\t\t// {\n\t\t\t\t\tvar bl_ = []; // new Array(1);\n\t\t\t\t\tvar bd_ = []; // new Array(1);\n\t\t\t\t\tvar tl_ = []; // new Array(1);\n\t\t\t\t\tvar td_ = []; // new Array(1);\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n\t\t\t\t\tt = table;\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr = t;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n\t\t\t\t\t// }\n\t\t\t\t\tmode = CODES;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase CODES:\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\t\t\t\t\tcodes.free(z);\n\n\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\tb = that.bitb;\n\t\t\t\t\tk = that.bitk;\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\n\t\t\t\t\tif (last === 0) {\n\t\t\t\t\t\tmode = TYPE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = DRY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DRY:\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\tif (that.read != that.write) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = DONELOCKS;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONELOCKS:\n\t\t\t\t\tr = Z_STREAM_END;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\tcase BADBLOCKS:\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function(z) {\n\t\t\tthat.reset(z, null);\n\t\t\tthat.window = null;\n\t\t\thufts = null;\n\t\t\t// ZFREE(z, s);\n\t\t};\n\n\t\tthat.set_dictionary = function(d, start, n) {\n\t\t\tthat.window.set(d.subarray(start, start + n), 0);\n\t\t\tthat.read = that.write = n;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\t\tthat.sync_point = function() {\n\t\t\treturn mode == LENS ? 1 : 0;\n\t\t};\n\n\t}\n\n\t// Inflate\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar Z_DEFLATED = 8;\n\n\tvar METHOD = 0; // waiting for method byte\n\tvar FLAG = 1; // waiting for flag byte\n\tvar DICT4 = 2; // four dictionary check bytes to go\n\tvar DICT3 = 3; // three dictionary check bytes to go\n\tvar DICT2 = 4; // two dictionary check bytes to go\n\tvar DICT1 = 5; // one dictionary check byte to go\n\tvar DICT0 = 6; // waiting for inflateSetDictionary\n\tvar BLOCKS = 7; // decompressing blocks\n\tvar DONE = 12; // finished check, done\n\tvar BAD = 13; // got an error--stay here\n\n\tvar mark = [ 0, 0, 0xff, 0xff ];\n\n\tfunction Inflate() {\n\t\tvar that = this;\n\n\t\tthat.mode = 0; // current inflate mode\n\n\t\t// mode dependent information\n\t\tthat.method = 0; // if FLAGS, method byte\n\n\t\t// if CHECK, check values to compare\n\t\tthat.was = [ 0 ]; // new Array(1); // computed check value\n\t\tthat.need = 0; // stream check value\n\n\t\t// if BAD, inflateSync's marker bytes count\n\t\tthat.marker = 0;\n\n\t\t// mode independent information\n\t\tthat.wbits = 0; // log2(window size) (8..15, defaults to 15)\n\n\t\t// this.blocks; // current inflate_blocks state\n\n\t\tfunction inflateReset(z) {\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tz.total_in = z.total_out = 0;\n\t\t\tz.msg = null;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\tz.istate.blocks.reset(z, null);\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.inflateEnd = function(z) {\n\t\t\tif (that.blocks)\n\t\t\t\tthat.blocks.free(z);\n\t\t\tthat.blocks = null;\n\t\t\t// ZFREE(z, z->state);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateInit = function(z, w) {\n\t\t\tz.msg = null;\n\t\t\tthat.blocks = null;\n\n\t\t\t// set window size\n\t\t\tif (w < 8 || w > 15) {\n\t\t\t\tthat.inflateEnd(z);\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tthat.wbits = w;\n\n\t\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\n\n\t\t\t// reset state\n\t\t\tinflateReset(z);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflate = function(z, f) {\n\t\t\tvar r;\n\t\t\tvar b;\n\n\t\t\tif (!z || !z.istate || !z.next_in)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n\t\t\tr = Z_BUF_ERROR;\n\t\t\twhile (true) {\n\t\t\t\t// System.out.println(\"mode: \"+z.istate.mode);\n\t\t\t\tswitch (z.istate.mode) {\n\t\t\t\tcase METHOD:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tif (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"unknown compression method\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"invalid window size\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = FLAG;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase FLAG:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\n\n\t\t\t\t\tif ((((z.istate.method << 8) + b) % 31) !== 0) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"incorrect header check\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\n\t\t\t\t\t\tz.istate.mode = BLOCKS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = DICT4;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT4:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\n\t\t\t\t\tz.istate.mode = DICT3;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT3:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\n\t\t\t\t\tz.istate.mode = DICT2;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT2:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\n\t\t\t\t\tz.istate.mode = DICT1;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT1:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += (z.read_byte(z.next_in_index++) & 0xff);\n\t\t\t\t\tz.istate.mode = DICT0;\n\t\t\t\t\treturn Z_NEED_DICT;\n\t\t\t\tcase DICT0:\n\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\tz.msg = \"need dictionary\";\n\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\tcase BLOCKS:\n\n\t\t\t\t\tr = z.istate.blocks.proc(z, r);\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (r == Z_OK) {\n\t\t\t\t\t\tr = f;\n\t\t\t\t\t}\n\t\t\t\t\tif (r != Z_STREAM_END) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t\tr = f;\n\t\t\t\t\tz.istate.blocks.reset(z, z.istate.was);\n\t\t\t\t\tz.istate.mode = DONE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONE:\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\tcase BAD:\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.inflateSetDictionary = function(z, dictionary, dictLength) {\n\t\t\tvar index = 0;\n\t\t\tvar length = dictLength;\n\t\t\tif (!z || !z.istate || z.istate.mode != DICT0)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length >= (1 << z.istate.wbits)) {\n\t\t\t\tlength = (1 << z.istate.wbits) - 1;\n\t\t\t\tindex = dictLength - length;\n\t\t\t}\n\t\t\tz.istate.blocks.set_dictionary(dictionary, index, length);\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateSync = function(z) {\n\t\t\tvar n; // number of bytes to look at\n\t\t\tvar p; // pointer to bytes\n\t\t\tvar m; // number of marker bytes found in a row\n\t\t\tvar r, w; // temporaries to save total_in and total_out\n\n\t\t\t// set up\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tif (z.istate.mode != BAD) {\n\t\t\t\tz.istate.mode = BAD;\n\t\t\t\tz.istate.marker = 0;\n\t\t\t}\n\t\t\tif ((n = z.avail_in) === 0)\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\tp = z.next_in_index;\n\t\t\tm = z.istate.marker;\n\n\t\t\t// search\n\t\t\twhile (n !== 0 && m < 4) {\n\t\t\t\tif (z.read_byte(p) == mark[m]) {\n\t\t\t\t\tm++;\n\t\t\t\t} else if (z.read_byte(p) !== 0) {\n\t\t\t\t\tm = 0;\n\t\t\t\t} else {\n\t\t\t\t\tm = 4 - m;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t\tn--;\n\t\t\t}\n\n\t\t\t// restore\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\tz.avail_in = n;\n\t\t\tz.istate.marker = m;\n\n\t\t\t// return no joy or set up to restart on a new block\n\t\t\tif (m != 4) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tr = z.total_in;\n\t\t\tw = z.total_out;\n\t\t\tinflateReset(z);\n\t\t\tz.total_in = r;\n\t\t\tz.total_out = w;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n\t\t// implementation to provide an additional safety check. PPP uses\n\t\t// Z_SYNC_FLUSH\n\t\t// but removes the length bytes of the resulting empty stored block. When\n\t\t// decompressing, PPP checks that at the end of input packet, inflate is\n\t\t// waiting for these length bytes.\n\t\tthat.inflateSyncPoint = function(z) {\n\t\t\tif (!z || !z.istate || !z.istate.blocks)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn z.istate.blocks.sync_point();\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t}\n\n\tZStream.prototype = {\n\t\tinflateInit : function(bits) {\n\t\t\tvar that = this;\n\t\t\tthat.istate = new Inflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.istate.inflateInit(that, bits);\n\t\t},\n\n\t\tinflate : function(f) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflate(that, f);\n\t\t},\n\n\t\tinflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.istate.inflateEnd(that);\n\t\t\tthat.istate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tinflateSync : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSync(that);\n\t\t},\n\t\tinflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\t\tread_byte : function(start) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + 1)[0];\n\t\t},\n\t\tread_buf : function(start, size) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + size);\n\t\t}\n\t};\n\n\t// Inflater\n\n\tfunction Inflater() {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar nomoreinput = false;\n\n\t\tz.inflateInit();\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (data.length === 0)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\n\t\t\t\t\tz.next_in_index = 0;\n\t\t\t\t\tnomoreinput = true;\n\t\t\t\t}\n\t\t\t\terr = z.inflate(flush);\n\t\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\n\t\t\t\t\tif (z.avail_in !== 0)\n\t\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\n\t\t\t\t\tthrow new Error(\"inflating: \" + z.msg);\n\t\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\n\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index === bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tz.inflateEnd();\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Inflater = env._jzlib_Inflater = Inflater;\n})(this);\n")]
};

module.exports = zip;


},{"zip":54}],54:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 Copyright (c) 2013 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

(function(obj) {
	"use strict";

	var ERR_BAD_FORMAT = "File format is not recognized.";
	var ERR_CRC = "CRC failed.";
	var ERR_ENCRYPTED = "File contains encrypted entry.";
	var ERR_ZIP64 = "File is using Zip64 (4gb+ file size).";
	var ERR_READ = "Error while reading zip file.";
	var ERR_WRITE = "Error while writing zip file.";
	var ERR_WRITE_DATA = "Error while writing file data.";
	var ERR_READ_DATA = "Error while reading file data.";
	var ERR_DUPLICATED_NAME = "File already exists.";
	var CHUNK_SIZE = 512 * 1024;
	
	var TEXT_PLAIN = "text/plain";

	var appendABViewSupported;
	try {
		appendABViewSupported = new Blob([ new DataView(new ArrayBuffer(0)) ]).size === 0;
	} catch (e) {
	}

	function Crc32() {
		this.crc = -1;
	}
	Crc32.prototype.append = function append(data) {
		var crc = this.crc | 0, table = this.table;
		for (var offset = 0, len = data.length | 0; offset < len; offset++)
			crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];
		this.crc = crc;
	};
	Crc32.prototype.get = function get() {
		return ~this.crc;
	};
	Crc32.prototype.table = (function() {
		var i, j, t, table = []; // Uint32Array is actually slower than []
		for (i = 0; i < 256; i++) {
			t = i;
			for (j = 0; j < 8; j++)
				if (t & 1)
					t = (t >>> 1) ^ 0xEDB88320;
				else
					t = t >>> 1;
			table[i] = t;
		}
		return table;
	})();
	
	// "no-op" codec
	function NOOP() {}
	NOOP.prototype.append = function append(bytes, onprogress) {
		return bytes;
	};
	NOOP.prototype.flush = function flush() {};

	function blobSlice(blob, index, length) {
		if (index < 0 || length < 0 || index + length > blob.size)
			throw new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);
		if (blob.slice)
			return blob.slice(index, index + length);
		else if (blob.webkitSlice)
			return blob.webkitSlice(index, index + length);
		else if (blob.mozSlice)
			return blob.mozSlice(index, index + length);
		else if (blob.msSlice)
			return blob.msSlice(index, index + length);
	}

	function getDataHelper(byteLength, bytes) {
		var dataBuffer, dataArray;
		dataBuffer = new ArrayBuffer(byteLength);
		dataArray = new Uint8Array(dataBuffer);
		if (bytes)
			dataArray.set(bytes, 0);
		return {
			buffer : dataBuffer,
			array : dataArray,
			view : new DataView(dataBuffer)
		};
	}

	// Readers
	function Reader() {
	}

	function TextReader(text) {
		var that = this, blobReader;

		function init(callback, onerror) {
			var blob = new Blob([ text ], {
				type : TEXT_PLAIN
			});
			blobReader = new BlobReader(blob);
			blobReader.init(function() {
				that.size = blobReader.size;
				callback();
			}, onerror);
		}

		function readUint8Array(index, length, callback, onerror) {
			blobReader.readUint8Array(index, length, callback, onerror);
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	TextReader.prototype = new Reader();
	TextReader.prototype.constructor = TextReader;

	function Data64URIReader(dataURI) {
		var that = this, dataStart;

		function init(callback) {
			var dataEnd = dataURI.length;
			while (dataURI.charAt(dataEnd - 1) == "=")
				dataEnd--;
			dataStart = dataURI.indexOf(",") + 1;
			that.size = Math.floor((dataEnd - dataStart) * 0.75);
			callback();
		}

		function readUint8Array(index, length, callback) {
			var i, data = getDataHelper(length);
			var start = Math.floor(index / 3) * 4;
			var end = Math.ceil((index + length) / 3) * 4;
			var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));
			var delta = index - Math.floor(start / 4) * 3;
			for (i = delta; i < delta + length; i++)
				data.array[i - delta] = bytes.charCodeAt(i);
			callback(data.array);
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	Data64URIReader.prototype = new Reader();
	Data64URIReader.prototype.constructor = Data64URIReader;

	function BlobReader(blob) {
		var that = this;

		function init(callback) {
			that.size = blob.size;
			callback();
		}

		function readUint8Array(index, length, callback, onerror) {
			var reader = new FileReader();
			reader.onload = function(e) {
				callback(new Uint8Array(e.target.result));
			};
			reader.onerror = onerror;
			try {
				reader.readAsArrayBuffer(blobSlice(blob, index, length));
			} catch (e) {
				onerror(e);
			}
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	BlobReader.prototype = new Reader();
	BlobReader.prototype.constructor = BlobReader;

	// Writers

	function Writer() {
	}
	Writer.prototype.getData = function(callback) {
		callback(this.data);
	};

	function TextWriter(encoding) {
		var that = this, blob;

		function init(callback) {
			blob = new Blob([], {
				type : TEXT_PLAIN
			});
			callback();
		}

		function writeUint8Array(array, callback) {
			blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
				type : TEXT_PLAIN
			});
			callback();
		}

		function getData(callback, onerror) {
			var reader = new FileReader();
			reader.onload = function(e) {
				callback(e.target.result);
			};
			reader.onerror = onerror;
			reader.readAsText(blob, encoding);
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	TextWriter.prototype = new Writer();
	TextWriter.prototype.constructor = TextWriter;

	function Data64URIWriter(contentType) {
		var that = this, data = "", pending = "";

		function init(callback) {
			data += "data:" + (contentType || "") + ";base64,";
			callback();
		}

		function writeUint8Array(array, callback) {
			var i, delta = pending.length, dataString = pending;
			pending = "";
			for (i = 0; i < (Math.floor((delta + array.length) / 3) * 3) - delta; i++)
				dataString += String.fromCharCode(array[i]);
			for (; i < array.length; i++)
				pending += String.fromCharCode(array[i]);
			if (dataString.length > 2)
				data += obj.btoa(dataString);
			else
				pending = dataString;
			callback();
		}

		function getData(callback) {
			callback(data + obj.btoa(pending));
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	Data64URIWriter.prototype = new Writer();
	Data64URIWriter.prototype.constructor = Data64URIWriter;

	function BlobWriter(contentType) {
		var blob, that = this;

		function init(callback) {
			blob = new Blob([], {
				type : contentType
			});
			callback();
		}

		function writeUint8Array(array, callback) {
			blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
				type : contentType
			});
			callback();
		}

		function getData(callback) {
			callback(blob);
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	BlobWriter.prototype = new Writer();
	BlobWriter.prototype.constructor = BlobWriter;

	/** 
	 * inflate/deflate core functions
	 * @param worker {Worker} web worker for the task.
	 * @param initialMessage {Object} initial message to be sent to the worker. should contain
	 *   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.
	 *   This function may add more properties before sending.
	 */
	function launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {
		var chunkIndex = 0, index, outputSize, sn = initialMessage.sn, crc;

		function onflush() {
			worker.removeEventListener('message', onmessage, false);
			onend(outputSize, crc);
		}

		function onmessage(event) {
			var message = event.data, data = message.data, err = message.error;
			if (err) {
				err.toString = function () { return 'Error: ' + this.message; };
				onreaderror(err);
				return;
			}
			if (message.sn !== sn)
				return;
			if (typeof message.codecTime === 'number')
				worker.codecTime += message.codecTime; // should be before onflush()
			if (typeof message.crcTime === 'number')
				worker.crcTime += message.crcTime;

			switch (message.type) {
				case 'append':
					if (data) {
						outputSize += data.length;
						writer.writeUint8Array(data, function() {
							step();
						}, onwriteerror);
					} else
						step();
					break;
				case 'flush':
					crc = message.crc;
					if (data) {
						outputSize += data.length;
						writer.writeUint8Array(data, function() {
							onflush();
						}, onwriteerror);
					} else
						onflush();
					break;
				case 'progress':
					if (onprogress)
						onprogress(index + message.loaded, size);
					break;
				case 'importScripts': //no need to handle here
				case 'newTask':
				case 'echo':
					break;
				default:
					console.warn('zip.js:launchWorkerProcess: unknown message: ', message);
			}
		}

		function step() {
			index = chunkIndex * CHUNK_SIZE;
			// use `<=` instead of `<`, because `size` may be 0.
			if (index <= size) {
				reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(array) {
					if (onprogress)
						onprogress(index, size);
					var msg = index === 0 ? initialMessage : {sn : sn};
					msg.type = 'append';
					msg.data = array;
					
					// posting a message with transferables will fail on IE10
					try {
						worker.postMessage(msg, [array.buffer]);
					} catch(ex) {
						worker.postMessage(msg); // retry without transferables
					}
					chunkIndex++;
				}, onreaderror);
			} else {
				worker.postMessage({
					sn: sn,
					type: 'flush'
				});
			}
		}

		outputSize = 0;
		worker.addEventListener('message', onmessage, false);
		step();
	}

	function launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {
		var chunkIndex = 0, index, outputSize = 0,
			crcInput = crcType === 'input',
			crcOutput = crcType === 'output',
			crc = new Crc32();
		function step() {
			var outputData;
			index = chunkIndex * CHUNK_SIZE;
			if (index < size)
				reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(inputData) {
					var outputData;
					try {
						outputData = process.append(inputData, function(loaded) {
							if (onprogress)
								onprogress(index + loaded, size);
						});
					} catch (e) {
						onreaderror(e);
						return;
					}
					if (outputData) {
						outputSize += outputData.length;
						writer.writeUint8Array(outputData, function() {
							chunkIndex++;
							setTimeout(step, 1);
						}, onwriteerror);
						if (crcOutput)
							crc.append(outputData);
					} else {
						chunkIndex++;
						setTimeout(step, 1);
					}
					if (crcInput)
						crc.append(inputData);
					if (onprogress)
						onprogress(index, size);
				}, onreaderror);
			else {
				try {
					outputData = process.flush();
				} catch (e) {
					onreaderror(e);
					return;
				}
				if (outputData) {
					if (crcOutput)
						crc.append(outputData);
					outputSize += outputData.length;
					writer.writeUint8Array(outputData, function() {
						onend(outputSize, crc.get());
					}, onwriteerror);
				} else
					onend(outputSize, crc.get());
			}
		}

		step();
	}

	function inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = computeCrc32 ? 'output' : 'none';
		if (obj.zip.useWebWorkers) {
			var initialMessage = {
				sn: sn,
				codecClass: 'Inflater',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	function deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = 'input';
		if (obj.zip.useWebWorkers) {
			var initialMessage = {
				sn: sn,
				options: {level: level},
				codecClass: 'Deflater',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	function copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = 'input';
		if (obj.zip.useWebWorkers && computeCrc32) {
			var initialMessage = {
				sn: sn,
				codecClass: 'NOOP',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	// ZipReader

	function decodeASCII(str) {
		var i, out = "", charCode, extendedASCII = [ '\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4', '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB',
				'\u00E8', '\u00EF', '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6', '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9',
				'\u00FF', '\u00D6', '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1', '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1',
				'\u00AA', '\u00BA', '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB', '\u00BB', '_', '_', '_', '\u00A6', '\u00A6',
				'\u00C1', '\u00C2', '\u00C0', '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-', '-', '+', '-', '+', '\u00E3',
				'\u00C3', '+', '+', '-', '-', '\u00A6', '-', '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i', '\u00CD', '\u00CE',
				'\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_', '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5', '\u00FE',
				'\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD', '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
				'\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3', '\u00B2', '_', ' ' ];
		for (i = 0; i < str.length; i++) {
			charCode = str.charCodeAt(i) & 0xFF;
			if (charCode > 127)
				out += extendedASCII[charCode - 128];
			else
				out += String.fromCharCode(charCode);
		}
		return out;
	}

	function decodeUTF8(string) {
		return decodeURIComponent(escape(string));
	}

	function getString(bytes) {
		var i, str = "";
		for (i = 0; i < bytes.length; i++)
			str += String.fromCharCode(bytes[i]);
		return str;
	}

	function getDate(timeRaw) {
		var date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;
		try {
			return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5,
					(time & 0x001F) * 2, 0);
		} catch (e) {
		}
	}

	function readCommonHeader(entry, data, index, centralDirectory, onerror) {
		entry.version = data.view.getUint16(index, true);
		entry.bitFlag = data.view.getUint16(index + 2, true);
		entry.compressionMethod = data.view.getUint16(index + 4, true);
		entry.lastModDateRaw = data.view.getUint32(index + 6, true);
		entry.lastModDate = getDate(entry.lastModDateRaw);
		if ((entry.bitFlag & 0x01) === 0x01) {
			onerror(ERR_ENCRYPTED);
			return;
		}
		if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {
			entry.crc32 = data.view.getUint32(index + 10, true);
			entry.compressedSize = data.view.getUint32(index + 14, true);
			entry.uncompressedSize = data.view.getUint32(index + 18, true);
		}
		if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {
			onerror(ERR_ZIP64);
			return;
		}
		entry.filenameLength = data.view.getUint16(index + 22, true);
		entry.extraFieldLength = data.view.getUint16(index + 24, true);
	}

	function createZipReader(reader, callback, onerror) {
		var inflateSN = 0;

		function Entry() {
		}

		Entry.prototype.getData = function(writer, onend, onprogress, checkCrc32) {
			var that = this;

			function testCrc32(crc32) {
				var dataCrc32 = getDataHelper(4);
				dataCrc32.view.setUint32(0, crc32);
				return that.crc32 == dataCrc32.view.getUint32(0);
			}

			function getWriterData(uncompressedSize, crc32) {
				if (checkCrc32 && !testCrc32(crc32))
					onerror(ERR_CRC);
				else
					writer.getData(function(data) {
						onend(data);
					});
			}

			function onreaderror(err) {
				onerror(err || ERR_READ_DATA);
			}

			function onwriteerror(err) {
				onerror(err || ERR_WRITE_DATA);
			}

			reader.readUint8Array(that.offset, 30, function(bytes) {
				var data = getDataHelper(bytes.length, bytes), dataOffset;
				if (data.view.getUint32(0) != 0x504b0304) {
					onerror(ERR_BAD_FORMAT);
					return;
				}
				readCommonHeader(that, data, 4, false, onerror);
				dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;
				writer.init(function() {
					if (that.compressionMethod === 0)
						copy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
					else
						inflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
				}, onwriteerror);
			}, onreaderror);
		};

		function seekEOCDR(eocdrCallback) {
			// "End of central directory record" is the last part of a zip archive, and is at least 22 bytes long.
			// Zip file comment is the last part of EOCDR and has max length of 64KB,
			// so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).
			var EOCDR_MIN = 22;
			if (reader.size < EOCDR_MIN) {
				onerror(ERR_BAD_FORMAT);
				return;
			}
			var ZIP_COMMENT_MAX = 256 * 256, EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX;

			// In most cases, the EOCDR is EOCDR_MIN bytes long
			doSeek(EOCDR_MIN, function() {
				// If not found, try within EOCDR_MAX bytes
				doSeek(Math.min(EOCDR_MAX, reader.size), function() {
					onerror(ERR_BAD_FORMAT);
				});
			});

			// seek last length bytes of file for EOCDR
			function doSeek(length, eocdrNotFoundCallback) {
				reader.readUint8Array(reader.size - length, length, function(bytes) {
					for (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {
						if (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {
							eocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));
							return;
						}
					}
					eocdrNotFoundCallback();
				}, function() {
					onerror(ERR_READ);
				});
			}
		}

		var zipReader = {
			getEntries : function(callback) {
				var worker = this._worker;
				// look for End of central directory record
				seekEOCDR(function(dataView) {
					var datalength, fileslength;
					datalength = dataView.getUint32(16, true);
					fileslength = dataView.getUint16(8, true);
					if (datalength < 0 || datalength >= reader.size) {
						onerror(ERR_BAD_FORMAT);
						return;
					}
					reader.readUint8Array(datalength, reader.size - datalength, function(bytes) {
						var i, index = 0, entries = [], entry, filename, comment, data = getDataHelper(bytes.length, bytes);
						for (i = 0; i < fileslength; i++) {
							entry = new Entry();
							entry._worker = worker;
							if (data.view.getUint32(index) != 0x504b0102) {
								onerror(ERR_BAD_FORMAT);
								return;
							}
							readCommonHeader(entry, data, index + 6, true, onerror);
							entry.commentLength = data.view.getUint16(index + 32, true);
							entry.directory = ((data.view.getUint8(index + 38) & 0x10) == 0x10);
							entry.offset = data.view.getUint32(index + 42, true);
							filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));
							entry.filename = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(filename) : decodeASCII(filename);
							if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == "/")
								entry.directory = true;
							comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46
									+ entry.filenameLength + entry.extraFieldLength + entry.commentLength));
							entry.comment = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(comment) : decodeASCII(comment);
							entries.push(entry);
							index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;
						}
						callback(entries);
					}, function() {
						onerror(ERR_READ);
					});
				});
			},
			close : function(callback) {
				if (this._worker) {
					this._worker.terminate();
					this._worker = null;
				}
				if (callback)
					callback();
			},
			_worker: null
		};

		if (!obj.zip.useWebWorkers)
			callback(zipReader);
		else {
			createWorker('inflater',
				function(worker) {
					zipReader._worker = worker;
					callback(zipReader);
				},
				function(err) {
					onerror(err);
				}
			);
		}
	}

	// ZipWriter

	function encodeUTF8(string) {
		return unescape(encodeURIComponent(string));
	}

	function getBytes(str) {
		var i, array = [];
		for (i = 0; i < str.length; i++)
			array.push(str.charCodeAt(i));
		return array;
	}

	function createZipWriter(writer, callback, onerror, dontDeflate) {
		var files = {}, filenames = [], datalength = 0;
		var deflateSN = 0;

		function onwriteerror(err) {
			onerror(err || ERR_WRITE);
		}

		function onreaderror(err) {
			onerror(err || ERR_READ_DATA);
		}

		var zipWriter = {
			add : function(name, reader, onend, onprogress, options) {
				var header, filename, date;
				var worker = this._worker;

				function writeHeader(callback) {
					var data;
					date = options.lastModDate || new Date();
					header = getDataHelper(26);
					files[name] = {
						headerArray : header.array,
						directory : options.directory,
						filename : filename,
						offset : datalength,
						comment : getBytes(encodeUTF8(options.comment || ""))
					};
					header.view.setUint32(0, 0x14000808);
					if (options.version)
						header.view.setUint8(0, options.version);
					if (!dontDeflate && options.level !== 0 && !options.directory)
						header.view.setUint16(4, 0x0800);
					header.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true);
					header.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true);
					header.view.setUint16(22, filename.length, true);
					data = getDataHelper(30 + filename.length);
					data.view.setUint32(0, 0x504b0304);
					data.array.set(header.array, 4);
					data.array.set(filename, 30);
					datalength += data.array.length;
					writer.writeUint8Array(data.array, callback, onwriteerror);
				}

				function writeFooter(compressedLength, crc32) {
					var footer = getDataHelper(16);
					datalength += compressedLength || 0;
					footer.view.setUint32(0, 0x504b0708);
					if (typeof crc32 != "undefined") {
						header.view.setUint32(10, crc32, true);
						footer.view.setUint32(4, crc32, true);
					}
					if (reader) {
						footer.view.setUint32(8, compressedLength, true);
						header.view.setUint32(14, compressedLength, true);
						footer.view.setUint32(12, reader.size, true);
						header.view.setUint32(18, reader.size, true);
					}
					writer.writeUint8Array(footer.array, function() {
						datalength += 16;
						onend();
					}, onwriteerror);
				}

				function writeFile() {
					options = options || {};
					name = name.trim();
					if (options.directory && name.charAt(name.length - 1) != "/")
						name += "/";
					if (files.hasOwnProperty(name)) {
						onerror(ERR_DUPLICATED_NAME);
						return;
					}
					filename = getBytes(encodeUTF8(name));
					filenames.push(name);
					writeHeader(function() {
						if (reader)
							if (dontDeflate || options.level === 0)
								copy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);
							else
								deflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);
						else
							writeFooter();
					}, onwriteerror);
				}

				if (reader)
					reader.init(writeFile, onreaderror);
				else
					writeFile();
			},
			close : function(callback) {
				if (this._worker) {
					this._worker.terminate();
					this._worker = null;
				}

				var data, length = 0, index = 0, indexFilename, file;
				for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
					file = files[filenames[indexFilename]];
					length += 46 + file.filename.length + file.comment.length;
				}
				data = getDataHelper(length + 22);
				for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
					file = files[filenames[indexFilename]];
					data.view.setUint32(index, 0x504b0102);
					data.view.setUint16(index + 4, 0x1400);
					data.array.set(file.headerArray, index + 6);
					data.view.setUint16(index + 32, file.comment.length, true);
					if (file.directory)
						data.view.setUint8(index + 38, 0x10);
					data.view.setUint32(index + 42, file.offset, true);
					data.array.set(file.filename, index + 46);
					data.array.set(file.comment, index + 46 + file.filename.length);
					index += 46 + file.filename.length + file.comment.length;
				}
				data.view.setUint32(index, 0x504b0506);
				data.view.setUint16(index + 8, filenames.length, true);
				data.view.setUint16(index + 10, filenames.length, true);
				data.view.setUint32(index + 12, length, true);
				data.view.setUint32(index + 16, datalength, true);
				writer.writeUint8Array(data.array, function() {
					writer.getData(callback);
				}, onwriteerror);
			},
			_worker: null
		};

		if (!obj.zip.useWebWorkers)
			callback(zipWriter);
		else {
			createWorker('deflater',
				function(worker) {
					zipWriter._worker = worker;
					callback(zipWriter);
				},
				function(err) {
					onerror(err);
				}
			);
		}
	}

	function resolveURLs(urls) {
		var a = document.createElement('a');
		return urls.map(function(url) {
			a.href = url;
			return a.href;
		});
	}

	var DEFAULT_WORKER_SCRIPTS = {
		deflater: ['z-worker.js', 'deflate.js'],
		inflater: ['z-worker.js', 'inflate.js']
	};
	function createWorker(type, callback, onerror) {
		if (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {
			onerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));
			return;
		}
		var scripts;
		if (obj.zip.workerScripts) {
			scripts = obj.zip.workerScripts[type];
			if (!Array.isArray(scripts)) {
				onerror(new Error('zip.workerScripts.' + type + ' is not an array!'));
				return;
			}
			scripts = resolveURLs(scripts);
		} else {
			scripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);
			scripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];
		}
		var worker = new Worker(scripts[0]);
		// record total consumed time by inflater/deflater/crc32 in this worker
		worker.codecTime = worker.crcTime = 0;
		worker.postMessage({ type: 'importScripts', scripts: scripts.slice(1) });
		worker.addEventListener('message', onmessage);
		function onmessage(ev) {
			var msg = ev.data;
			if (msg.error) {
				worker.terminate(); // should before onerror(), because onerror() may throw.
				onerror(msg.error);
				return;
			}
			if (msg.type === 'importScripts') {
				worker.removeEventListener('message', onmessage);
				worker.removeEventListener('error', errorHandler);
				callback(worker);
			}
		}
		// catch entry script loading error and other unhandled errors
		worker.addEventListener('error', errorHandler);
		function errorHandler(err) {
			worker.terminate();
			onerror(err);
		}
	}

	function onerror_default(error) {
		console.error(error);
	}
	obj.zip = {
		Reader : Reader,
		Writer : Writer,
		BlobReader : BlobReader,
		Data64URIReader : Data64URIReader,
		TextReader : TextReader,
		BlobWriter : BlobWriter,
		Data64URIWriter : Data64URIWriter,
		TextWriter : TextWriter,
		createReader : function(reader, callback, onerror) {
			onerror = onerror || onerror_default;

			reader.init(function() {
				createZipReader(reader, callback, onerror);
			}, onerror);
		},
		createWriter : function(writer, callback, onerror, dontDeflate) {
			onerror = onerror || onerror_default;
			dontDeflate = !!dontDeflate;

			writer.init(function() {
				createZipWriter(writer, callback, onerror, dontDeflate);
			}, onerror);
		},
		useWebWorkers : true,
		/**
		 * Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.
		 * E.g.: zip.workerScripts = './';
		 */
		workerScriptsPath : null,
		/**
		 * Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.
		 * workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.
		 * Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.
		 * All urls are relative to current base url.
		 * E.g.:
		 * zip.workerScripts = {
		 *   deflater: ['z-worker.js', 'deflate.js'],
		 *   inflater: ['z-worker.js', 'inflate.js']
		 * };
		 */
		workerScripts : null,
	};

})(this);

; browserify_shim__define__module__export__(typeof zip != "undefined" ? zip : window.zip);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[25])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
